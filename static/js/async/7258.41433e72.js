"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["7258"],{2732:function(n,e,s){s.r(e),s.d(e,{default:()=>l});var i=s(1549),r=s(6603);function c(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",ul:"ul",li:"li",strong:"strong",h2:"h2",pre:"pre",h3:"h3",h4:"h4"},(0,r.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"packconfig",children:["PackConfig",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#packconfig",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"PackConfig"}),"는 소프트웨어 패키지 패키징 설정 인터페이스로, 서비스의 빌드 결과물을 표준 npm .tgz 형식의 소프트웨어 패키지로 패키징하는 데 사용됩니다."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"표준화"}),": npm 표준 .tgz 패키징 형식 사용"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"완전성"}),": 모듈의 소스 코드, 타입 선언 및 설정 파일 등 모든 필요한 파일 포함"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"호환성"}),": npm 생태계와 완벽하게 호환되며, 표준 패키지 관리 워크플로우 지원"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"타입-정의",children:["타입 정의",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#타입-정의",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"interface PackConfig {\n    enable?: boolean;\n    outputs?: string | string[] | boolean;\n    packageJson?: (gez: Gez, pkg: Record<string, any>) => Promise<Record<string, any>>;\n    onBefore?: (gez: Gez, pkg: Record<string, any>) => Promise<void>;\n    onAfter?: (gez: Gez, pkg: Record<string, any>, file: Buffer) => Promise<void>;\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"packconfig-1",children:["PackConfig",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#packconfig-1",children:"#"})]}),"\n",(0,i.jsxs)(e.h4,{id:"enable",children:["enable",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#enable",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"패키징 기능을 활성화할지 여부. 활성화하면 빌드 결과물을 표준 npm .tgz 형식의 소프트웨어 패키지로 패키징합니다."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["타입: ",(0,i.jsx)(e.code,{children:"boolean"})]}),"\n",(0,i.jsxs)(e.li,{children:["기본값: ",(0,i.jsx)(e.code,{children:"false"})]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"outputs",children:["outputs",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#outputs",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"출력할 소프트웨어 패키지 파일 경로를 지정합니다. 다음 설정 방식을 지원합니다:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"string"}),": 단일 출력 경로, 예: 'dist/versions/my-app.tgz'"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"string[]"}),": 여러 출력 경로, 여러 버전을 동시에 생성할 때 사용"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"boolean"}),": true일 때 기본 경로 'dist/client/versions/latest.tgz' 사용"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"packagejson",children:["packageJson",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"package.json 내용을 사용자 정의하는 콜백 함수. 패키징 전에 호출되며, package.json 내용을 사용자 정의하는 데 사용됩니다."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["매개변수:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"gez: Gez"})," - Gez 인스턴스"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"pkg: any"})," - 원본 package.json 내용"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["반환값: ",(0,i.jsx)(e.code,{children:"Promise<any>"})," - 수정된 package.json 내용"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"일반적인 용도:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"패키지 이름 및 버전 번호 수정"}),"\n",(0,i.jsx)(e.li,{children:"의존성 추가 또는 업데이트"}),"\n",(0,i.jsx)(e.li,{children:"사용자 정의 필드 추가"}),"\n",(0,i.jsx)(e.li,{children:"릴리스 관련 정보 설정"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"예제:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"packageJson: async (gez, pkg) => {\n  // 패키지 정보 설정\n  pkg.name = 'my-app';\n  pkg.version = '1.0.0';\n  pkg.description = '내 애플리케이션';\n\n  // 의존성 추가\n  pkg.dependencies = {\n    'vue': '^3.0.0',\n    'express': '^4.17.1'\n  };\n\n  // 릴리스 설정 추가\n  pkg.publishConfig = {\n    registry: 'https://registry.example.com'\n  };\n\n  return pkg;\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"onbefore",children:["onBefore",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onbefore",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"패키징 전 준비 작업을 위한 콜백 함수."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["매개변수:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"gez: Gez"})," - Gez 인스턴스"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"pkg: Record<string, any>"})," - package.json 내용"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["반환값: ",(0,i.jsx)(e.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"일반적인 용도:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"추가 파일 추가 (README, LICENSE 등)"}),"\n",(0,i.jsx)(e.li,{children:"테스트 또는 빌드 검증 실행"}),"\n",(0,i.jsx)(e.li,{children:"문서 또는 메타데이터 생성"}),"\n",(0,i.jsx)(e.li,{children:"임시 파일 정리"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"예제:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"onBefore: async (gez, pkg) => {\n  // 문서 추가\n  await fs.writeFile('dist/README.md', '# My App');\n  await fs.writeFile('dist/LICENSE', 'MIT License');\n\n  // 테스트 실행\n  await runTests();\n\n  // 문서 생성\n  await generateDocs();\n\n  // 임시 파일 정리\n  await cleanupTempFiles();\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"onafter",children:["onAfter",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onafter",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"패키징 완료 후 처리 작업을 위한 콜백 함수. .tgz 파일 생성 후 호출되며, 패키징 결과물을 처리하는 데 사용됩니다."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["매개변수:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"gez: Gez"})," - Gez 인스턴스"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"pkg: Record<string, any>"})," - package.json 내용"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"file: Buffer"})," - 패키징된 파일 내용"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["반환값: ",(0,i.jsx)(e.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"일반적인 용도:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"npm 저장소에 릴리스 (공개 또는 개인)"}),"\n",(0,i.jsx)(e.li,{children:"정적 리소스 서버에 업로드"}),"\n",(0,i.jsx)(e.li,{children:"버전 관리 실행"}),"\n",(0,i.jsx)(e.li,{children:"CI/CD 프로세스 트리거"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"예제:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"onAfter: async (gez, pkg, file) => {\n  // npm 개인 저장소에 릴리스\n  await publishToRegistry(file, {\n    registry: 'https://registry.example.com'\n  });\n\n  // 정적 리소스 서버에 업로드\n  await uploadToServer(file, 'https://assets.example.com/packages');\n\n  // 버전 태그 생성\n  await createGitTag(pkg.version);\n\n  // 배포 프로세스 트리거\n  await triggerDeploy(pkg.version);\n}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"사용-예제",children:["사용 예제",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#사용-예제",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n  modules: {\n    // 내보낼 모듈 설정\n    exports: [\n      'root:src/components/button.vue',\n      'root:src/utils/format.ts',\n      'npm:vue',\n      'npm:vue-router'\n    ]\n  },\n  // 패키징 설정\n  pack: {\n    // 패키징 기능 활성화\n    enable: true,\n\n    // 여러 버전 동시 출력\n    outputs: [\n      'dist/versions/latest.tgz',\n      'dist/versions/1.0.0.tgz'\n    ],\n\n    // package.json 사용자 정의\n    packageJson: async (gez, pkg) => {\n      pkg.version = '1.0.0';\n      return pkg;\n    },\n\n    // 패키징 전 준비\n    onBefore: async (gez, pkg) => {\n      // 필요한 파일 추가\n      await fs.writeFile('dist/README.md', '# Your App\\n\\n모듈 내보내기 설명...');\n      // 타입 검사 실행\n      await runTypeCheck();\n    },\n\n    // 패키징 후 처리\n    onAfter: async (gez, pkg, file) => {\n      // 개인 npm 미러에 릴리스\n      await publishToRegistry(file, {\n        registry: 'https://npm.your-registry.com/'\n      });\n      // 또는 정적 서버에 배포\n      await uploadToServer(file, 'https://static.example.com/packages');\n    }\n  }\n} satisfies GezOptions;\n"})})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["ko%2Fapi%2Fcore%2Fpack-config.md"]={toc:[{text:"타입 정의",id:"타입-정의",depth:2},{text:"PackConfig",id:"packconfig-1",depth:3},{text:"enable",id:"enable",depth:4},{text:"outputs",id:"outputs",depth:4},{text:"packageJson",id:"packagejson",depth:4},{text:"onBefore",id:"onbefore",depth:4},{text:"onAfter",id:"onafter",depth:4},{text:"사용 예제",id:"사용-예제",depth:2}],title:"PackConfig",headingTitle:"PackConfig",frontmatter:{titleSuffix:"Gez 프레임워크 패키징 설정 API 참조",description:"Gez 프레임워크의 PackConfig 설정 인터페이스에 대해 자세히 설명합니다. 소프트웨어 패키지 패키징 규칙, 출력 설정 및 라이프사이클 훅을 포함하여 개발자가 표준화된 빌드 프로세스를 구현할 수 있도록 도와줍니다.",head:[["meta",{property:"keywords",content:"Gez, PackConfig, 소프트웨어 패키지 패키징, 빌드 설정, 라이프사이클 훅, 패키징 설정, 웹 애플리케이션 프레임워크"}]]}}}}]);