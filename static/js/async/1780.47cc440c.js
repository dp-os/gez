"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["1780"],{4947:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(1549),i=s(6603);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",code:"code",h2:"h2",h3:"h3",pre:"pre",div:"div",ol:"ol"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"路徑別名",children:["路徑別名",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#路徑別名",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"路徑別名（Path Alias）是一種模組導入路徑映射機制，它允許開發者使用簡短、語義化的識別符來替代完整的模組路徑。在 Gez 中，路徑別名機制具有以下優勢："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"簡化導入路徑"}),"：使用語義化的別名替代冗長的相對路徑，提高程式碼可讀性"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"避免深層嵌套"}),"：消除多層級目錄引用（如 ",(0,r.jsx)(n.code,{children:"../../../../"}),"）帶來的維護困難"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"類型安全"}),"：與 TypeScript 的類型系統完全整合，提供程式碼補全和類型檢查"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"模組解析優化"}),"：通過預定義的路徑映射，提升模組解析效能"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"預設別名機制",children:["預設別名機制",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#預設別名機制",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Gez 採用基於服務名稱（Service Name）的自動別名機制，這種約定優於配置的設計具有以下特點："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"自動配置"}),"：基於 ",(0,r.jsx)(n.code,{children:"package.json"})," 中的 ",(0,r.jsx)(n.code,{children:"name"})," 欄位自動生成別名，無需手動配置"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"統一規範"}),"：確保所有服務模組遵循一致的命名和引用規範"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"類型支援"}),"：配合 ",(0,r.jsx)(n.code,{children:"npm run build:dts"})," 指令，自動生成類型宣告檔案，實現跨服務的類型推導"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"可預測性"}),"：通過服務名稱即可推斷出模組的引用路徑，降低維護成本"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"配置說明",children:["配置說明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置說明",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"packagejson-配置",children:["package.json 配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson-配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"package.json"})," 中，通過 ",(0,r.jsx)(n.code,{children:"name"})," 欄位定義服務的名稱，該名稱將作為服務的預設別名前綴："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n    "name": "your-app-name"\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"tsconfigjson-配置",children:["tsconfig.json 配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tsconfigjson-配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["為了使 TypeScript 能夠正確解析別名路徑，需要在 ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," 中配置 ",(0,r.jsx)(n.code,{children:"paths"})," 映射："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="tsconfig.json"',children:'{\n    "compilerOptions": {\n        "paths": {\n            "your-app-name/src/*": [\n                "./src/*"\n            ],\n            "your-app-name/*": [\n                "./*"\n            ]\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"使用範例",children:["使用範例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用範例",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"導入服務內部模組",children:["導入服務內部模組",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#導入服務內部模組",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 使用別名導入\nimport { MyComponent } from 'your-app-name/src/components';\n\n// 等效的相對路徑導入\nimport { MyComponent } from '../components';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"導入其他服務模組",children:["導入其他服務模組",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#導入其他服務模組",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 導入其他服務的元件\nimport { SharedComponent } from 'other-service/src/components';\n\n// 導入其他服務的工具函數\nimport { utils } from 'other-service/src/utils';\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"最佳實踐"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"優先使用別名路徑而不是相對路徑"}),"\n",(0,r.jsx)(n.li,{children:"保持別名路徑的語義化和一致性"}),"\n",(0,r.jsx)(n.li,{children:"避免在別名路徑中使用過多的目錄層級"}),"\n"]}),"\n"]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 導入元件\nimport { Button } from 'your-app-name/src/components';\nimport { Layout } from 'your-app-name/src/components/layout';\n\n// 導入工具函數\nimport { formatDate } from 'your-app-name/src/utils';\nimport { request } from 'your-app-name/src/utils/request';\n\n// 導入類型定義\nimport type { UserInfo } from 'your-app-name/src/types';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"跨服務導入",children:["跨服務導入",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#跨服務導入",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"當配置了模組連結（Module Link）後，可以使用相同的方式導入其他服務的模組："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 導入遠端服務的元件\nimport { Header } from 'remote-service/src/components';\n\n// 導入遠端服務的工具函數\nimport { logger } from 'remote-service/src/utils';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"自定義別名",children:["自定義別名",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定義別名",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"對於第三方套件或特殊場景，可以通過 Gez 配置檔案自定義別名："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"export default {\n    async devApp(gez) {\n        return import('@gez/rspack').then((m) =>\n            m.createApp(gez, (buildContext) => {\n                buildContext.config.resolve = {\n                    ...buildContext.config.resolve,\n                    alias: {\n                        ...buildContext.config.resolve?.alias,\n                        // 為 Vue 配置特定的建置版本\n                        'vue$': 'vue/dist/vue.esm.js',\n                        // 為常用目錄配置簡短別名\n                        '@': './src',\n                        '@components': './src/components'\n                    }\n                }\n            })\n        );\n    }\n} satisfies GezOptions;\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive warning",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"注意事項"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"對於業務模組，建議始終使用預設的別名機制，以保持專案的一致性"}),"\n",(0,r.jsx)(n.li,{children:"自定義別名主要用於處理第三方套件的特殊需求或優化開發體驗"}),"\n",(0,r.jsx)(n.li,{children:"過度使用自定義別名可能會影響程式碼的可維護性和建置優化"}),"\n"]}),"\n"]})]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh-TW%2Fguide%2Fessentials%2Falias.md"]={toc:[{text:"預設別名機制",id:"預設別名機制",depth:2},{text:"配置說明",id:"配置說明",depth:2},{text:"package.json 配置",id:"packagejson-配置",depth:3},{text:"tsconfig.json 配置",id:"tsconfigjson-配置",depth:3},{text:"使用範例",id:"使用範例",depth:2},{text:"導入服務內部模組",id:"導入服務內部模組",depth:3},{text:"導入其他服務模組",id:"導入其他服務模組",depth:3},{text:"跨服務導入",id:"跨服務導入",depth:3},{text:"自定義別名",id:"自定義別名",depth:3}],title:"路徑別名",headingTitle:"路徑別名",frontmatter:{titleSuffix:"Gez 框架模組導入路徑映射指南",description:"詳細介紹 Gez 框架的路徑別名機制，包括簡化導入路徑、避免深層嵌套、類型安全和模組解析優化等特性，幫助開發者提升程式碼可維護性。",head:[["meta",{property:"keywords",content:"Gez, 路徑別名, Path Alias, TypeScript, 模組導入, 路徑映射, 程式碼可維護性"}]]}}}}]);