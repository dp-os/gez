"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["1640"],{5009:function(n,e,s){s.r(e),s.d(e,{default:()=>l});var i=s(1549),r=s(6603);function c(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",ul:"ul",li:"li",strong:"strong",h2:"h2",pre:"pre",h3:"h3",h4:"h4"},(0,r.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"packconfig",children:["PackConfig",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#packconfig",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"PackConfig"})," 是软件包打包配置接口，用于将服务的构建产物打包成标准的 npm .tgz 格式软件包。"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"标准化"}),"：使用 npm 标准的 .tgz 打包格式"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"完整性"}),"：包含模块的源代码、类型声明和配置文件等所有必要文件"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"兼容性"}),"：与 npm 生态系统完全兼容，支持标准的包管理工作流"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"类型定义",children:["类型定义",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"interface PackConfig {\n    enable?: boolean;\n    outputs?: string | string[] | boolean;\n    packageJson?: (gez: Gez, pkg: Record<string, any>) => Promise<Record<string, any>>;\n    onBefore?: (gez: Gez, pkg: Record<string, any>) => Promise<void>;\n    onAfter?: (gez: Gez, pkg: Record<string, any>, file: Buffer) => Promise<void>;\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"packconfig-1",children:["PackConfig",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#packconfig-1",children:"#"})]}),"\n",(0,i.jsxs)(e.h4,{id:"enable",children:["enable",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#enable",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"是否启用打包功能。启用后会将构建产物打包成标准的 npm .tgz 格式软件包。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["类型：",(0,i.jsx)(e.code,{children:"boolean"})]}),"\n",(0,i.jsxs)(e.li,{children:["默认值：",(0,i.jsx)(e.code,{children:"false"})]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"outputs",children:["outputs",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#outputs",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"指定输出的软件包文件路径。支持以下配置方式："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"string"}),": 单个输出路径，如 'dist/versions/my-app.tgz'"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"string[]"}),": 多个输出路径，用于同时生成多个版本"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"boolean"}),": true 时使用默认路径 'dist/client/versions/latest.tgz'"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"packagejson",children:["packageJson",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"自定义 package.json 内容的回调函数。在打包前调用，用于自定义 package.json 的内容。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["参数：","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"gez: Gez"})," - Gez 实例"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"pkg: any"})," - 原始的 package.json 内容"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["返回值：",(0,i.jsx)(e.code,{children:"Promise<any>"})," - 修改后的 package.json 内容"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"常见用途："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"修改包名和版本号"}),"\n",(0,i.jsx)(e.li,{children:"添加或更新依赖项"}),"\n",(0,i.jsx)(e.li,{children:"添加自定义字段"}),"\n",(0,i.jsx)(e.li,{children:"配置发布相关信息"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"示例："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"packageJson: async (gez, pkg) => {\n  // 设置包信息\n  pkg.name = 'my-app';\n  pkg.version = '1.0.0';\n  pkg.description = '我的应用';\n\n  // 添加依赖\n  pkg.dependencies = {\n    'vue': '^3.0.0',\n    'express': '^4.17.1'\n  };\n\n  // 添加发布配置\n  pkg.publishConfig = {\n    registry: 'https://registry.example.com'\n  };\n\n  return pkg;\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"onbefore",children:["onBefore",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onbefore",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"打包前的准备工作回调函数。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["参数：","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"gez: Gez"})," - Gez 实例"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"pkg: Record<string, any>"})," - package.json 内容"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["返回值：",(0,i.jsx)(e.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"常见用途："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"添加额外的文件（README、LICENSE 等）"}),"\n",(0,i.jsx)(e.li,{children:"执行测试或构建验证"}),"\n",(0,i.jsx)(e.li,{children:"生成文档或元数据"}),"\n",(0,i.jsx)(e.li,{children:"清理临时文件"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"示例："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"onBefore: async (gez, pkg) => {\n  // 添加文档\n  await fs.writeFile('dist/README.md', '# My App');\n  await fs.writeFile('dist/LICENSE', 'MIT License');\n\n  // 执行测试\n  await runTests();\n\n  // 生成文档\n  await generateDocs();\n\n  // 清理临时文件\n  await cleanupTempFiles();\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"onafter",children:["onAfter",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onafter",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"打包完成后的处理回调函数。在 .tgz 文件生成后调用，用于处理打包产物。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["参数：","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"gez: Gez"})," - Gez 实例"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"pkg: Record<string, any>"})," - package.json 内容"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"file: Buffer"})," - 打包后的文件内容"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["返回值：",(0,i.jsx)(e.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"常见用途："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"发布到 npm 仓库（公共或私有）"}),"\n",(0,i.jsx)(e.li,{children:"上传到静态资源服务器"}),"\n",(0,i.jsx)(e.li,{children:"执行版本管理"}),"\n",(0,i.jsx)(e.li,{children:"触发 CI/CD 流程"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"示例："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"onAfter: async (gez, pkg, file) => {\n  // 发布到 npm 私有仓库\n  await publishToRegistry(file, {\n    registry: 'https://registry.example.com'\n  });\n\n  // 上传到静态资源服务器\n  await uploadToServer(file, 'https://assets.example.com/packages');\n\n  // 创建版本标签\n  await createGitTag(pkg.version);\n\n  // 触发部署流程\n  await triggerDeploy(pkg.version);\n}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"使用示例",children:["使用示例",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n  modules: {\n    // 配置需要导出的模块\n    exports: [\n      'root:src/components/button.vue',\n      'root:src/utils/format.ts',\n      'npm:vue',\n      'npm:vue-router'\n    ]\n  },\n  // 打包配置\n  pack: {\n    // 启用打包功能\n    enable: true,\n\n    // 同时输出多个版本\n    outputs: [\n      'dist/versions/latest.tgz',\n      'dist/versions/1.0.0.tgz'\n    ],\n\n    // 自定义 package.json\n    packageJson: async (gez, pkg) => {\n      pkg.version = '1.0.0';\n      return pkg;\n    },\n\n    // 打包前准备\n    onBefore: async (gez, pkg) => {\n      // 添加必要文件\n      await fs.writeFile('dist/README.md', '# Your App\\n\\n模块导出说明...');\n      // 执行类型检查\n      await runTypeCheck();\n    },\n\n    // 打包后处理\n    onAfter: async (gez, pkg, file) => {\n      // 发布到私有 npm 镜像源\n      await publishToRegistry(file, {\n        registry: 'https://npm.your-registry.com/'\n      });\n      // 或部署到静态服务器\n      await uploadToServer(file, 'https://static.example.com/packages');\n    }\n  }\n} satisfies GezOptions;\n"})})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["zh%2Fapi%2Fcore%2Fpack-config.md"]={toc:[{text:"类型定义",id:"类型定义",depth:2},{text:"PackConfig",id:"packconfig-1",depth:3},{text:"enable",id:"enable",depth:4},{text:"outputs",id:"outputs",depth:4},{text:"packageJson",id:"packagejson",depth:4},{text:"onBefore",id:"onbefore",depth:4},{text:"onAfter",id:"onafter",depth:4},{text:"使用示例",id:"使用示例",depth:2}],title:"PackConfig",headingTitle:"PackConfig",frontmatter:{titleSuffix:"Gez 框架打包配置 API 参考",description:"详细介绍 Gez 框架的 PackConfig 配置接口，包括软件包打包规则、输出配置和生命周期钩子，帮助开发者实现标准化的构建流程。",head:[["meta",{property:"keywords",content:"Gez, PackConfig, 软件包打包, 构建配置, 生命周期钩子, 打包配置, Web 应用框架"}]]}}}}]);