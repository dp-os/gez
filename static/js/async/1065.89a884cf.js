"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["1065"],{9915:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(1549),i=s(6603);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",code:"code",h2:"h2",h3:"h3",pre:"pre",div:"div",ol:"ol"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"パスエイリアス",children:["パスエイリアス",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#パスエイリアス",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"パスエイリアス（Path Alias）は、モジュールインポートパスをマッピングするメカニズムで、開発者が完全なモジュールパスの代わりに短くて意味のある識別子を使用できるようにします。Gez では、パスエイリアスメカニズムには以下の利点があります："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"インポートパスの簡略化"}),"：冗長な相対パスの代わりに意味のあるエイリアスを使用し、コードの可読性を向上させます"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"深いネストの回避"}),"：",(0,r.jsx)(n.code,{children:"../../../../"})," のような多階層ディレクトリ参照による保守の困難さを解消します"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"型安全性"}),"：TypeScript の型システムと完全に統合され、コード補完と型チェックを提供します"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"モジュール解決の最適化"}),"：事前定義されたパスマッピングにより、モジュール解決のパフォーマンスを向上させます"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"デフォルトのエイリアスメカニズム",children:["デフォルトのエイリアスメカニズム",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#デフォルトのエイリアスメカニズム",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Gez はサービス名（Service Name）に基づく自動エイリアスメカニズムを採用しており、この設定より優れた設計には以下の特徴があります："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"自動設定"}),"：",(0,r.jsx)(n.code,{children:"package.json"})," の ",(0,r.jsx)(n.code,{children:"name"})," フィールドに基づいてエイリアスを自動生成し、手動設定は不要です"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"統一された規約"}),"：すべてのサービスモジュールが一貫した命名と参照規約に従うことを保証します"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"型サポート"}),"：",(0,r.jsx)(n.code,{children:"npm run build:dts"})," コマンドと連携し、型宣言ファイルを自動生成し、サービス間の型推論を実現します"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"予測可能性"}),"：サービス名からモジュールの参照パスを推測できるため、保守コストを低減します"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"設定説明",children:["設定説明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#設定説明",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"packagejson-の設定",children:["package.json の設定",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson-の設定",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"package.json"})," では、",(0,r.jsx)(n.code,{children:"name"})," フィールドでサービスの名前を定義します。この名前はサービスのデフォルトのエイリアスプレフィックスとして使用されます："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n    "name": "your-app-name"\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"tsconfigjson-の設定",children:["tsconfig.json の設定",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tsconfigjson-の設定",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["TypeScript がエイリアスパスを正しく解決できるようにするため、",(0,r.jsx)(n.code,{children:"tsconfig.json"})," で ",(0,r.jsx)(n.code,{children:"paths"})," マッピングを設定する必要があります："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="tsconfig.json"',children:'{\n    "compilerOptions": {\n        "paths": {\n            "your-app-name/src/*": [\n                "./src/*"\n            ],\n            "your-app-name/*": [\n                "./*"\n            ]\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"使用例",children:["使用例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用例",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"サービス内部モジュールのインポート",children:["サービス内部モジュールのインポート",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#サービス内部モジュールのインポート",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// エイリアスを使用してインポート\nimport { MyComponent } from 'your-app-name/src/components';\n\n// 同等の相対パスでのインポート\nimport { MyComponent } from '../components';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"他のサービスモジュールのインポート",children:["他のサービスモジュールのインポート",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#他のサービスモジュールのインポート",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 他のサービスのコンポーネントをインポート\nimport { SharedComponent } from 'other-service/src/components';\n\n// 他のサービスのユーティリティ関数をインポート\nimport { utils } from 'other-service/src/utils';\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"ベストプラクティス"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"相対パスではなくエイリアスパスを優先して使用します"}),"\n",(0,r.jsx)(n.li,{children:"エイリアスパスの意味と一貫性を保ちます"}),"\n",(0,r.jsx)(n.li,{children:"エイリアスパスで過剰なディレクトリ階層を使用しないようにします"}),"\n"]}),"\n"]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// コンポーネントをインポート\nimport { Button } from 'your-app-name/src/components';\nimport { Layout } from 'your-app-name/src/components/layout';\n\n// ユーティリティ関数をインポート\nimport { formatDate } from 'your-app-name/src/utils';\nimport { request } from 'your-app-name/src/utils/request';\n\n// 型定義をインポート\nimport type { UserInfo } from 'your-app-name/src/types';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"サービス間のインポート",children:["サービス間のインポート",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#サービス間のインポート",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"モジュールリンク（Module Link）を設定すると、他のサービスのモジュールを同じ方法でインポートできます："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// リモートサービスのコンポーネントをインポート\nimport { Header } from 'remote-service/src/components';\n\n// リモートサービスのユーティリティ関数をインポート\nimport { logger } from 'remote-service/src/utils';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"カスタムエイリアス",children:["カスタムエイリアス",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#カスタムエイリアス",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"サードパーティパッケージや特殊なシナリオでは、Gez 設定ファイルでカスタムエイリアスを設定できます："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"export default {\n    async devApp(gez) {\n        return import('@gez/rspack').then((m) =>\n            m.createApp(gez, (buildContext) => {\n                buildContext.config.resolve = {\n                    ...buildContext.config.resolve,\n                    alias: {\n                        ...buildContext.config.resolve?.alias,\n                        // Vue の特定のビルドバージョンを設定\n                        'vue$': 'vue/dist/vue.esm.js',\n                        // よく使うディレクトリに短いエイリアスを設定\n                        '@': './src',\n                        '@components': './src/components'\n                    }\n                }\n            })\n        );\n    }\n} satisfies GezOptions;\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive warning",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"注意事項"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"ビジネスモジュールでは、プロジェクトの一貫性を保つために常にデフォルトのエイリアスメカニズムを使用することを推奨します"}),"\n",(0,r.jsx)(n.li,{children:"カスタムエイリアスは、主にサードパーティパッケージの特殊なニーズや開発体験の最適化に使用します"}),"\n",(0,r.jsx)(n.li,{children:"カスタムエイリアスの過剰使用は、コードの保守性やビルドの最適化に影響を与える可能性があります"}),"\n"]}),"\n"]})]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["ja%2Fguide%2Fessentials%2Falias.md"]={toc:[{text:"デフォルトのエイリアスメカニズム",id:"デフォルトのエイリアスメカニズム",depth:2},{text:"設定説明",id:"設定説明",depth:2},{text:"package.json の設定",id:"packagejson-の設定",depth:3},{text:"tsconfig.json の設定",id:"tsconfigjson-の設定",depth:3},{text:"使用例",id:"使用例",depth:2},{text:"サービス内部モジュールのインポート",id:"サービス内部モジュールのインポート",depth:3},{text:"他のサービスモジュールのインポート",id:"他のサービスモジュールのインポート",depth:3},{text:"サービス間のインポート",id:"サービス間のインポート",depth:3},{text:"カスタムエイリアス",id:"カスタムエイリアス",depth:3}],title:"パスエイリアス",headingTitle:"パスエイリアス",frontmatter:{titleSuffix:"Gez フレームワーク モジュールインポートパスマッピングガイド",description:"Gez フレームワークのパスエイリアスメカニズムについて詳しく説明します。インポートパスの簡略化、深いネストの回避、型安全性、モジュール解決の最適化などの機能を紹介し、開発者がコードの保守性を向上させるのに役立ちます。",head:[["meta",{property:"keywords",content:"Gez, パスエイリアス, Path Alias, TypeScript, モジュールインポート, パスマッピング, コード保守性"}]]}}}}]);