"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["3617"],{3120:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var s=r(1549),d=r(6603);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",h2:"h2",h3:"h3",pre:"pre",code:"code",h4:"h4"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"rendercontext",children:["RenderContext",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rendercontext",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"RenderContext は Gez フレームワークのコアクラスで、サーバーサイドレンダリング（SSR）のライフサイクル全体を管理します。レンダリングコンテキスト、リソース管理、状態同期などの重要なタスクを処理するための完全な API を提供します："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"レンダリング制御"}),"：サーバーサイドレンダリングプロセスを管理し、マルチエントリーレンダリング、条件付きレンダリングなどのシナリオをサポート"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"リソース管理"}),"：JS、CSS などの静的リソースをインテリジェントに収集して注入し、ロードパフォーマンスを最適化"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"状態同期"}),"：サーバーサイドの状態シリアライズを処理し、クライアント側での正しいハイドレーションを保証"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ルーティング制御"}),"：サーバーサイドリダイレクト、ステータスコード設定などの高度な機能をサポート"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"型定義",children:["型定義",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#型定義",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"serverrenderhandle",children:["ServerRenderHandle",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#serverrenderhandle",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"サーバーサイドレンダリング処理関数の型定義。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type ServerRenderHandle = (rc: RenderContext) => Promise<void> | void;\n"})}),"\n",(0,s.jsx)(n.p,{children:"サーバーサイドレンダリング処理関数は、RenderContext インスタンスを引数として受け取り、サーバーサイドレンダリングロジックを処理する非同期または同期関数です。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 1. 非同期処理関数\nexport default async (rc: RenderContext) => {\n  const app = createApp();\n  const html = await renderToString(app);\n  rc.html = html;\n};\n\n// 2. 同期処理関数\nexport const simple = (rc: RenderContext) => {\n  rc.html = '<h1>Hello World</h1>';\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"renderfiles",children:["RenderFiles",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#renderfiles",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"レンダリングプロセス中に収集されたリソースファイルリストの型定義。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface RenderFiles {\n  js: string[];\n  css: string[];\n  modulepreload: string[];\n  resources: string[];\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"js"}),": JavaScript ファイルリスト"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"css"}),": スタイルシートファイルリスト"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"modulepreload"}),": プリロードが必要な ESM モジュールリスト"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"resources"}),": その他のリソースファイルリスト（画像、フォントなど）"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// リソースファイル列表示例\nrc.files = {\n  js: [\n    '/assets/entry-client.js',\n    '/assets/vendor.js'\n  ],\n  css: [\n    '/assets/main.css',\n    '/assets/vendor.css'\n  ],\n  modulepreload: [\n    '/assets/Home.js',\n    '/assets/About.js'\n  ],\n  resources: [\n    '/assets/logo.png',\n    '/assets/font.woff2'\n  ]\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmapmode",children:["ImportmapMode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"importmap の生成モードを定義します。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type ImportmapMode = 'inline' | 'js';\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"inline"}),": importmap の内容を直接 HTML にインライン化します。以下のシナリオに適しています：","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"HTTP リクエスト数を減らす必要がある場合"}),"\n",(0,s.jsx)(n.li,{children:"importmap の内容が小さい場合"}),"\n",(0,s.jsx)(n.li,{children:"初回ロードのパフォーマンスが重要な場合"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"js"}),": importmap の内容を独立した JS ファイルとして生成します。以下のシナリオに適しています：","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"importmap の内容が大きい場合"}),"\n",(0,s.jsx)(n.li,{children:"ブラウザのキャッシュメカニズムを利用する必要がある場合"}),"\n",(0,s.jsx)(n.li,{children:"複数のページで同じ importmap を共有する場合"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"レンダリングコンテキストクラスは、サーバーサイドレンダリング（SSR）プロセス中のリソース管理と HTML 生成を担当します。"}),"\n",(0,s.jsxs)(n.h2,{id:"インスタンスオプション",children:["インスタンスオプション",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#インスタンスオプション",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"レンダリングコンテキストの設定オプションを定義します。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface RenderContextOptions {\n  base?: string\n  entryName?: string\n  params?: Record<string, any>\n  importmapMode?: ImportmapMode\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"base",children:["base",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#base",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"静的リソースのベースパス。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"すべての静的リソース（JS、CSS、画像など）はこのパスを基準にロードされます"}),"\n",(0,s.jsx)(n.li,{children:"ランタイムでの動的設定をサポートし、再ビルドは不要です"}),"\n",(0,s.jsx)(n.li,{children:"多言語サイト、マイクロフロントエンドアプリケーションなどのシナリオでよく使用されます"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"entryname",children:["entryName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryname",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"'default'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"サーバーサイドレンダリングエントリー関数名。サーバーサイドレンダリング時に使用するエントリー関数を指定するために使用され、1つのモジュールが複数のレンダリング関数をエクスポートする場合に使用されます。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"export const mobile = async (rc: RenderContext) => {\n  // モバイル端末向けレンダリングロジック\n};\n\nexport const desktop = async (rc: RenderContext) => {\n  // デスクトップ向けレンダリングロジック\n};\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"params",children:["params",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#params",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"Record<string, any>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"レンダリングパラメータ。レンダリング関数に任意の型のパラメータを渡すことができ、リクエスト情報（URL、クエリパラメータなど）を渡すためによく使用されます。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const rc = await gez.render({\n  params: {\n    url: req.url,\n    lang: 'zh-CN',\n    theme: 'dark'\n  }\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"importmapmode-1",children:["importmapMode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"'inline' | 'js'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"'inline'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"インポートマップ（Import Map）の生成モード："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"inline"}),": importmap の内容を直接 HTML にインライン化します"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"js"}),": importmap の内容を独立した JS ファイルとして生成します"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"インスタンスプロパティ",children:["インスタンスプロパティ",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#インスタンスプロパティ",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"gez",children:["gez",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gez",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"Gez"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"読み取り専用"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Gez インスタンスの参照。フレームワークのコア機能と設定情報にアクセスするために使用されます。"}),"\n",(0,s.jsxs)(n.h3,{id:"redirect",children:["redirect",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redirect",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"string | null"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"リダイレクト先のアドレス。設定すると、サーバーはこの値に基づいて HTTP リダイレクトを実行できます。ログイン認証、権限制御などのシナリオでよく使用されます。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// ログイン認証の例\nexport default async (rc: RenderContext) => {\n  if (!isLoggedIn()) {\n    rc.redirect = '/login';\n    rc.status = 302;\n    return;\n  }\n  // ページのレンダリングを続行...\n};\n\n// 権限制御の例\nexport default async (rc: RenderContext) => {\n  if (!hasPermission()) {\n    rc.redirect = '/403';\n    rc.status = 403;\n    return;\n  }\n  // ページのレンダリングを続行...\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"status",children:["status",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#status",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"number | null"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"HTTP レスポンスステータスコード。任意の有効な HTTP ステータスコードを設定でき、エラー処理、リダイレクトなどのシナリオでよく使用されます。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 404 エラー処理の例\nexport default async (rc: RenderContext) => {\n  const page = await findPage(rc.params.url);\n  if (!page) {\n    rc.status = 404;\n    // 404 ページをレンダリング...\n    return;\n  }\n  // ページのレンダリングを続行...\n};\n\n// 一時リダイレクトの例\nexport default async (rc: RenderContext) => {\n  if (needMaintenance()) {\n    rc.redirect = '/maintenance';\n    rc.status = 307; // 一時リダイレクト、リクエストメソッドを保持\n    return;\n  }\n  // ページのレンダリングを続行...\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"html",children:["html",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"HTML コンテンツ。最終的に生成される HTML コンテンツを設定および取得するために使用され、設定時にベースパスのプレースホルダーを自動的に処理します。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 基本的な使用法\nexport default async (rc: RenderContext) => {\n  // HTML コンテンツを設定\n  rc.html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        ${rc.preload()}\n        ${rc.css()}\n      </head>\n      <body>\n        <div id=\"app\">Hello World</div>\n        ${rc.importmap()}\n        ${rc.moduleEntry()}\n        ${rc.modulePreload()}\n      </body>\n    </html>\n  `;\n};\n\n// 動的ベースパス\nconst rc = await gez.render({\n  base: '/app',  // ベースパスを設定\n  params: { url: req.url }\n});\n\n// HTML 内のプレースホルダーは自動的に置換されます：\n// [[[___GEZ_DYNAMIC_BASE___]]]/your-app-name/css/style.css\n// 置換後：\n// /app/your-app-name/css/style.css\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"base-1",children:["base",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#base-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"読み取り専用"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"静的リソースのベースパス。すべての静的リソース（JS、CSS、画像など）はこのパスを基準にロードされ、ランタイムでの動的設定をサポートします。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 基本的な使用法\nconst rc = await gez.render({\n  base: '/gez',  // ベースパスを設定\n  params: { url: req.url }\n});\n\n// 多言語サイトの例\nconst rc = await gez.render({\n  base: '/cn',  // 中国語サイト\n  params: { lang: 'zh-CN' }\n});\n\n// マイクロフロントエンドアプリケーションの例\nconst rc = await gez.render({\n  base: '/app1',  // サブアプリケーション1\n  params: { appId: 1 }\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"entryname-1",children:["entryName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryname-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"読み取り専用"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"'default'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"サーバーサイドレンダリングエントリー関数名。entry.server.ts から使用するレンダリング関数を選択するために使用されます。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// デフォルトエントリー関数\nexport default async (rc: RenderContext) => {\n  // デフォルトのレンダリングロジック\n};\n\n// 複数のエントリー関数\nexport const mobile = async (rc: RenderContext) => {\n  // モバイル端末向けレンダリングロジック\n};\n\nexport const desktop = async (rc: RenderContext) => {\n  // デスクトップ向けレンダリングロジック\n};\n\n// デバイスタイプに基づいてエントリー関数を選択\nconst rc = await gez.render({\n  entryName: isMobile ? 'mobile' : 'desktop',\n  params: { url: req.url }\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"params-1",children:["params",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#params-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"Record<string, any>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"読み取り専用"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"レンダリングパラメータ。サーバーサイドレンダリングプロセス中にパラメータを渡してアクセスするために使用され、リクエスト情報、ページ設定などを渡すためによく使用されます。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 基本的な使用法 - URL と言語設定を渡す\nconst rc = await gez.render({\n  params: {\n    url: req.url,\n    lang: 'zh-CN'\n  }\n});\n\n// ページ設定 - テーマとレイアウトを設定\nconst rc = await gez.render({\n  params: {\n    theme: 'dark',\n    layout: 'sidebar'\n  }\n});\n\n// 環境設定 - API アドレスを注入\nconst rc = await gez.render({\n  params: {\n    apiBaseUrl: process.env.API_BASE_URL,\n    version: '1.0.0'\n  }\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmetaset",children:["importMetaSet",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaset",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"Set<ImportMeta>"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"モジュール依存関係収集セット。コンポーネントのレンダリングプロセス中にモジュール依存関係を自動的に追跡して記録し、現在のページレンダリングで実際に使用されたリソースのみを収集します。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 基本的な使用法\nconst renderToString = (app: any, context: { importMetaSet: Set<ImportMeta> }) => {\n  // レンダリングプロセス中にモジュール依存関係を自動的に収集\n  // フレームワークはコンポーネントレンダリング時に自動的に context.importMetaSet.add(import.meta) を呼び出します\n  // 開発者は依存関係収集を手動で処理する必要はありません\n  return '<div id=\"app\">Hello World</div>';\n};\n\n// 使用例\nconst app = createApp();\nconst html = await renderToString(app, {\n  importMetaSet: rc.importMetaSet\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"files",children:["files",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#files",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"RenderFiles"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"リソースファイルリスト："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"js: JavaScript ファイルリスト"}),"\n",(0,s.jsx)(n.li,{children:"css: スタイルシートファイルリスト"}),"\n",(0,s.jsx)(n.li,{children:"modulepreload: プリロードが必要な ESM モジュールリスト"}),"\n",(0,s.jsx)(n.li,{children:"resources: その他のリソースファイルリスト（画像、フォントなど）"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// リソース収集\nawait rc.commit();\n\n// リソース注入\nrc.html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    \x3c!-- リソースをプリロード --\x3e\n    ${rc.preload()}\n    \x3c!-- スタイルシートを注入 --\x3e\n    ${rc.css()}\n  </head>\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n  </body>\n  </html>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmapmode-2",children:["importmapMode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode-2",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"型"}),": ",(0,s.jsx)(n.code,{children:"'inline' | 'js'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"デフォルト値"}),": ",(0,s.jsx)(n.code,{children:"'inline'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"インポートマップの生成モード："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"inline"}),": importmap の内容を直接 HTML にインライン化します"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"js"}),": importmap の内容を独立した JS ファイルとして生成します"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"インスタンスメソッド",children:["インスタンスメソッド",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#インスタンスメソッド",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"serialize",children:["serialize()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#serialize",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"パラメータ"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"input: any"})," - シリアライズするデータ"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"options?: serialize.SerializeJSOptions"})," - シリアライズオプション"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"戻り値"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"JavaScript オブジェクトを文字列にシリアライズします。サーバーサイドレンダリングプロセス中に状態データをシリアライズし、データを HTML に安全に埋め込むために使用されます。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const state = {\n  user: { id: 1, name: 'Alice' },\n  timestamp: new Date()\n};\n\nrc.html = `\n  <script>\n    window.__INITIAL_STATE__ = ${rc.serialize(state)};\n  <\/script>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"state",children:["state()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#state",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"パラメータ"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"varName: string"})," - 変数名"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data: Record<string, any>"})," - 状態データ"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"戻り値"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"状態データをシリアライズして HTML に注入します。安全なシリアライズ方法を使用してデータを処理し、複雑なデータ構造をサポートします。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const userInfo = {\n  id: 1,\n  name: 'John',\n  roles: ['admin']\n};\n\nrc.html = `\n  <head>\n    ${rc.state('__USER__', userInfo)}\n  </head>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"commit",children:["commit()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commit",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"戻り値"}),": ",(0,s.jsx)(n.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"依存関係収集をコミットしてリソースリストを更新します。importMetaSet から使用されたすべてのモジュールを収集し、manifest ファイルに基づいて各モジュールの具体的なリソースを解析します。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// レンダリングして依存関係をコミット\nconst html = await renderToString(app, {\n  importMetaSet: rc.importMetaSet\n});\n\n// 依存関係収集をコミット\nawait rc.commit();\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"preload",children:["preload()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#preload",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"戻り値"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"リソースプリロードタグを生成します。CSS と JavaScript リソースをプリロードするために使用され、優先度設定をサポートし、ベースパスを自動的に処理します。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    ${rc.preload()}\n    ${rc.css()}  \x3c!-- スタイルシートを注入 --\x3e\n  </head>\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n  </body>\n  </html>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"css",children:["css()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"戻り値"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"CSS スタイルシートタグを生成します。収集された CSS"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["ja%2Fapi%2Fcore%2Frender-context.md"]={toc:[{text:"型定義",id:"型定義",depth:2},{text:"ServerRenderHandle",id:"serverrenderhandle",depth:3},{text:"RenderFiles",id:"renderfiles",depth:3},{text:"ImportmapMode",id:"importmapmode",depth:3},{text:"インスタンスオプション",id:"インスタンスオプション",depth:2},{text:"base",id:"base",depth:4},{text:"entryName",id:"entryname",depth:4},{text:"params",id:"params",depth:4},{text:"importmapMode",id:"importmapmode-1",depth:4},{text:"インスタンスプロパティ",id:"インスタンスプロパティ",depth:2},{text:"gez",id:"gez",depth:3},{text:"redirect",id:"redirect",depth:3},{text:"status",id:"status",depth:3},{text:"html",id:"html",depth:3},{text:"base",id:"base-1",depth:3},{text:"entryName",id:"entryname-1",depth:3},{text:"params",id:"params-1",depth:3},{text:"importMetaSet",id:"importmetaset",depth:3},{text:"files",id:"files",depth:3},{text:"importmapMode",id:"importmapmode-2",depth:3},{text:"インスタンスメソッド",id:"インスタンスメソッド",depth:2},{text:"serialize()",id:"serialize",depth:3},{text:"state()",id:"state",depth:3},{text:"commit()",id:"commit",depth:3},{text:"preload()",id:"preload",depth:3},{text:"css()",id:"css",depth:3}],title:"RenderContext",headingTitle:"RenderContext",frontmatter:{titleSuffix:"Gez フレームワーク レンダリングコンテキスト API リファレンス",description:"Gez フレームワークの RenderContext コアクラスの詳細説明。レンダリング制御、リソース管理、状態同期、ルーティング制御などの機能を提供し、開発者が効率的なサーバーサイドレンダリングを実現するのを支援します。",head:[["meta",{property:"keywords",content:"Gez, RenderContext, SSR, サーバーサイドレンダリング, レンダリングコンテキスト, 状態同期, リソース管理, Web アプリケーションフレームワーク"}]]}}}}]);