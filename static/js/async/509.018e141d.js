"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["509"],{6670:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var t=r(1549),s=r(6603);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"клиентский-рендеринг",children:["Клиентский рендеринг",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#клиентский-рендеринг",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["Клиентский рендеринг (Client-Side Rendering, CSR) — это технология выполнения рендеринга страниц на стороне браузера. В Gez, если ваше приложение не может быть развернуто на сервере Node.js, вы можете сгенерировать статический файл ",(0,t.jsx)(n.code,{children:"index.html"})," на этапе сборки для реализации чистого клиентского рендеринга."]}),"\n",(0,t.jsxs)(n.h2,{id:"сценарии-использования",children:["Сценарии использования",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#сценарии-использования",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Клиентский рендеринг рекомендуется в следующих случаях:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Статические хостинги"}),": такие как GitHub Pages, CDN и другие сервисы хостинга, которые не поддерживают серверный рендеринг."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Простые приложения"}),": небольшие приложения, где не критичны скорость загрузки первой страницы и SEO."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Среда разработки"}),": для быстрого предварительного просмотра и отладки приложения на этапе разработки."]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"настройка",children:["Настройка",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#настройка",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"конфигурация-html-шаблона",children:["Конфигурация HTML-шаблона",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#конфигурация-html-шаблона",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"В режиме клиентского рендеринга необходимо настроить универсальный HTML-шаблон. Этот шаблон будет служить контейнером для приложения, содержащим необходимые ссылки на ресурсы и точку монтирования."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"import type { RenderContext } from '@gez/core';\n\nexport default async (rc: RenderContext) => {\n    // Фиксация сбора зависимостей\n    await rc.commit();\n    \n    // Настройка HTML-шаблона\n    rc.html = `\n<!DOCTYPE html>\n<html>\n<head>\n    ${rc.preload()}           // Предзагрузка ресурсов\n    <title>Gez</title>\n    ${rc.css()}               // Внедрение стилей\n</head>\n<body>\n    <div id=\"app\"></div>\n    ${rc.importmap()}         // Карта импорта\n    ${rc.moduleEntry()}       // Входной модуль\n    ${rc.modulePreload()}     // Предзагрузка модулей\n</body>\n</html>\n`;\n};\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"генерация-статического-html",children:["Генерация статического HTML",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#генерация-статического-html",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["Для использования клиентского рендеринга в производственной среде необходимо сгенерировать статический HTML-файл на этапе сборки. Gez предоставляет функцию ",(0,t.jsx)(n.code,{children:"postBuild"})," для реализации этой функциональности:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n    async postBuild(gez) {\n        // Генерация статического HTML-файла\n        const rc = await gez.render();\n        // Запись HTML-файла\n        gez.writeSync(\n            gez.resolvePath('dist/client', 'index.html'),\n            rc.html\n        );\n    }\n} satisfies GezOptions;\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["ru%2Fguide%2Fessentials%2Fcsr.md"]={toc:[{text:"Сценарии использования",id:"сценарии-использования",depth:2},{text:"Настройка",id:"настройка",depth:2},{text:"Конфигурация HTML-шаблона",id:"конфигурация-html-шаблона",depth:3},{text:"Генерация статического HTML",id:"генерация-статического-html",depth:3}],title:"Клиентский рендеринг",headingTitle:"Клиентский рендеринг",frontmatter:{titleSuffix:"Руководство по реализации клиентского рендеринга в Gez",description:"Подробное описание механизма клиентского рендеринга в Gez, включая статическую сборку, стратегии развертывания и лучшие практики, помогающие разработчикам реализовать эффективный фронтенд-рендеринг в бессерверной среде.",head:[["meta",{property:"keywords",content:"Gez, клиентский рендеринг, CSR, статическая сборка, фронтенд-рендеринг, бессерверное развертывание, оптимизация производительности"}]]}}}}]);