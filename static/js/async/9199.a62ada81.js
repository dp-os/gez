"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["9199"],{359:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var t=r(1549),s=r(6603);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"クライアントサイドレンダリング",children:["クライアントサイドレンダリング",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#クライアントサイドレンダリング",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["クライアントサイドレンダリング（Client-Side Rendering, CSR）は、ブラウザ側でページのレンダリングを実行する技術アプローチです。Gez では、Node.js サーバーインスタンスをデプロイできない場合、ビルド段階で静的な ",(0,t.jsx)(n.code,{children:"index.html"})," ファイルを生成し、純粋なクライアントサイドレンダリングを実現できます。"]}),"\n",(0,t.jsxs)(n.h2,{id:"使用シナリオ",children:["使用シナリオ",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用シナリオ",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"以下のシナリオではクライアントサイドレンダリングの使用が推奨されます："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"静的ホスティング環境"}),"：GitHub Pages、CDN など、サーバーサイドレンダリングをサポートしていないホスティングサービス"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"シンプルなアプリケーション"}),"：初期表示速度や SEO の要件が高くない小規模なアプリケーション"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"開発環境"}),"：開発段階でのアプリケーションの迅速なプレビューとデバッグ"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"設定説明",children:["設定説明",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#設定説明",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"html-テンプレート設定",children:["HTML テンプレート設定",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html-テンプレート設定",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"クライアントサイドレンダリングモードでは、汎用的な HTML テンプレートを設定する必要があります。このテンプレートはアプリケーションのコンテナとして機能し、必要なリソース参照とマウントポイントを含みます。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"import type { RenderContext } from '@gez/core';\n\nexport default async (rc: RenderContext) => {\n    // 依存関係の収集をコミット\n    await rc.commit();\n    \n    // HTML テンプレートを設定\n    rc.html = `\n<!DOCTYPE html>\n<html>\n<head>\n    ${rc.preload()}           // リソースのプリロード\n    <title>Gez</title>\n    ${rc.css()}               // スタイルの注入\n</head>\n<body>\n    <div id=\"app\"></div>\n    ${rc.importmap()}         // インポートマップ\n    ${rc.moduleEntry()}       // エントリーモジュール\n    ${rc.modulePreload()}     // モジュールのプリロード\n</body>\n</html>\n`;\n};\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"静的-html-生成",children:["静的 HTML 生成",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静的-html-生成",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["本番環境でクライアントサイドレンダリングを使用するには、ビルド段階で静的な HTML ファイルを生成する必要があります。Gez は ",(0,t.jsx)(n.code,{children:"postBuild"})," フック関数を提供しており、この機能を実現できます："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n    async postBuild(gez) {\n        // 静的な HTML ファイルを生成\n        const rc = await gez.render();\n        // HTML ファイルを書き込み\n        gez.writeSync(\n            gez.resolvePath('dist/client', 'index.html'),\n            rc.html\n        );\n    }\n} satisfies GezOptions;\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["ja%2Fguide%2Fessentials%2Fcsr.md"]={toc:[{text:"使用シナリオ",id:"使用シナリオ",depth:2},{text:"設定説明",id:"設定説明",depth:2},{text:"HTML テンプレート設定",id:"html-テンプレート設定",depth:3},{text:"静的 HTML 生成",id:"静的-html-生成",depth:3}],title:"クライアントサイドレンダリング",headingTitle:"クライアントサイドレンダリング",frontmatter:{titleSuffix:"Gez フレームワークのクライアントサイドレンダリング実装ガイド",description:"Gez フレームワークのクライアントサイドレンダリングメカニズムについて詳しく説明します。静的ビルド、デプロイ戦略、ベストプラクティスを含め、サーバーレス環境で効率的なフロントエンドレンダリングを実現するための開発者向けガイドです。",head:[["meta",{property:"keywords",content:"Gez, クライアントサイドレンダリング, CSR, 静的ビルド, フロントエンドレンダリング, サーバーレスデプロイ, パフォーマンス最適化"}]]}}}}]);