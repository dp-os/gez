"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["3636"],{5075:function(e,n,t){t.r(n),t.d(n,{default:()=>o});var r=t(1549),i=t(6603);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3",ol:"ol",li:"li"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"html",children:["HTML",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"This tutorial will guide you through building a Gez-based HTML SSR application from scratch. We'll demonstrate how to create a server-side rendered application using the Gez framework through a complete example."}),"\n",(0,r.jsxs)(n.h2,{id:"project-structure",children:["Project Structure",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#project-structure",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"First, let's understand the basic project structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:".\n├── package.json         # Project configuration file, defines dependencies and script commands\n├── tsconfig.json        # TypeScript configuration file, sets compilation options\n└── src                  # Source code directory\n    ├── app.ts           # Main application component, defines page structure and interaction logic\n    ├── create-app.ts    # Application instance factory, responsible for initializing the application\n    ├── entry.client.ts  # Client entry file, handles browser-side rendering\n    ├── entry.node.ts    # Node.js server entry file, responsible for development environment configuration and server startup\n    └── entry.server.ts  # Server entry file, handles SSR rendering logic\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"project-configuration",children:["Project Configuration",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#project-configuration",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"packagejson",children:["package.json",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create the ",(0,r.jsx)(n.code,{children:"package.json"})," file to configure project dependencies and scripts:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n  "name": "ssr-demo-html",\n  "version": "1.0.0",\n  "type": "module",\n  "private": true,\n  "scripts": {\n    "dev": "gez dev",\n    "build": "npm run build:dts && npm run build:ssr",\n    "build:ssr": "gez build",\n    "preview": "gez preview",\n    "start": "NODE_ENV=production node dist/index.js",\n    "build:dts": "tsc --declaration --emitDeclarationOnly --outDir dist/src"\n  },\n  "dependencies": {\n    "@gez/core": "*"\n  },\n  "devDependencies": {\n    "@gez/rspack": "*",\n    "@types/node": "22.8.6",\n    "typescript": "^5.7.3"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["After creating the ",(0,r.jsx)(n.code,{children:"package.json"})," file, install the project dependencies using one of the following commands:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm install\n# or\nyarn install\n# or\nnpm install\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will install all necessary dependencies, including TypeScript and SSR-related packages."}),"\n",(0,r.jsxs)(n.h3,{id:"tsconfigjson",children:["tsconfig.json",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tsconfigjson",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create the ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," file to configure TypeScript compilation options:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="tsconfig.json"',children:'{\n    "compilerOptions": {\n        "module": "ESNext",\n        "moduleResolution": "node",\n        "isolatedModules": true,\n        "resolveJsonModule": true,\n        \n        "target": "ESNext",\n        "lib": ["ESNext", "DOM"],\n        \n        "strict": true,\n        "skipLibCheck": true,\n        "types": ["@types/node"],\n        \n        "experimentalDecorators": true,\n        "allowSyntheticDefaultImports": true,\n        \n        "baseUrl": ".",\n        "paths": {\n            "ssr-demo-html/src/*": ["./src/*"],\n            "ssr-demo-html/*": ["./*"]\n        }\n    },\n    "include": ["src"],\n    "exclude": ["dist", "node_modules"]\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"source-code-structure",children:["Source Code Structure",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#source-code-structure",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"appts",children:["app.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#appts",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create the main application component ",(0,r.jsx)(n.code,{children:"src/app.ts"})," to implement page structure and interaction logic:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/app.ts"',children:"/**\n * @file Example Component\n * @description Demonstrates a page title with auto-updating time, showcasing basic Gez framework functionality\n */\n\nexport default class App {\n    /**\n     * Current time in ISO format\n     * @type {string}\n     */\n    public time = '';\n\n    /**\n     * Create application instance\n     * @param {SsrContext} [ssrContext] - Server-side context containing import metadata collection\n     */\n    public constructor(public ssrContext?: SsrContext) {\n        // No additional initialization needed in constructor\n    }\n\n    /**\n     * Render page content\n     * @returns {string} Returns page HTML structure\n     */\n    public render(): string {\n        // Ensure correct collection of import metadata in server-side environment\n        if (this.ssrContext) {\n            this.ssrContext.importMetaSet.add(import.meta);\n        }\n\n        return `\n        <div id=\"app\">\n            <h1><a href=\"https://www.jsesm.com/guide/frameworks/html.html\" target=\"_blank\">Gez Quick Start</a></h1>\n            <time datetime=\"${this.time}\">${this.time}</time>\n        </div>\n        `;\n    }\n\n    /**\n     * Client-side initialization\n     * @throws {Error} Throws error if time display element is not found\n     */\n    public onClient(): void {\n        // Get time display element\n        const time = document.querySelector('#app time');\n        if (!time) {\n            throw new Error('Time display element not found');\n        }\n\n        // Set interval to update time every second\n        setInterval(() => {\n            this.time = new Date().toISOString();\n            time.setAttribute('datetime', this.time);\n            time.textContent = this.time;\n        }, 1000);\n    }\n\n    /**\n     * Server-side initialization\n     */\n    public onServer(): void {\n        this.time = new Date().toISOString();\n    }\n}\n\n/**\n * Server-side context interface\n * @interface\n */\nexport interface SsrContext {\n    /**\n     * Import metadata collection\n     * @type {Set<ImportMeta>}\n     */\n    importMetaSet: Set<ImportMeta>;\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"create-appts",children:["create-app.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#create-appts",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create the ",(0,r.jsx)(n.code,{children:"src/create-app.ts"})," file to handle application instance creation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/create-app.ts"',children:"/**\n * @file Application Instance Creation\n * @description Responsible for creating and configuring application instances\n */\n\nimport App from './app';\n\nexport function createApp() {\n    const app = new App();\n    return {\n        app\n    };\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"entryclientts",children:["entry.client.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryclientts",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create the client entry file ",(0,r.jsx)(n.code,{children:"src/entry.client.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.client.ts"',children:"/**\n * @file Client Entry File\n * @description Handles client-side interaction logic and dynamic updates\n */\n\nimport { createApp } from './create-app';\n\n// Create application instance and initialize\nconst { app } = createApp();\napp.onClient();\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"entrynodets",children:["entry.node.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entrynodets",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create the ",(0,r.jsx)(n.code,{children:"entry.node.ts"})," file to configure the development environment and server startup:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"/**\n * @file Node.js Server Entry File\n * @description Responsible for development environment configuration and server startup, providing SSR runtime environment\n */\n\nimport http from 'node:http';\nimport type { GezOptions } from '@gez/core';\n\nexport default {\n    /**\n     * Configure development environment application creator\n     * @description Creates and configures Rspack application instance for development environment builds and hot updates\n     * @param gez Gez framework instance, providing core functionality and configuration interfaces\n     * @returns Returns configured Rspack application instance with HMR and live preview support\n     */\n    async devApp(gez) {\n        return import('@gez/rspack').then((m) =>\n            m.createRspackHtmlApp(gez, {\n                config(context) {\n                    // Customize Rspack compilation configuration here\n                }\n            })\n        );\n    },\n\n    /**\n     * Configure and start HTTP server\n     * @description Creates HTTP server instance, integrates Gez middleware, and handles SSR requests\n     * @param gez Gez framework instance, providing middleware and rendering functionality\n     */\n    async server(gez) {\n        const server = http.createServer((req, res) => {\n            // Use Gez middleware to handle requests\n            gez.middleware(req, res, async () => {\n                // Perform server-side rendering\n                const rc = await gez.render({\n                    params: { url: req.url }\n                });\n                res.end(rc.html);\n            });\n        });\n\n        server.listen(3000, () => {\n            console.log('Server started: http://localhost:3000');\n        });\n    }\n} satisfies GezOptions;\n"})}),"\n",(0,r.jsx)(n.p,{children:"This file serves as the entry point for development environment configuration and server startup, containing two core functions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"devApp"})," function: Responsible for creating and configuring the Rspack application instance for the development environment, supporting hot updates and live preview."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"server"})," function: Responsible for creating and configuring the HTTP server, integrating Gez middleware to handle SSR requests."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"entryserverts",children:["entry.server.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryserverts",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create the server-side rendering entry file ",(0,r.jsx)(n.code,{children:"src/entry.server.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"/**\n * @file Server-Side Rendering Entry File\n * @description Handles server-side rendering process, HTML generation, and resource injection\n */\n\nimport type { RenderContext } from '@gez/core';\nimport type App from './app';\nimport type { SsrContext } from './app';\nimport { createApp } from './create-app';\n\n// Encapsulate page content generation logic\nconst renderToString = (app: App, ssrContext: SsrContext): string => {\n    // Inject server-side rendering context into application instance\n    app.ssrContext = ssrContext;\n    // Initialize server-side\n    app.onServer();\n\n    // Generate page content\n    return app.render();\n};\n\nexport default async (rc: RenderContext) => {\n    // Create application instance, returning an object containing the app instance\n    const { app } = createApp();\n    // Use renderToString to generate page content\n    const html = renderToString(app, {\n        importMetaSet: rc.importMetaSet\n    });\n\n    // Commit dependency collection to ensure all necessary resources are loaded\n    await rc.commit();\n\n    // Generate complete HTML structure\n    rc.html = `<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    ${rc.preload()}\n    <title>Gez Quick Start</title>\n    ${rc.css()}\n</head>\n<body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n</body>\n</html>\n`;\n};\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"running-the-project",children:["Running the Project",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#running-the-project",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"After completing the above file configurations, you can run the project using the following commands:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Development mode:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Build the project:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Run in production environment:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, you've successfully created a Gez-based HTML SSR application! Visit ",(0,r.jsx)(n.a,{href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000"})," to see the result."]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}let o=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["en%2Fguide%2Fframeworks%2Fhtml.md"]={toc:[{text:"Project Structure",id:"project-structure",depth:2},{text:"Project Configuration",id:"project-configuration",depth:2},{text:"package.json",id:"packagejson",depth:3},{text:"tsconfig.json",id:"tsconfigjson",depth:3},{text:"Source Code Structure",id:"source-code-structure",depth:2},{text:"app.ts",id:"appts",depth:3},{text:"create-app.ts",id:"create-appts",depth:3},{text:"entry.client.ts",id:"entryclientts",depth:3},{text:"entry.node.ts",id:"entrynodets",depth:3},{text:"entry.server.ts",id:"entryserverts",depth:3},{text:"Running the Project",id:"running-the-project",depth:2}],title:"HTML",headingTitle:"HTML",frontmatter:{titleSuffix:"Gez Framework HTML SSR Application Example",description:"Build a Gez-based HTML SSR application from scratch. This example demonstrates the basic usage of the framework, including project initialization, HTML configuration, and entry file setup.",head:[["meta",{property:"keywords",content:"Gez, HTML, SSR Application, TypeScript Configuration, Project Initialization, Server-Side Rendering, Client-Side Interaction"}]]}}}}]);