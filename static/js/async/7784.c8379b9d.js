"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["7784"],{5183:function(n,e,r){r.r(e),r.d(e,{default:()=>c});var s=r(1549),d=r(6603);function i(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",h2:"h2",h3:"h3",pre:"pre",code:"code",h4:"h4"},(0,d.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"rendercontext",children:["RenderContext",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#rendercontext",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"RenderContext는 Gez 프레임워크의 핵심 클래스로, 서버 사이드 렌더링(SSR)의 전체 생명주기를 관리합니다. 이 클래스는 렌더링 컨텍스트, 리소스 관리, 상태 동기화 등의 주요 작업을 처리하기 위한 완전한 API를 제공합니다:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"렌더링 제어"}),": 서버 사이드 렌더링 프로세스를 관리하며, 다중 엔트리 렌더링, 조건부 렌더링 등의 시나리오를 지원합니다."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"리소스 관리"}),": JS, CSS 등의 정적 리소스를 지능적으로 수집하고 주입하여 로딩 성능을 최적화합니다."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"상태 동기화"}),": 서버 상태를 직렬화하여 클라이언트에서 올바르게 활성화(hydration)되도록 합니다."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"라우팅 제어"}),": 서버 리디렉션, 상태 코드 설정 등의 고급 기능을 지원합니다."]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"타입-정의",children:["타입 정의",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#타입-정의",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"serverrenderhandle",children:["ServerRenderHandle",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#serverrenderhandle",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"서버 사이드 렌더링 처리 함수의 타입 정의입니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"type ServerRenderHandle = (rc: RenderContext) => Promise<void> | void;\n"})}),"\n",(0,s.jsx)(e.p,{children:"서버 사이드 렌더링 처리 함수는 RenderContext 인스턴스를 매개변수로 받는 비동기 또는 동기 함수로, 서버 사이드 렌더링 로직을 처리하는 데 사용됩니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 1. 비동기 처리 함수\nexport default async (rc: RenderContext) => {\n  const app = createApp();\n  const html = await renderToString(app);\n  rc.html = html;\n};\n\n// 2. 동기 처리 함수\nexport const simple = (rc: RenderContext) => {\n  rc.html = '<h1>Hello World</h1>';\n};\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"renderfiles",children:["RenderFiles",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#renderfiles",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"렌더링 과정에서 수집된 리소스 파일 목록의 타입 정의입니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface RenderFiles {\n  js: string[];\n  css: string[];\n  modulepreload: string[];\n  resources: string[];\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"js"}),": JavaScript 파일 목록"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"css"}),": 스타일시트 파일 목록"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"modulepreload"}),": 미리 로드해야 할 ESM 모듈 목록"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"resources"}),": 기타 리소스 파일 목록 (이미지, 폰트 등)"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// 리소스 파일 목록 예시\nrc.files = {\n  js: [\n    '/assets/entry-client.js',\n    '/assets/vendor.js'\n  ],\n  css: [\n    '/assets/main.css',\n    '/assets/vendor.css'\n  ],\n  modulepreload: [\n    '/assets/Home.js',\n    '/assets/About.js'\n  ],\n  resources: [\n    '/assets/logo.png',\n    '/assets/font.woff2'\n  ]\n};\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"importmapmode",children:["ImportmapMode",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"importmap의 생성 모드를 정의합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"type ImportmapMode = 'inline' | 'js';\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"inline"}),": importmap 내용을 HTML에 직접 인라인으로 삽입합니다. 다음 시나리오에 적합합니다:","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"HTTP 요청 수를 줄여야 할 때"}),"\n",(0,s.jsx)(e.li,{children:"importmap 내용이 작을 때"}),"\n",(0,s.jsx)(e.li,{children:"초기 로딩 성능이 중요할 때"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"js"}),": importmap 내용을 별도의 JS 파일로 생성합니다. 다음 시나리오에 적합합니다:","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"importmap 내용이 클 때"}),"\n",(0,s.jsx)(e.li,{children:"브라우저 캐시 메커니즘을 활용해야 할 때"}),"\n",(0,s.jsx)(e.li,{children:"여러 페이지가 동일한 importmap을 공유할 때"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"렌더링 컨텍스트 클래스는 서버 사이드 렌더링(SSR) 과정에서 리소스 관리와 HTML 생성을 담당합니다."}),"\n",(0,s.jsxs)(e.h2,{id:"인스턴스-옵션",children:["인스턴스 옵션",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#인스턴스-옵션",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"렌더링 컨텍스트의 구성 옵션을 정의합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface RenderContextOptions {\n  base?: string\n  entryName?: string\n  params?: Record<string, any>\n  importmapMode?: ImportmapMode\n}\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"base",children:["base",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#base",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"정적 리소스의 기본 경로입니다."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"모든 정적 리소스(JS, CSS, 이미지 등)는 이 경로를 기반으로 로드됩니다."}),"\n",(0,s.jsx)(e.li,{children:"런타임에 동적으로 설정할 수 있으며, 재빌드가 필요하지 않습니다."}),"\n",(0,s.jsx)(e.li,{children:"다국어 사이트, 마이크로 프론트엔드 애플리케이션 등에 자주 사용됩니다."}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"entryname",children:["entryName",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#entryname",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"'default'"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"서버 사이드 렌더링 엔트리 함수 이름입니다. 하나의 모듈이 여러 렌더링 함수를 내보낼 때 사용할 엔트리 함수를 지정합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"export const mobile = async (rc: RenderContext) => {\n  // 모바일 렌더링 로직\n};\n\nexport const desktop = async (rc: RenderContext) => {\n  // 데스크톱 렌더링 로직\n};\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"params",children:["params",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#params",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"Record<string, any>"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"{}"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"렌더링 매개변수입니다. 렌더링 함수에 임의의 타입의 매개변수를 전달할 수 있으며, 주로 요청 정보(URL, 쿼리 매개변수 등)를 전달하는 데 사용됩니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"const rc = await gez.render({\n  params: {\n    url: req.url,\n    lang: 'zh-CN',\n    theme: 'dark'\n  }\n});\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"importmapmode-1",children:["importmapMode",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode-1",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"'inline' | 'js'"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"'inline'"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"임포트 맵(Import Map)의 생성 모드입니다:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"inline"}),": importmap 내용을 HTML에 직접 인라인으로 삽입합니다."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"js"}),": importmap 내용을 별도의 JS 파일로 생성합니다."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"인스턴스-속성",children:["인스턴스 속성",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#인스턴스-속성",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"gez",children:["gez",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#gez",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"Gez"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"읽기 전용"}),": ",(0,s.jsx)(e.code,{children:"true"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Gez 인스턴스 참조입니다. 프레임워크의 핵심 기능과 구성 정보에 접근하는 데 사용됩니다."}),"\n",(0,s.jsxs)(e.h3,{id:"redirect",children:["redirect",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#redirect",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"string | null"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"null"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"리디렉션 주소입니다. 설정하면 서버는 이 값을 기반으로 HTTP 리디렉션을 수행할 수 있으며, 주로 로그인 검증, 권한 제어 등에 사용됩니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 로그인 검증 예시\nexport default async (rc: RenderContext) => {\n  if (!isLoggedIn()) {\n    rc.redirect = '/login';\n    rc.status = 302;\n    return;\n  }\n  // 페이지 렌더링 계속...\n};\n\n// 권한 제어 예시\nexport default async (rc: RenderContext) => {\n  if (!hasPermission()) {\n    rc.redirect = '/403';\n    rc.status = 403;\n    return;\n  }\n  // 페이지 렌더링 계속...\n};\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"status",children:["status",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#status",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"number | null"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"null"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"HTTP 응답 상태 코드입니다. 유효한 HTTP 상태 코드를 설정할 수 있으며, 주로 오류 처리, 리디렉션 등에 사용됩니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 404 오류 처리 예시\nexport default async (rc: RenderContext) => {\n  const page = await findPage(rc.params.url);\n  if (!page) {\n    rc.status = 404;\n    // 404 페이지 렌더링...\n    return;\n  }\n  // 페이지 렌더링 계속...\n};\n\n// 임시 리디렉션 예시\nexport default async (rc: RenderContext) => {\n  if (needMaintenance()) {\n    rc.redirect = '/maintenance';\n    rc.status = 307; // 임시 리디렉션, 요청 메서드 유지\n    return;\n  }\n  // 페이지 렌더링 계속...\n};\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"html",children:["html",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#html",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"HTML 내용입니다. 최종 생성된 HTML 내용을 설정하고 가져오는 데 사용되며, 설정 시 기본 경로 플레이스홀더를 자동으로 처리합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 기본 사용법\nexport default async (rc: RenderContext) => {\n  // HTML 내용 설정\n  rc.html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        ${rc.preload()}\n        ${rc.css()}\n      </head>\n      <body>\n        <div id=\"app\">Hello World</div>\n        ${rc.importmap()}\n        ${rc.moduleEntry()}\n        ${rc.modulePreload()}\n      </body>\n    </html>\n  `;\n};\n\n// 동적 기본 경로\nconst rc = await gez.render({\n  base: '/app',  // 기본 경로 설정\n  params: { url: req.url }\n});\n\n// HTML의 플레이스홀더는 자동으로 교체됩니다:\n// [[[___GEZ_DYNAMIC_BASE___]]]/your-app-name/css/style.css\n// 교체 후:\n// /app/your-app-name/css/style.css\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"base-1",children:["base",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#base-1",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"읽기 전용"}),": ",(0,s.jsx)(e.code,{children:"true"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"정적 리소스의 기본 경로입니다. 모든 정적 리소스(JS, CSS, 이미지 등)는 이 경로를 기반으로 로드되며, 런타임에 동적으로 설정할 수 있습니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// 기본 사용법\nconst rc = await gez.render({\n  base: '/gez',  // 기본 경로 설정\n  params: { url: req.url }\n});\n\n// 다국어 사이트 예시\nconst rc = await gez.render({\n  base: '/cn',  // 중국어 사이트\n  params: { lang: 'zh-CN' }\n});\n\n// 마이크로 프론트엔드 애플리케이션 예시\nconst rc = await gez.render({\n  base: '/app1',  // 서브 애플리케이션1\n  params: { appId: 1 }\n});\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"entryname-1",children:["entryName",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#entryname-1",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"읽기 전용"}),": ",(0,s.jsx)(e.code,{children:"true"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"'default'"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"서버 사이드 렌더링 엔트리 함수 이름입니다. entry.server.ts에서 사용할 렌더링 함수를 선택하는 데 사용됩니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 기본 엔트리 함수\nexport default async (rc: RenderContext) => {\n  // 기본 렌더링 로직\n};\n\n// 여러 엔트리 함수\nexport const mobile = async (rc: RenderContext) => {\n  // 모바일 렌더링 로직\n};\n\nexport const desktop = async (rc: RenderContext) => {\n  // 데스크톱 렌더링 로직\n};\n\n// 디바이스 타입에 따라 엔트리 함수 선택\nconst rc = await gez.render({\n  entryName: isMobile ? 'mobile' : 'desktop',\n  params: { url: req.url }\n});\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"params-1",children:["params",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#params-1",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"Record<string, any>"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"읽기 전용"}),": ",(0,s.jsx)(e.code,{children:"true"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"{}"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"렌더링 매개변수입니다. 서버 사이드 렌더링 과정에서 매개변수를 전달하고 접근할 수 있으며, 주로 요청 정보, 페이지 설정 등을 전달하는 데 사용됩니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// 기본 사용법 - URL 및 언어 설정 전달\nconst rc = await gez.render({\n  params: {\n    url: req.url,\n    lang: 'zh-CN'\n  }\n});\n\n// 페이지 설정 - 테마 및 레이아웃 설정\nconst rc = await gez.render({\n  params: {\n    theme: 'dark',\n    layout: 'sidebar'\n  }\n});\n\n// 환경 설정 - API 주소 주입\nconst rc = await gez.render({\n  params: {\n    apiBaseUrl: process.env.API_BASE_URL,\n    version: '1.0.0'\n  }\n});\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"importmetaset",children:["importMetaSet",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaset",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"Set<ImportMeta>"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"모듈 의존성 수집 집합입니다. 컴포넌트 렌더링 과정에서 모듈 의존성을 자동으로 추적하고 기록하며, 현재 페이지 렌더링 시 실제로 사용된 리소스만 수집합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// 기본 사용법\nconst renderToString = (app: any, context: { importMetaSet: Set<ImportMeta> }) => {\n  // 렌더링 과정에서 모듈 의존성을 자동으로 수집\n  // 프레임워크는 컴포넌트 렌더링 시 context.importMetaSet.add(import.meta)를 자동으로 호출\n  // 개발자는 의존성 수집을 수동으로 처리할 필요가 없음\n  return '<div id=\"app\">Hello World</div>';\n};\n\n// 사용 예시\nconst app = createApp();\nconst html = await renderToString(app, {\n  importMetaSet: rc.importMetaSet\n});\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"files",children:["files",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#files",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"RenderFiles"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"리소스 파일 목록:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"js: JavaScript 파일 목록"}),"\n",(0,s.jsx)(e.li,{children:"css: 스타일시트 파일 목록"}),"\n",(0,s.jsx)(e.li,{children:"modulepreload: 미리 로드해야 할 ESM 모듈 목록"}),"\n",(0,s.jsx)(e.li,{children:"resources: 기타 리소스 파일 목록 (이미지, 폰트 등)"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// 리소스 수집\nawait rc.commit();\n\n// 리소스 주입\nrc.html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    \x3c!-- 리소스 미리 로드 --\x3e\n    ${rc.preload()}\n    \x3c!-- 스타일시트 주입 --\x3e\n    ${rc.css()}\n  </head>\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n  </body>\n  </html>\n`;\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"importmapmode-2",children:["importmapMode",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode-2",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"타입"}),": ",(0,s.jsx)(e.code,{children:"'inline' | 'js'"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"기본값"}),": ",(0,s.jsx)(e.code,{children:"'inline'"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"임포트 맵의 생성 모드:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"inline"}),": importmap 내용을 HTML에 직접 인라인으로 삽입합니다."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"js"}),": importmap 내용을 별도의 JS 파일로 생성합니다."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"인스턴스-메서드",children:["인스턴스 메서드",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#인스턴스-메서드",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"serialize",children:["serialize()",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#serialize",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"매개변수"}),":","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"input: any"})," - 직렬화할 데이터"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"options?: serialize.SerializeJSOptions"})," - 직렬화 옵션"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"반환값"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"JavaScript 객체를 문자열로 직렬화합니다. 서버 사이드 렌더링 과정에서 상태 데이터를 직렬화하여 HTML에 안전하게 삽입할 수 있도록 합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"const state = {\n  user: { id: 1, name: 'Alice' },\n  timestamp: new Date()\n};\n\nrc.html = `\n  <script>\n    window.__INITIAL_STATE__ = ${rc.serialize(state)};\n  <\/script>\n`;\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"state",children:["state()",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#state",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"매개변수"}),":","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"varName: string"})," - 변수명"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"data: Record<string, any>"})," - 상태 데이터"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"반환값"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"상태 데이터를 직렬화하여 HTML에 주입합니다. 안전한 직렬화 방법을 사용하여 복잡한 데이터 구조를 지원합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"const userInfo = {\n  id: 1,\n  name: 'John',\n  roles: ['admin']\n};\n\nrc.html = `\n  <head>\n    ${rc.state('__USER__', userInfo)}\n  </head>\n`;\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"commit",children:["commit()",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#commit",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"반환값"}),": ",(0,s.jsx)(e.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"의존성 수집을 제출하고 리소스 목록을 업데이트합니다. importMetaSet에서 사용된 모든 모듈을 수집하고, manifest 파일을 기반으로 각 모듈의 구체적인 리소스를 해석합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// 렌더링 및 의존성 제출\nconst html = await renderToString(app, {\n  importMetaSet: rc.importMetaSet\n});\n\n// 의존성 수집 제출\nawait rc.commit();\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"preload",children:["preload()",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#preload",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"반환값"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"리소스 미리 로드 태그를 생성합니다. CSS 및 JavaScript 리소스를 미리 로드하며, 우선순위 설정을 지원하고 기본 경로를 자동으로 처리합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"rc.html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    ${rc.preload()}\n    ${rc.css()}  \x3c!-- 스타일시트 주입 --\x3e\n  </head>\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n  </body>\n  </html>\n`;\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"css",children:["css()",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#css",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"반환값"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"CSS 스타일시트 태그를 생성합니다. 수집된 CSS 파일을 주입하여 스타일시트가 올바른 순서로 로드되도록 합니다."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"rc.html = `\n  <head>\n    ${rc.css()}  \x3c!-- 수집된 모든 스타일시트 주입 --\x3e\n  </head>\n`;\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"importmap",children:["importmap()",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#importmap",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"반환값"}),": ",(0,s.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"임포트 맵 태그를 생성"})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(i,{...n})}):i(n)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["ko%2Fapi%2Fcore%2Frender-context.md"]={toc:[{text:"타입 정의",id:"타입-정의",depth:2},{text:"ServerRenderHandle",id:"serverrenderhandle",depth:3},{text:"RenderFiles",id:"renderfiles",depth:3},{text:"ImportmapMode",id:"importmapmode",depth:3},{text:"인스턴스 옵션",id:"인스턴스-옵션",depth:2},{text:"base",id:"base",depth:4},{text:"entryName",id:"entryname",depth:4},{text:"params",id:"params",depth:4},{text:"importmapMode",id:"importmapmode-1",depth:4},{text:"인스턴스 속성",id:"인스턴스-속성",depth:2},{text:"gez",id:"gez",depth:3},{text:"redirect",id:"redirect",depth:3},{text:"status",id:"status",depth:3},{text:"html",id:"html",depth:3},{text:"base",id:"base-1",depth:3},{text:"entryName",id:"entryname-1",depth:3},{text:"params",id:"params-1",depth:3},{text:"importMetaSet",id:"importmetaset",depth:3},{text:"files",id:"files",depth:3},{text:"importmapMode",id:"importmapmode-2",depth:3},{text:"인스턴스 메서드",id:"인스턴스-메서드",depth:2},{text:"serialize()",id:"serialize",depth:3},{text:"state()",id:"state",depth:3},{text:"commit()",id:"commit",depth:3},{text:"preload()",id:"preload",depth:3},{text:"css()",id:"css",depth:3},{text:"importmap()",id:"importmap",depth:3}],title:"RenderContext",headingTitle:"RenderContext",frontmatter:{titleSuffix:"Gez 프레임워크 렌더링 컨텍스트 API 참조",description:"Gez 프레임워크의 RenderContext 핵심 클래스에 대해 자세히 설명합니다. 렌더링 제어, 리소스 관리, 상태 동기화 및 라우팅 제어 등의 기능을 포함하여 개발자가 효율적인 서버 사이드 렌더링(SSR)을 구현할 수 있도록 도와줍니다.",head:[["meta",{property:"keywords",content:"Gez, RenderContext, SSR, 서버 사이드 렌더링, 렌더링 컨텍스트, 상태 동기화, 리소스 관리, 웹 애플리케이션 프레임워크"}]]}}}}]);