"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["3979"],{8579:function(e,n,i){i.r(n),i.d(n,{default:()=>d});var t=i(1549),r=i(6603);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"client-side-rendering",children:["Client-Side Rendering",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#client-side-rendering",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["Client-Side Rendering (CSR) is a technique where page rendering is executed in the browser. In Gez, when your application cannot deploy a Node.js server instance, you can choose to generate a static ",(0,t.jsx)(n.code,{children:"index.html"})," file during the build phase to achieve pure client-side rendering."]}),"\n",(0,t.jsxs)(n.h2,{id:"use-cases",children:["Use Cases",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#use-cases",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The following scenarios recommend using client-side rendering:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Static Hosting Environments"}),": Such as GitHub Pages, CDN, and other hosting services that do not support server-side rendering"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simple Applications"}),": Small applications with low requirements for first-load speed and SEO"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Development Environment"}),": For quick preview and debugging during the development phase"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"configuration-instructions",children:["Configuration Instructions",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configuration-instructions",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"html-template-configuration",children:["HTML Template Configuration",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html-template-configuration",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"In client-side rendering mode, you need to configure a generic HTML template. This template will serve as the container for your application, including necessary resource references and mounting points."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"import type { RenderContext } from '@gez/core';\n\nexport default async (rc: RenderContext) => {\n    // Commit dependency collection\n    await rc.commit();\n    \n    // Configure HTML template\n    rc.html = `\n<!DOCTYPE html>\n<html>\n<head>\n    ${rc.preload()}           // Preload resources\n    <title>Gez</title>\n    ${rc.css()}               // Inject styles\n</head>\n<body>\n    <div id=\"app\"></div>\n    ${rc.importmap()}         // Import map\n    ${rc.moduleEntry()}       // Entry module\n    ${rc.modulePreload()}     // Module preload\n</body>\n</html>\n`;\n};\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"static-html-generation",children:["Static HTML Generation",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#static-html-generation",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["To use client-side rendering in a production environment, you need to generate a static HTML file during the build phase. Gez provides a ",(0,t.jsx)(n.code,{children:"postBuild"})," hook function to achieve this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n    async postBuild(gez) {\n        // Generate static HTML file\n        const rc = await gez.render();\n        // Write HTML file\n        gez.writeSync(\n            gez.resolvePath('dist/client', 'index.html'),\n            rc.html\n        );\n    }\n} satisfies GezOptions;\n"})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}let d=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["en%2Fguide%2Fessentials%2Fcsr.md"]={toc:[{text:"Use Cases",id:"use-cases",depth:2},{text:"Configuration Instructions",id:"configuration-instructions",depth:2},{text:"HTML Template Configuration",id:"html-template-configuration",depth:3},{text:"Static HTML Generation",id:"static-html-generation",depth:3}],title:"Client-Side Rendering",headingTitle:"Client-Side Rendering",frontmatter:{titleSuffix:"Gez Framework Client-Side Rendering Implementation Guide",description:"Detailed guide on the client-side rendering mechanism of the Gez framework, including static build, deployment strategies, and best practices, helping developers achieve efficient front-end rendering in serverless environments.",head:[["meta",{property:"keywords",content:"Gez, Client-Side Rendering, CSR, Static Build, Front-End Rendering, Serverless Deployment, Performance Optimization"}]]}}}}]);