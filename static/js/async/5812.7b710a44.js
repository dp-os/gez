"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["5812"],{3470:function(e,n,t){t.r(n),t.d(n,{default:()=>c});var r=t(1549),s=t(6603);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3",ol:"ol",li:"li"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"html",children:["HTML",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"В этом руководстве мы шаг за шагом создадим HTML SSR приложение на основе фреймворка Gez. Мы рассмотрим полный пример, демонстрирующий использование Gez для создания приложения с серверным рендерингом."}),"\n",(0,r.jsxs)(n.h2,{id:"структура-проекта",children:["Структура проекта",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#структура-проекта",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Для начала рассмотрим базовую структуру проекта:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:".\n├── package.json         # Конфигурационный файл проекта, определяющий зависимости и команды\n├── tsconfig.json        # Конфигурационный файл TypeScript, настройки компиляции\n└── src                  # Директория с исходным кодом\n    ├── app.ts           # Главный компонент приложения, определяющий структуру страницы и логику взаимодействия\n    ├── create-app.ts    # Фабрика создания экземпляра приложения, отвечающая за инициализацию\n    ├── entry.client.ts  # Входной файл для клиента, обработка рендеринга на стороне браузера\n    ├── entry.node.ts    # Входной файл для Node.js сервера, отвечающий за конфигурацию среды разработки и запуск сервера\n    └── entry.server.ts  # Входной файл для сервера, обработка логики SSR рендеринга\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"конфигурация-проекта",children:["Конфигурация проекта",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#конфигурация-проекта",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"packagejson",children:["package.json",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Создайте файл ",(0,r.jsx)(n.code,{children:"package.json"})," для настройки зависимостей и скриптов проекта:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n  "name": "ssr-demo-html",\n  "version": "1.0.0",\n  "type": "module",\n  "private": true,\n  "scripts": {\n    "dev": "gez dev",\n    "build": "npm run build:dts && npm run build:ssr",\n    "build:ssr": "gez build",\n    "preview": "gez preview",\n    "start": "NODE_ENV=production node dist/index.js",\n    "build:dts": "tsc --declaration --emitDeclarationOnly --outDir dist/src"\n  },\n  "dependencies": {\n    "@gez/core": "*"\n  },\n  "devDependencies": {\n    "@gez/rspack": "*",\n    "@types/node": "22.8.6",\n    "typescript": "^5.7.3"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["После создания файла ",(0,r.jsx)(n.code,{children:"package.json"})," установите зависимости проекта. Вы можете использовать одну из следующих команд для установки:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm install\n# или\nyarn install\n# или\nnpm install\n"})}),"\n",(0,r.jsx)(n.p,{children:"Это установит все необходимые зависимости, включая TypeScript и зависимости для SSR."}),"\n",(0,r.jsxs)(n.h3,{id:"tsconfigjson",children:["tsconfig.json",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tsconfigjson",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Создайте файл ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," для настройки параметров компиляции TypeScript:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="tsconfig.json"',children:'{\n    "compilerOptions": {\n        "module": "ESNext",\n        "moduleResolution": "node",\n        "isolatedModules": true,\n        "resolveJsonModule": true,\n        \n        "target": "ESNext",\n        "lib": ["ESNext", "DOM"],\n        \n        "strict": true,\n        "skipLibCheck": true,\n        "types": ["@types/node"],\n        \n        "experimentalDecorators": true,\n        "allowSyntheticDefaultImports": true,\n        \n        "baseUrl": ".",\n        "paths": {\n            "ssr-demo-html/src/*": ["./src/*"],\n            "ssr-demo-html/*": ["./*"]\n        }\n    },\n    "include": ["src"],\n    "exclude": ["dist", "node_modules"]\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"структура-исходного-кода",children:["Структура исходного кода",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#структура-исходного-кода",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"appts",children:["app.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#appts",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Создайте главный компонент приложения ",(0,r.jsx)(n.code,{children:"src/app.ts"}),", реализующий структуру страницы и логику взаимодействия:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/app.ts"',children:"/**\n * @file Пример компонента\n * @description Демонстрирует заголовок страницы с автоматически обновляемым временем, показывая базовые возможности фреймворка Gez\n */\n\nexport default class App {\n    /**\n     * Текущее время в формате ISO\n     * @type {string}\n     */\n    public time = '';\n\n    /**\n     * Создание экземпляра приложения\n     * @param {SsrContext} [ssrContext] - Контекст сервера, содержащий набор метаданных импорта\n     */\n    public constructor(public ssrContext?: SsrContext) {\n        // В конструкторе не требуется дополнительная инициализация\n    }\n\n    /**\n     * Рендеринг содержимого страницы\n     * @returns {string} Возвращает HTML структуру страницы\n     */\n    public render(): string {\n        // Убедимся, что в серверной среде правильно собираются метаданные импорта\n        if (this.ssrContext) {\n            this.ssrContext.importMetaSet.add(import.meta);\n        }\n\n        return `\n        <div id=\"app\">\n            <h1><a href=\"https://www.jsesm.com/guide/frameworks/html.html\" target=\"_blank\">Быстрый старт с Gez</a></h1>\n            <time datetime=\"${this.time}\">${this.time}</time>\n        </div>\n        `;\n    }\n\n    /**\n     * Инициализация на стороне клиента\n     * @throws {Error} Ошибка, если не найден элемент отображения времени\n     */\n    public onClient(): void {\n        // Получаем элемент отображения времени\n        const time = document.querySelector('#app time');\n        if (!time) {\n            throw new Error('Элемент отображения времени не найден');\n        }\n\n        // Устанавливаем таймер для обновления времени каждую секунду\n        setInterval(() => {\n            this.time = new Date().toISOString();\n            time.setAttribute('datetime', this.time);\n            time.textContent = this.time;\n        }, 1000);\n    }\n\n    /**\n     * Инициализация на стороне сервера\n     */\n    public onServer(): void {\n        this.time = new Date().toISOString();\n    }\n}\n\n/**\n * Интерфейс контекста сервера\n * @interface\n */\nexport interface SsrContext {\n    /**\n     * Набор метаданных импорта\n     * @type {Set<ImportMeta>}\n     */\n    importMetaSet: Set<ImportMeta>;\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"create-appts",children:["create-app.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#create-appts",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Создайте файл ",(0,r.jsx)(n.code,{children:"src/create-app.ts"}),", отвечающий за создание экземпляра приложения:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/create-app.ts"',children:"/**\n * @file Создание экземпляра приложения\n * @description Отвечает за создание и конфигурацию экземпляра приложения\n */\n\nimport App from './app';\n\nexport function createApp() {\n    const app = new App();\n    return {\n        app\n    };\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"entryclientts",children:["entry.client.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryclientts",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Создайте входной файл для клиента ",(0,r.jsx)(n.code,{children:"src/entry.client.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.client.ts"',children:"/**\n * @file Входной файл для клиента\n * @description Отвечает за логику взаимодействия на стороне клиента и динамическое обновление\n */\n\nimport { createApp } from './create-app';\n\n// Создаем экземпляр приложения и инициализируем\nconst { app } = createApp();\napp.onClient();\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"entrynodets",children:["entry.node.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entrynodets",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Создайте файл ",(0,r.jsx)(n.code,{children:"entry.node.ts"})," для конфигурации среды разработки и запуска сервера:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"/**\n * @file Входной файл для Node.js сервера\n * @description Отвечает за конфигурацию среды разработки и запуск сервера, предоставляя среду выполнения SSR\n */\n\nimport http from 'node:http';\nimport type { GezOptions } from '@gez/core';\n\nexport default {\n    /**\n     * Конфигурация создателя приложения для среды разработки\n     * @description Создает и конфигурирует экземпляр приложения Rspack для сборки и горячей перезагрузки в среде разработки\n     * @param gez Экземпляр фреймворка Gez, предоставляющий основные функции и интерфейсы конфигурации\n     * @returns Возвращает сконфигурированный экземпляр приложения Rspack с поддержкой HMR и live preview\n     */\n    async devApp(gez) {\n        return import('@gez/rspack').then((m) =>\n            m.createRspackHtmlApp(gez, {\n                config(context) {\n                    // Здесь можно настроить конфигурацию компиляции Rspack\n                }\n            })\n        );\n    },\n\n    /**\n     * Конфигурация и запуск HTTP сервера\n     * @description Создает экземпляр HTTP сервера, интегрирует middleware Gez для обработки SSR запросов\n     * @param gez Экземпляр фреймворка Gez, предоставляющий middleware и функции рендеринга\n     */\n    async server(gez) {\n        const server = http.createServer((req, res) => {\n            // Используем middleware Gez для обработки запросов\n            gez.middleware(req, res, async () => {\n                // Выполняем серверный рендеринг\n                const rc = await gez.render({\n                    params: { url: req.url }\n                });\n                res.end(rc.html);\n            });\n        });\n\n        server.listen(3000, () => {\n            console.log('Сервер запущен: http://localhost:3000');\n        });\n    }\n} satisfies GezOptions;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Этот файл является входной точкой для конфигурации среды разработки и запуска сервера, содержащий две основные функции:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Функция ",(0,r.jsx)(n.code,{children:"devApp"}),": отвечает за создание и конфигурацию экземпляра приложения Rspack для среды разработки, поддерживает горячую перезагрузку и live preview."]}),"\n",(0,r.jsxs)(n.li,{children:["Функция ",(0,r.jsx)(n.code,{children:"server"}),": отвечает за создание и конфигурацию HTTP сервера, интегрирует middleware Gez для обработки SSR запросов."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"entryserverts",children:["entry.server.ts",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryserverts",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Создайте входной файл для серверного рендеринга ",(0,r.jsx)(n.code,{children:"src/entry.server.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"/**\n * @file Входной файл для серверного рендеринга\n * @description Отвечает за процесс серверного рендеринга, генерацию HTML и инъекцию ресурсов\n */\n\nimport type { RenderContext } from '@gez/core';\nimport type App from './app';\nimport type { SsrContext } from './app';\nimport { createApp } from './create-app';\n\n// Инкапсулируем логику генерации содержимого страницы\nconst renderToString = (app: App, ssrContext: SsrContext): string => {\n    // Инжектируем контекст серверного рендеринга в экземпляр приложения\n    app.ssrContext = ssrContext;\n    // Инициализируем сервер\n    app.onServer();\n\n    // Генерируем содержимое страницы\n    return app.render();\n};\n\nexport default async (rc: RenderContext) => {\n    // Создаем экземпляр приложения, возвращаем объект с экземпляром app\n    const { app } = createApp();\n    // Используем renderToString для генерации содержимого страницы\n    const html = renderToString(app, {\n        importMetaSet: rc.importMetaSet\n    });\n\n    // Фиксируем сбор зависимостей, чтобы все необходимые ресурсы были загружены\n    await rc.commit();\n\n    // Генерируем полную HTML структуру\n    rc.html = `<!DOCTYPE html>\n<html lang=\"ru\">\n<head>\n    ${rc.preload()}\n    <title>Быстрый старт с Gez</title>\n    ${rc.css()}\n</head>\n<body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n</body>\n</html>\n`;\n};\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"запуск-проекта",children:["Запуск проекта",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#запуск-проекта",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"После завершения настройки файлов, вы можете использовать следующие команды для запуска проекта:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Режим разработки:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Сборка проекта:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Запуск в production режиме:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Теперь вы успешно создали HTML SSR приложение на основе фреймворка Gez! Перейдите по адресу ",(0,r.jsx)(n.a,{href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000"}),", чтобы увидеть результат."]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let c=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["ru%2Fguide%2Fframeworks%2Fhtml.md"]={toc:[{text:"Структура проекта",id:"структура-проекта",depth:2},{text:"Конфигурация проекта",id:"конфигурация-проекта",depth:2},{text:"package.json",id:"packagejson",depth:3},{text:"tsconfig.json",id:"tsconfigjson",depth:3},{text:"Структура исходного кода",id:"структура-исходного-кода",depth:2},{text:"app.ts",id:"appts",depth:3},{text:"create-app.ts",id:"create-appts",depth:3},{text:"entry.client.ts",id:"entryclientts",depth:3},{text:"entry.node.ts",id:"entrynodets",depth:3},{text:"entry.server.ts",id:"entryserverts",depth:3},{text:"Запуск проекта",id:"запуск-проекта",depth:2}],title:"HTML",headingTitle:"HTML",frontmatter:{titleSuffix:"Пример HTML SSR приложения на фреймворке Gez",description:"Пошаговое руководство по созданию HTML SSR приложения на основе Gez, включая инициализацию проекта, настройку HTML и конфигурацию входных файлов.",head:[["meta",{property:"keywords",content:"Gez, HTML, SSR приложение, конфигурация TypeScript, инициализация проекта, серверный рендеринг, клиентское взаимодействие"}]]}}}}]);