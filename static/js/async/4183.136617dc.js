"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["4183"],{1707:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var i=r(1549),s=r(6603);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ol:"ol",li:"li",strong:"strong",ul:"ul",h2:"h2",code:"code",pre:"pre",h3:"h3",h4:"h4"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"render-context",children:["Render Context",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#render-context",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"RenderContext is a core class in the Gez framework, primarily responsible for resource management and HTML generation during server-side rendering (SSR). It has the following key features:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"ESM-based Module System"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Adopts modern ECMAScript Modules standards"}),"\n",(0,i.jsx)(n.li,{children:"Supports native module import/export"}),"\n",(0,i.jsx)(n.li,{children:"Enables better code splitting and on-demand loading"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Intelligent Dependency Collection"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dynamically collects dependencies based on actual rendering paths"}),"\n",(0,i.jsx)(n.li,{children:"Avoids unnecessary resource loading"}),"\n",(0,i.jsx)(n.li,{children:"Supports async components and dynamic imports"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Precise Resource Injection"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Strictly controls resource loading order"}),"\n",(0,i.jsx)(n.li,{children:"Optimizes first-screen loading performance"}),"\n",(0,i.jsx)(n.li,{children:"Ensures reliability of client-side hydration"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Flexible Configuration Mechanism"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Supports dynamic base path configuration"}),"\n",(0,i.jsx)(n.li,{children:"Provides multiple import mapping modes"}),"\n",(0,i.jsx)(n.li,{children:"Adapts to different deployment scenarios"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"usage",children:["Usage",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["In the Gez framework, developers typically do not need to create RenderContext instances directly, but instead obtain instances through the ",(0,i.jsx)(n.code,{children:"gez.render()"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"async server(gez) {\n    const server = http.createServer((req, res) => {\n        // Static file handling\n        gez.middleware(req, res, async () => {\n            // Obtain RenderContext instance via gez.render()\n            const rc = await gez.render({\n                params: {\n                    url: req.url\n                }\n            });\n            // Respond with HTML content\n            res.end(rc.html);\n        });\n    });\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"main-features",children:["Main Features",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#main-features",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"dependency-collection",children:["Dependency Collection",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dependency-collection",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"RenderContext implements an intelligent dependency collection mechanism that dynamically collects dependencies based on the actual rendered components, rather than preloading all potentially used resources:"}),"\n",(0,i.jsxs)(n.h4,{id:"on-demand-collection",children:["On-demand Collection",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#on-demand-collection",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Automatically tracks and records module dependencies during component rendering"}),"\n",(0,i.jsx)(n.li,{children:"Only collects CSS, JavaScript, and other resources actually used in the current page rendering"}),"\n",(0,i.jsxs)(n.li,{children:["Precisely records each component's module dependencies through ",(0,i.jsx)(n.code,{children:"importMetaSet"})]}),"\n",(0,i.jsx)(n.li,{children:"Supports dependency collection for async components and dynamic imports"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"automated-processing",children:["Automated Processing",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#automated-processing",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Developers do not need to manually manage the dependency collection process"}),"\n",(0,i.jsx)(n.li,{children:"The framework automatically collects dependency information during component rendering"}),"\n",(0,i.jsxs)(n.li,{children:["Processes all collected resources uniformly through the ",(0,i.jsx)(n.code,{children:"commit()"})," method"]}),"\n",(0,i.jsx)(n.li,{children:"Automatically handles circular dependencies and duplicate dependencies"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"performance-optimization",children:["Performance Optimization",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#performance-optimization",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Avoids loading unused modules, significantly reducing first-screen loading time"}),"\n",(0,i.jsx)(n.li,{children:"Precisely controls resource loading order, optimizing page rendering performance"}),"\n",(0,i.jsx)(n.li,{children:"Automatically generates optimal import maps"}),"\n",(0,i.jsx)(n.li,{children:"Supports resource preloading and on-demand loading strategies"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"resource-injection",children:["Resource Injection",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#resource-injection",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"RenderContext provides multiple methods to inject different types of resources, each carefully designed to optimize resource loading performance:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"preload()"}),": Preloads CSS and JS resources, supports priority configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"css()"}),": Injects first-screen stylesheets, supports critical CSS extraction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"importmap()"}),": Injects module import maps, supports dynamic path resolution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"moduleEntry()"}),": Injects client entry modules, supports multi-entry configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"modulePreload()"}),": Preloads module dependencies, supports on-demand loading strategies"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"resource-injection-order",children:["Resource Injection Order",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#resource-injection-order",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"RenderContext strictly controls resource injection order, designed based on browser working principles and performance optimization considerations:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Head section:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"preload()"}),": Preloads CSS and JS resources, allowing the browser to discover and start loading these resources as early as possible"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"css()"}),": Injects first-screen stylesheets, ensuring page styles are in place when content is rendered"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Body section:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"importmap()"}),": Injects module import maps, defining ESM module path resolution rules"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"moduleEntry()"}),": Injects client entry modules, must be executed after importmap"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"modulePreload()"}),": Preloads module dependencies, must be executed after importmap"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"complete-rendering-process",children:["Complete Rendering Process",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#complete-rendering-process",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"A typical RenderContext usage flow is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"export default async (rc: RenderContext) => {\n    // 1. Render page content and collect dependencies\n    const app = createApp();\n    const html = await renderToString(app, {\n       importMetaSet: rc.importMetaSet\n    });\n\n    // 2. Commit dependency collection\n    await rc.commit();\n    \n    // 3. Generate complete HTML\n    rc.html = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n            ${rc.preload()}\n            ${rc.css()}\n        </head>\n        <body>\n            ${html}\n            ${rc.importmap()}\n            ${rc.moduleEntry()}\n            ${rc.modulePreload()}\n        </body>\n        </html>\n    `;\n};\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"advanced-features",children:["Advanced Features",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#advanced-features",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"base-path-configuration",children:["Base Path Configuration",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#base-path-configuration",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"RenderContext provides a flexible dynamic base path configuration mechanism, supporting runtime dynamic setting of static resource base paths:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"const rc = await gez.render({\n    base: '/gez',  // Set base path\n    params: {\n        url: req.url\n    }\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"This mechanism is particularly suitable for the following scenarios:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Multi-language Site Deployment"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"main-domain.com      → Default language\nmain-domain.com/cn/  → Chinese site\nmain-domain.com/en/  → English site\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Micro-frontend Applications"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Supports flexible deployment of sub-applications under different paths"}),"\n",(0,i.jsx)(n.li,{children:"Facilitates integration into different main applications"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"import-map-modes",children:["Import Map Modes",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#import-map-modes",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"RenderContext provides two import map modes:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inline Mode"})," (default)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Inlines import maps directly into HTML"}),"\n",(0,i.jsx)(n.li,{children:"Suitable for small applications, reduces additional network requests"}),"\n",(0,i.jsx)(n.li,{children:"Immediately available when the page loads"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"JS Mode"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Loads import maps through external JavaScript files"}),"\n",(0,i.jsx)(n.li,{children:"Suitable for large applications, can leverage browser caching mechanisms"}),"\n",(0,i.jsx)(n.li,{children:"Supports dynamic updates of map content"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You can choose the appropriate mode through configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"const rc = await gez.render({\n    importmapMode: 'js',  // 'inline' | 'js'\n    params: {\n        url: req.url\n    }\n});\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"entry-function-configuration",children:["Entry Function Configuration",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entry-function-configuration",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["RenderContext supports specifying server-side rendering entry functions through the ",(0,i.jsx)(n.code,{children:"entryName"})," configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"const rc = await gez.render({\n    entryName: 'mobile',  // Specify mobile entry function\n    params: {\n        url: req.url\n    }\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"This mechanism is particularly suitable for the following scenarios:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Multi-template Rendering"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"// Mobile entry function\nexport const mobile = async (rc: RenderContext) => {\n    // Mobile-specific rendering logic\n};\n\n// Desktop entry function\nexport const desktop = async (rc: RenderContext) => {\n    // Desktop-specific rendering logic\n};\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"A/B Testing"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Supports different rendering logic for the same page"}),"\n",(0,i.jsx)(n.li,{children:"Facilitates user experience experiments"}),"\n",(0,i.jsx)(n.li,{children:"Flexibly switches between different rendering strategies"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Special Rendering Requirements"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Supports custom rendering processes for certain pages"}),"\n",(0,i.jsx)(n.li,{children:"Adapts to performance optimization needs in different scenarios"}),"\n",(0,i.jsx)(n.li,{children:"Implements more granular rendering control"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"best-practices",children:["Best Practices",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#best-practices",children:"#"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Obtaining RenderContext Instances"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Always obtain instances through the ",(0,i.jsx)(n.code,{children:"gez.render()"})," method"]}),"\n",(0,i.jsx)(n.li,{children:"Pass appropriate parameters as needed"}),"\n",(0,i.jsx)(n.li,{children:"Avoid manually creating instances"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Dependency Collection"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure all modules correctly call ",(0,i.jsx)(n.code,{children:"importMetaSet.add(import.meta)"})]}),"\n",(0,i.jsxs)(n.li,{children:["Immediately call the ",(0,i.jsx)(n.code,{children:"commit()"})," method after rendering completes"]}),"\n",(0,i.jsx)(n.li,{children:"Reasonably use async components and dynamic imports to optimize first-screen loading"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Resource Injection"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Strictly follow resource injection order"}),"\n",(0,i.jsx)(n.li,{children:"Do not inject CSS in the body"}),"\n",(0,i.jsx)(n.li,{children:"Ensure importmap is before moduleEntry"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Performance Optimization"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use preload to preload critical resources"}),"\n",(0,i.jsx)(n.li,{children:"Reasonably use modulePreload to optimize module loading"}),"\n",(0,i.jsx)(n.li,{children:"Avoid unnecessary resource loading"}),"\n",(0,i.jsx)(n.li,{children:"Leverage browser caching mechanisms to optimize loading performance"}),"\n"]}),"\n"]}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["en%2Fguide%2Fessentials%2Frender-context.md"]={toc:[{text:"Usage",id:"usage",depth:2},{text:"Main Features",id:"main-features",depth:2},{text:"Dependency Collection",id:"dependency-collection",depth:3},{text:"On-demand Collection",id:"on-demand-collection",depth:4},{text:"Automated Processing",id:"automated-processing",depth:4},{text:"Performance Optimization",id:"performance-optimization",depth:4},{text:"Resource Injection",id:"resource-injection",depth:3},{text:"Resource Injection Order",id:"resource-injection-order",depth:3},{text:"Complete Rendering Process",id:"complete-rendering-process",depth:2},{text:"Advanced Features",id:"advanced-features",depth:2},{text:"Base Path Configuration",id:"base-path-configuration",depth:3},{text:"Import Map Modes",id:"import-map-modes",depth:3},{text:"Entry Function Configuration",id:"entry-function-configuration",depth:3},{text:"Best Practices",id:"best-practices",depth:2}],title:"Render Context",headingTitle:"Render Context",frontmatter:{titleSuffix:"Gez Framework Server-Side Rendering Core Mechanism",description:"Detailed introduction to the RenderContext mechanism of the Gez framework, including resource management, HTML generation, and ESM module system, helping developers understand and utilize server-side rendering capabilities.",head:[["meta",{property:"keywords",content:"Gez, RenderContext, SSR, Server-Side Rendering, ESM, Resource Management"}]]}}}}]);