"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["586"],{9143:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var s=r(1549),d=r(6603);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",h2:"h2",h3:"h3",pre:"pre",code:"code",h4:"h4"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"rendercontext",children:["RenderContext",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rendercontext",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"RenderContext 是 Gez 框架中的核心類別，負責管理伺服器端渲染（SSR）的完整生命週期。它提供了一套完整的 API 來處理渲染上下文、資源管理、狀態同步等關鍵任務："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"渲染控制"}),"：管理伺服器端渲染流程，支援多入口渲染、條件渲染等場景"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"資源管理"}),"：智慧收集和注入 JS、CSS 等靜態資源，最佳化載入效能"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"狀態同步"}),"：處理伺服器端狀態序列化，確保客戶端正確啟用（hydration）"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"路由控制"}),"：支援伺服器端重新導向、狀態碼設定等高階功能"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"類型定義",children:["類型定義",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#類型定義",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"serverrenderhandle",children:["ServerRenderHandle",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#serverrenderhandle",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"伺服器端渲染處理函式的類型定義。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type ServerRenderHandle = (rc: RenderContext) => Promise<void> | void;\n"})}),"\n",(0,s.jsx)(n.p,{children:"伺服器端渲染處理函式是一個非同步或同步函式，接收 RenderContext 實例作為參數，用於處理伺服器端渲染邏輯。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 1. 非同步處理函式\nexport default async (rc: RenderContext) => {\n  const app = createApp();\n  const html = await renderToString(app);\n  rc.html = html;\n};\n\n// 2. 同步處理函式\nexport const simple = (rc: RenderContext) => {\n  rc.html = '<h1>Hello World</h1>';\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"renderfiles",children:["RenderFiles",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#renderfiles",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"渲染過程中收集的資源檔案列表的類型定義。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface RenderFiles {\n  js: string[];\n  css: string[];\n  modulepreload: string[];\n  resources: string[];\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"js"}),": JavaScript 檔案列表"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"css"}),": 樣式表檔案列表"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"modulepreload"}),": 需要預載的 ESM 模組列表"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"resources"}),": 其他資源檔案列表（圖片、字型等）"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 資源檔案列表示例\nrc.files = {\n  js: [\n    '/assets/entry-client.js',\n    '/assets/vendor.js'\n  ],\n  css: [\n    '/assets/main.css',\n    '/assets/vendor.css'\n  ],\n  modulepreload: [\n    '/assets/Home.js',\n    '/assets/About.js'\n  ],\n  resources: [\n    '/assets/logo.png',\n    '/assets/font.woff2'\n  ]\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmapmode",children:["ImportmapMode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"定義 importmap 的生成模式。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type ImportmapMode = 'inline' | 'js';\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"inline"}),": 將 importmap 內容直接內嵌到 HTML 中，適用於以下場景：","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"需要減少 HTTP 請求數量"}),"\n",(0,s.jsx)(n.li,{children:"importmap 內容較小"}),"\n",(0,s.jsx)(n.li,{children:"對首屏載入效能要求較高"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"js"}),": 將 importmap 內容生成為獨立的 JS 檔案，適用於以下場景：","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"importmap 內容較大"}),"\n",(0,s.jsx)(n.li,{children:"需要利用瀏覽器快取機制"}),"\n",(0,s.jsx)(n.li,{children:"多個頁面共享相同的 importmap"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"渲染上下文類別，負責伺服器端渲染（SSR）過程中的資源管理和 HTML 生成。"}),"\n",(0,s.jsxs)(n.h2,{id:"實例選項",children:["實例選項",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#實例選項",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"定義渲染上下文的配置選項。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface RenderContextOptions {\n  base?: string\n  entryName?: string\n  params?: Record<string, any>\n  importmapMode?: ImportmapMode\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"base",children:["base",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#base",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"靜態資源的基礎路徑。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"所有靜態資源（JS、CSS、圖片等）都會基於此路徑載入"}),"\n",(0,s.jsx)(n.li,{children:"支援執行時動態配置，無需重新建置"}),"\n",(0,s.jsx)(n.li,{children:"常用於多語言站點、微前端應用等場景"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"entryname",children:["entryName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryname",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"'default'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"伺服器端渲染入口函式名稱。用於指定伺服器端渲染時使用的入口函式，當一個模組匯出多個渲染函式時使用。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"export const mobile = async (rc: RenderContext) => {\n  // 行動端渲染邏輯\n};\n\nexport const desktop = async (rc: RenderContext) => {\n  // 桌面端渲染邏輯\n};\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"params",children:["params",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#params",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"Record<string, any>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"渲染參數。可以傳遞任意類型的參數給渲染函式，常用於傳遞請求資訊（URL、query 參數等）。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const rc = await gez.render({\n  params: {\n    url: req.url,\n    lang: 'zh-CN',\n    theme: 'dark'\n  }\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"importmapmode-1",children:["importmapMode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"'inline' | 'js'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"'inline'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"匯入映射（Import Map）的生成模式："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"inline"}),": 將 importmap 內容直接內嵌到 HTML 中"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"js"}),": 將 importmap 內容生成為獨立的 JS 檔案"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"實例屬性",children:["實例屬性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#實例屬性",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"gez",children:["gez",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gez",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"Gez"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"唯讀"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Gez 實例引用。用於存取框架核心功能和配置資訊。"}),"\n",(0,s.jsxs)(n.h3,{id:"redirect",children:["redirect",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redirect",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"string | null"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"重新導向地址。設定後，伺服器端可以根據此值進行 HTTP 重新導向，常用於登入驗證、權限控制等場景。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 登入驗證示例\nexport default async (rc: RenderContext) => {\n  if (!isLoggedIn()) {\n    rc.redirect = '/login';\n    rc.status = 302;\n    return;\n  }\n  // 繼續渲染頁面...\n};\n\n// 權限控制示例\nexport default async (rc: RenderContext) => {\n  if (!hasPermission()) {\n    rc.redirect = '/403';\n    rc.status = 403;\n    return;\n  }\n  // 繼續渲染頁面...\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"status",children:["status",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#status",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"number | null"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"HTTP 回應狀態碼。可以設定任意有效的 HTTP 狀態碼，常用於錯誤處理、重新導向等場景。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 404 錯誤處理示例\nexport default async (rc: RenderContext) => {\n  const page = await findPage(rc.params.url);\n  if (!page) {\n    rc.status = 404;\n    // 渲染 404 頁面...\n    return;\n  }\n  // 繼續渲染頁面...\n};\n\n// 臨時重新導向示例\nexport default async (rc: RenderContext) => {\n  if (needMaintenance()) {\n    rc.redirect = '/maintenance';\n    rc.status = 307; // 臨時重新導向，保持請求方法不變\n    return;\n  }\n  // 繼續渲染頁面...\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"html",children:["html",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"HTML 內容。用於設定和取得最終生成的 HTML 內容，在設定時自動處理基礎路徑佔位符。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 基礎用法\nexport default async (rc: RenderContext) => {\n  // 設定 HTML 內容\n  rc.html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        ${rc.preload()}\n        ${rc.css()}\n      </head>\n      <body>\n        <div id=\"app\">Hello World</div>\n        ${rc.importmap()}\n        ${rc.moduleEntry()}\n        ${rc.modulePreload()}\n      </body>\n    </html>\n  `;\n};\n\n// 動態基礎路徑\nconst rc = await gez.render({\n  base: '/app',  // 設定基礎路徑\n  params: { url: req.url }\n});\n\n// HTML 中的佔位符會被自動替換：\n// [[[___GEZ_DYNAMIC_BASE___]]]/your-app-name/css/style.css\n// 替換為：\n// /app/your-app-name/css/style.css\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"base-1",children:["base",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#base-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"唯讀"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"靜態資源的基礎路徑。所有靜態資源（JS、CSS、圖片等）都會基於此路徑載入，支援執行時動態配置。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 基礎用法\nconst rc = await gez.render({\n  base: '/gez',  // 設定基礎路徑\n  params: { url: req.url }\n});\n\n// 多語言站點示例\nconst rc = await gez.render({\n  base: '/cn',  // 中文站點\n  params: { lang: 'zh-CN' }\n});\n\n// 微前端應用示例\nconst rc = await gez.render({\n  base: '/app1',  // 子應用1\n  params: { appId: 1 }\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"entryname-1",children:["entryName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryname-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"唯讀"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"'default'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"伺服器端渲染入口函式名稱。用於從 entry.server.ts 中選擇要使用的渲染函式。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 預設入口函式\nexport default async (rc: RenderContext) => {\n  // 預設渲染邏輯\n};\n\n// 多個入口函式\nexport const mobile = async (rc: RenderContext) => {\n  // 行動端渲染邏輯\n};\n\nexport const desktop = async (rc: RenderContext) => {\n  // 桌面端渲染邏輯\n};\n\n// 根據裝置類型選擇入口函式\nconst rc = await gez.render({\n  entryName: isMobile ? 'mobile' : 'desktop',\n  params: { url: req.url }\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"params-1",children:["params",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#params-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"Record<string, any>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"唯讀"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"渲染參數。可以在伺服器端渲染過程中傳遞和存取參數，常用於傳遞請求資訊、頁面配置等。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 基礎用法 - 傳遞 URL 和語言設定\nconst rc = await gez.render({\n  params: {\n    url: req.url,\n    lang: 'zh-CN'\n  }\n});\n\n// 頁面配置 - 設定主題和佈局\nconst rc = await gez.render({\n  params: {\n    theme: 'dark',\n    layout: 'sidebar'\n  }\n});\n\n// 環境配置 - 注入 API 地址\nconst rc = await gez.render({\n  params: {\n    apiBaseUrl: process.env.API_BASE_URL,\n    version: '1.0.0'\n  }\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmetaset",children:["importMetaSet",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaset",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"Set<ImportMeta>"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"模組依賴收集集合。在元件渲染過程中自動追蹤和記錄模組依賴，只收集當前頁面渲染時真正使用到的資源。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 基礎用法\nconst renderToString = (app: any, context: { importMetaSet: Set<ImportMeta> }) => {\n  // 在渲染過程中自動收集模組依賴\n  // 框架會在元件渲染時自動呼叫 context.importMetaSet.add(import.meta)\n  // 開發者無需手動處理依賴收集\n  return '<div id=\"app\">Hello World</div>';\n};\n\n// 使用示例\nconst app = createApp();\nconst html = await renderToString(app, {\n  importMetaSet: rc.importMetaSet\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"files",children:["files",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#files",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"RenderFiles"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"資源檔案列表："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"js: JavaScript 檔案列表"}),"\n",(0,s.jsx)(n.li,{children:"css: 樣式表檔案列表"}),"\n",(0,s.jsx)(n.li,{children:"modulepreload: 需要預載的 ESM 模組列表"}),"\n",(0,s.jsx)(n.li,{children:"resources: 其他資源檔案列表（圖片、字型等）"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 資源收集\nawait rc.commit();\n\n// 資源注入\nrc.html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    \x3c!-- 預載資源 --\x3e\n    ${rc.preload()}\n    \x3c!-- 注入樣式表 --\x3e\n    ${rc.css()}\n  </head>\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n  </body>\n  </html>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmapmode-2",children:["importmapMode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode-2",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"類型"}),": ",(0,s.jsx)(n.code,{children:"'inline' | 'js'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"預設值"}),": ",(0,s.jsx)(n.code,{children:"'inline'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"匯入映射的生成模式："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"inline"}),": 將 importmap 內容直接內嵌到 HTML 中"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"js"}),": 將 importmap 內容生成為獨立的 JS 檔案"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"實例方法",children:["實例方法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#實例方法",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"serialize",children:["serialize()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#serialize",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"參數"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"input: any"})," - 需要序列化的資料"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"options?: serialize.SerializeJSOptions"})," - 序列化選項"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"回傳值"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"將 JavaScript 物件序列化為字串。用於在伺服器端渲染過程中序列化狀態資料，確保資料可以安全地嵌入到 HTML 中。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const state = {\n  user: { id: 1, name: 'Alice' },\n  timestamp: new Date()\n};\n\nrc.html = `\n  <script>\n    window.__INITIAL_STATE__ = ${rc.serialize(state)};\n  <\/script>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"state",children:["state()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#state",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"參數"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"varName: string"})," - 變數名"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data: Record<string, any>"})," - 狀態資料"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"回傳值"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"將狀態資料序列化並注入到 HTML 中。使用安全的序列化方法處理資料，支援複雜的資料結構。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const userInfo = {\n  id: 1,\n  name: 'John',\n  roles: ['admin']\n};\n\nrc.html = `\n  <head>\n    ${rc.state('__USER__', userInfo)}\n  </head>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"commit",children:["commit()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commit",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"回傳值"}),": ",(0,s.jsx)(n.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"提交依賴收集並更新資源列表。從 importMetaSet 中收集所有使用到的模組，基於 manifest 檔案解析每個模組的具體資源。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 渲染並提交依賴\nconst html = await renderToString(app, {\n  importMetaSet: rc.importMetaSet\n});\n\n// 提交依賴收集\nawait rc.commit();\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"preload",children:["preload()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#preload",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"回傳值"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"生成資源預載標籤。用於預載 CSS 和 JavaScript 資源，支援優先級配置，自動處理基礎路徑。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    ${rc.preload()}\n    ${rc.css()}  \x3c!-- 注入樣式表 --\x3e\n  </head>\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n  </body>\n  </html>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"css",children:["css()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"回傳值"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"生成 CSS 樣式表標籤。注入收集到的 CSS 檔案，確保樣式表按正確順序載入。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <head>\n    ${rc.css()}  \x3c!-- 注入所有收集到的樣式表 --\x3e\n  </head>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmap",children:["importmap()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmap",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"回傳值"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"生成匯入映射標籤。根據 importmapMode 配置生成內嵌或外部匯入映射。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <head>\n    ${rc.importmap()}  \x3c!-- 注入匯入映射 --\x3e\n  </head>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"moduleentry",children:["moduleEntry()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#moduleentry",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"回傳值"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"生成客戶端入口模組標籤。注入客戶端入口模組，必須在 importmap 之後執行。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}  \x3c!-- 注入客戶端入口模組 --\x3e\n  </body>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"modulepreload",children:["modulePreload()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modulepreload",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"回傳值"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"生成模組預載標籤。預載收集到的 ESM 模組，最佳化首屏載入效能。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}  \x3c!-- 預載模組依賴 --\x3e\n  </body>\n`;\n"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["zh-TW%2Fapi%2Fcore%2Frender-context.md"]={toc:[{text:"類型定義",id:"類型定義",depth:2},{text:"ServerRenderHandle",id:"serverrenderhandle",depth:3},{text:"RenderFiles",id:"renderfiles",depth:3},{text:"ImportmapMode",id:"importmapmode",depth:3},{text:"實例選項",id:"實例選項",depth:2},{text:"base",id:"base",depth:4},{text:"entryName",id:"entryname",depth:4},{text:"params",id:"params",depth:4},{text:"importmapMode",id:"importmapmode-1",depth:4},{text:"實例屬性",id:"實例屬性",depth:2},{text:"gez",id:"gez",depth:3},{text:"redirect",id:"redirect",depth:3},{text:"status",id:"status",depth:3},{text:"html",id:"html",depth:3},{text:"base",id:"base-1",depth:3},{text:"entryName",id:"entryname-1",depth:3},{text:"params",id:"params-1",depth:3},{text:"importMetaSet",id:"importmetaset",depth:3},{text:"files",id:"files",depth:3},{text:"importmapMode",id:"importmapmode-2",depth:3},{text:"實例方法",id:"實例方法",depth:2},{text:"serialize()",id:"serialize",depth:3},{text:"state()",id:"state",depth:3},{text:"commit()",id:"commit",depth:3},{text:"preload()",id:"preload",depth:3},{text:"css()",id:"css",depth:3},{text:"importmap()",id:"importmap",depth:3},{text:"moduleEntry()",id:"moduleentry",depth:3},{text:"modulePreload()",id:"modulepreload",depth:3}],title:"RenderContext",headingTitle:"RenderContext",frontmatter:{titleSuffix:"Gez 框架渲染上下文 API 參考",description:"詳細介紹 Gez 框架的 RenderContext 核心類別，包括渲染控制、資源管理、狀態同步和路由控制等功能，幫助開發者實現高效的伺服器端渲染。",head:[["meta",{property:"keywords",content:"Gez, RenderContext, SSR, 伺服器端渲染, 渲染上下文, 狀態同步, 資源管理, Web 應用框架"}]]}}}}]);