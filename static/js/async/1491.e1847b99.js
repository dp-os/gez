"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["1491"],{7843:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var t=r(1549),s=r(6603);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"客户端渲染",children:["客户端渲染",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#客户端渲染",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["客户端渲染（Client-Side Rendering，CSR）是一种在浏览器端执行页面渲染技术方案。在 Gez 中，当你的应用无法部署 Node.js 服务器实例时，可以选择在构建阶段生成静态的 ",(0,t.jsx)(n.code,{children:"index.html"})," 文件，实现纯客户端渲染。"]}),"\n",(0,t.jsxs)(n.h2,{id:"使用场景",children:["使用场景",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用场景",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"以下场景推荐使用客户端渲染："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"静态托管环境"}),"：如 GitHub Pages、CDN 等不支持服务端渲染的托管服务"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"简单应用"}),"：对首屏加载速度和 SEO 要求不高的小型应用"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"开发环境"}),"：在开发阶段快速预览和调试应用"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"配置说明",children:["配置说明",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置说明",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"html-模板配置",children:["HTML 模板配置",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html-模板配置",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在客户端渲染模式下，你需要配置一个通用的 HTML 模板。这个模板将作为应用的容器，包含必要的资源引用和挂载点。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"import type { RenderContext } from '@gez/core';\n\nexport default async (rc: RenderContext) => {\n    // 提交依赖收集\n    await rc.commit();\n    \n    // 配置 HTML 模板\n    rc.html = `\n<!DOCTYPE html>\n<html>\n<head>\n    ${rc.preload()}           // 预加载资源\n    <title>Gez</title>\n    ${rc.css()}               // 注入样式\n</head>\n<body>\n    <div id=\"app\"></div>\n    ${rc.importmap()}         // 导入映射\n    ${rc.moduleEntry()}       // 入口模块\n    ${rc.modulePreload()}     // 模块预加载\n</body>\n</html>\n`;\n};\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"静态-html-生成",children:["静态 HTML 生成",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态-html-生成",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["要在生产环境中使用客户端渲染，需要在构建阶段生成静态的 HTML 文件。Gez 提供了 ",(0,t.jsx)(n.code,{children:"postBuild"})," 钩子函数来实现这一功能："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n    async postBuild(gez) {\n        // 生成静态 HTML 文件\n        const rc = await gez.render();\n        // 写入 HTML 文件\n        gez.writeSync(\n            gez.resolvePath('dist/client', 'index.html'),\n            rc.html\n        );\n    }\n} satisfies GezOptions;\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh%2Fguide%2Fessentials%2Fcsr.md"]={toc:[{text:"使用场景",id:"使用场景",depth:2},{text:"配置说明",id:"配置说明",depth:2},{text:"HTML 模板配置",id:"html-模板配置",depth:3},{text:"静态 HTML 生成",id:"静态-html-生成",depth:3}],title:"客户端渲染",headingTitle:"客户端渲染",frontmatter:{titleSuffix:"Gez 框架客户端渲染实现指南",description:"详细介绍 Gez 框架的客户端渲染机制，包括静态构建、部署策略和最佳实践，帮助开发者在无服务器环境下实现高效的前端渲染。",head:[["meta",{property:"keywords",content:"Gez, 客户端渲染, CSR, 静态构建, 前端渲染, 无服务器部署, 性能优化"}]]}}}}]);