"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["9477"],{4439:function(n,e,s){s.r(e),s.d(e,{default:()=>l});var i=s(1549),r=s(6603);function c(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",ul:"ul",li:"li",strong:"strong",h2:"h2",pre:"pre",h3:"h3",h4:"h4"},(0,r.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"packconfig",children:["PackConfig",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#packconfig",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"PackConfig"})," は、サービスのビルド成果物を標準的な npm .tgz 形式のパッケージにパッケージングするための設定インターフェースです。"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"標準化"}),": npm 標準の .tgz パッケージ形式を使用"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"完全性"}),": モジュールのソースコード、型宣言、設定ファイルなど、必要なすべてのファイルを含む"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"互換性"}),": npm エコシステムと完全に互換性があり、標準的なパッケージ管理ワークフローをサポート"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"型定義",children:["型定義",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#型定義",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"interface PackConfig {\n    enable?: boolean;\n    outputs?: string | string[] | boolean;\n    packageJson?: (gez: Gez, pkg: Record<string, any>) => Promise<Record<string, any>>;\n    onBefore?: (gez: Gez, pkg: Record<string, any>) => Promise<void>;\n    onAfter?: (gez: Gez, pkg: Record<string, any>, file: Buffer) => Promise<void>;\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"packconfig-1",children:["PackConfig",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#packconfig-1",children:"#"})]}),"\n",(0,i.jsxs)(e.h4,{id:"enable",children:["enable",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#enable",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"パッケージング機能を有効にするかどうか。有効にすると、ビルド成果物が標準的な npm .tgz 形式のパッケージにパッケージングされます。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["型: ",(0,i.jsx)(e.code,{children:"boolean"})]}),"\n",(0,i.jsxs)(e.li,{children:["デフォルト値: ",(0,i.jsx)(e.code,{children:"false"})]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"outputs",children:["outputs",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#outputs",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"出力するパッケージファイルのパスを指定します。以下の設定方法をサポートします："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"string"}),": 単一の出力パス、例: 'dist/versions/my-app.tgz'"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"string[]"}),": 複数の出力パス、複数のバージョンを同時に生成する場合に使用"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"boolean"}),": true の場合、デフォルトのパス 'dist/client/versions/latest.tgz' を使用"]}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"packagejson",children:["packageJson",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"package.json の内容をカスタマイズするコールバック関数。パッケージング前に呼び出され、package.json の内容をカスタマイズするために使用されます。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["パラメータ:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"gez: Gez"})," - Gez インスタンス"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"pkg: any"})," - 元の package.json の内容"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["戻り値: ",(0,i.jsx)(e.code,{children:"Promise<any>"})," - 変更後の package.json の内容"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"一般的な用途:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"パッケージ名とバージョン番号の変更"}),"\n",(0,i.jsx)(e.li,{children:"依存関係の追加または更新"}),"\n",(0,i.jsx)(e.li,{children:"カスタムフィールドの追加"}),"\n",(0,i.jsx)(e.li,{children:"公開関連情報の設定"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"例:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"packageJson: async (gez, pkg) => {\n  // パッケージ情報を設定\n  pkg.name = 'my-app';\n  pkg.version = '1.0.0';\n  pkg.description = '私のアプリケーション';\n\n  // 依存関係を追加\n  pkg.dependencies = {\n    'vue': '^3.0.0',\n    'express': '^4.17.1'\n  };\n\n  // 公開設定を追加\n  pkg.publishConfig = {\n    registry: 'https://registry.example.com'\n  };\n\n  return pkg;\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"onbefore",children:["onBefore",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onbefore",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"パッケージング前の準備作業を行うコールバック関数。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["パラメータ:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"gez: Gez"})," - Gez インスタンス"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"pkg: Record<string, any>"})," - package.json の内容"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["戻り値: ",(0,i.jsx)(e.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"一般的な用途:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"追加ファイルの追加（README、LICENSE など）"}),"\n",(0,i.jsx)(e.li,{children:"テストまたはビルド検証の実行"}),"\n",(0,i.jsx)(e.li,{children:"ドキュメントまたはメタデータの生成"}),"\n",(0,i.jsx)(e.li,{children:"一時ファイルのクリーンアップ"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"例:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"onBefore: async (gez, pkg) => {\n  // ドキュメントを追加\n  await fs.writeFile('dist/README.md', '# My App');\n  await fs.writeFile('dist/LICENSE', 'MIT License');\n\n  // テストを実行\n  await runTests();\n\n  // ドキュメントを生成\n  await generateDocs();\n\n  // 一時ファイルをクリーンアップ\n  await cleanupTempFiles();\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"onafter",children:["onAfter",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onafter",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"パッケージング完了後の処理を行うコールバック関数。.tgz ファイルが生成された後に呼び出され、パッケージング成果物を処理するために使用されます。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["パラメータ:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"gez: Gez"})," - Gez インスタンス"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"pkg: Record<string, any>"})," - package.json の内容"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"file: Buffer"})," - パッケージング後のファイル内容"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["戻り値: ",(0,i.jsx)(e.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"一般的な用途:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"npm レジストリ（公開またはプライベート）への公開"}),"\n",(0,i.jsx)(e.li,{children:"静的リソースサーバーへのアップロード"}),"\n",(0,i.jsx)(e.li,{children:"バージョン管理の実行"}),"\n",(0,i.jsx)(e.li,{children:"CI/CD プロセスのトリガー"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"例:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"onAfter: async (gez, pkg, file) => {\n  // npm プライベートレジストリに公開\n  await publishToRegistry(file, {\n    registry: 'https://registry.example.com'\n  });\n\n  // 静的リソースサーバーにアップロード\n  await uploadToServer(file, 'https://assets.example.com/packages');\n\n  // バージョンタグを作成\n  await createGitTag(pkg.version);\n\n  // デプロイプロセスをトリガー\n  await triggerDeploy(pkg.version);\n}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"使用例",children:["使用例",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用例",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n  modules: {\n    // エクスポートするモジュールを設定\n    exports: [\n      'root:src/components/button.vue',\n      'root:src/utils/format.ts',\n      'npm:vue',\n      'npm:vue-router'\n    ]\n  },\n  // パッケージング設定\n  pack: {\n    // パッケージング機能を有効にする\n    enable: true,\n\n    // 複数のバージョンを同時に出力\n    outputs: [\n      'dist/versions/latest.tgz',\n      'dist/versions/1.0.0.tgz'\n    ],\n\n    // package.json をカスタマイズ\n    packageJson: async (gez, pkg) => {\n      pkg.version = '1.0.0';\n      return pkg;\n    },\n\n    // パッケージング前の準備\n    onBefore: async (gez, pkg) => {\n      // 必要なファイルを追加\n      await fs.writeFile('dist/README.md', '# Your App\\n\\nモジュールエクスポートの説明...');\n      // 型チェックを実行\n      await runTypeCheck();\n    },\n\n    // パッケージング後の処理\n    onAfter: async (gez, pkg, file) => {\n      // プライベート npm レジストリに公開\n      await publishToRegistry(file, {\n        registry: 'https://npm.your-registry.com/'\n      });\n      // または静的サーバーにデプロイ\n      await uploadToServer(file, 'https://static.example.com/packages');\n    }\n  }\n} satisfies GezOptions;\n"})})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["ja%2Fapi%2Fcore%2Fpack-config.md"]={toc:[{text:"型定義",id:"型定義",depth:2},{text:"PackConfig",id:"packconfig-1",depth:3},{text:"enable",id:"enable",depth:4},{text:"outputs",id:"outputs",depth:4},{text:"packageJson",id:"packagejson",depth:4},{text:"onBefore",id:"onbefore",depth:4},{text:"onAfter",id:"onafter",depth:4},{text:"使用例",id:"使用例",depth:2}],title:"PackConfig",headingTitle:"PackConfig",frontmatter:{titleSuffix:"Gez フレームワーク パッケージング設定 API リファレンス",description:"Gez フレームワークの PackConfig 設定インターフェースについて詳しく説明します。パッケージングルール、出力設定、ライフサイクルフックを含み、開発者が標準化されたビルドプロセスを実現するのに役立ちます。",head:[["meta",{property:"keywords",content:"Gez, PackConfig, パッケージング, ビルド設定, ライフサイクルフック, パッケージング設定, Web アプリケーションフレームワーク"}]]}}}}]);