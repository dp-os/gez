"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["3067"],{164:function(e,n,i){i.r(n),i.d(n,{default:()=>o});var s=i(1549),r=i(6603);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",code:"code",h2:"h2",h3:"h3",pre:"pre",div:"div",ol:"ol"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"path-alias",children:["Path Alias",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#path-alias",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Path Alias is a module import path mapping mechanism that allows developers to use short, semantic identifiers to replace full module paths. In Gez, the path alias mechanism offers the following advantages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simplified Import Paths"}),": Use semantic aliases to replace lengthy relative paths, improving code readability."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avoid Deep Nesting"}),": Eliminate maintenance difficulties caused by multi-level directory references (e.g., ",(0,s.jsx)(n.code,{children:"../../../../"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Safety"}),": Fully integrated with TypeScript's type system, providing code completion and type checking."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Module Resolution Optimization"}),": Improve module resolution performance through predefined path mappings."]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"default-alias-mechanism",children:["Default Alias Mechanism",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#default-alias-mechanism",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Gez adopts an automatic alias mechanism based on service names, which follows the convention-over-configuration design with the following characteristics:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic Configuration"}),": Automatically generates aliases based on the ",(0,s.jsx)(n.code,{children:"name"})," field in ",(0,s.jsx)(n.code,{children:"package.json"}),", eliminating the need for manual configuration."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unified Standard"}),": Ensures all service modules follow consistent naming and referencing conventions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Support"}),": Works with the ",(0,s.jsx)(n.code,{children:"npm run build:dts"})," command to automatically generate type declaration files, enabling cross-service type inference."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Predictability"}),": Allows inferring module reference paths from service names, reducing maintenance costs."]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"configuration-instructions",children:["Configuration Instructions",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configuration-instructions",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"packagejson-configuration",children:["package.json Configuration",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson-configuration",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"package.json"}),", define the service name using the ",(0,s.jsx)(n.code,{children:"name"})," field, which will serve as the default alias prefix for the service:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n    "name": "your-app-name"\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"tsconfigjson-configuration",children:["tsconfig.json Configuration",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tsconfigjson-configuration",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["To ensure TypeScript correctly resolves alias paths, configure the ",(0,s.jsx)(n.code,{children:"paths"})," mapping in ",(0,s.jsx)(n.code,{children:"tsconfig.json"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",meta:'title="tsconfig.json"',children:'{\n    "compilerOptions": {\n        "paths": {\n            "your-app-name/src/*": [\n                "./src/*"\n            ],\n            "your-app-name/*": [\n                "./*"\n            ]\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"usage-examples",children:["Usage Examples",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage-examples",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"importing-internal-service-modules",children:["Importing Internal Service Modules",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importing-internal-service-modules",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Using alias import\nimport { MyComponent } from 'your-app-name/src/components';\n\n// Equivalent relative path import\nimport { MyComponent } from '../components';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importing-modules-from-other-services",children:["Importing Modules from Other Services",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importing-modules-from-other-services",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Importing components from another service\nimport { SharedComponent } from 'other-service/src/components';\n\n// Importing utility functions from another service\nimport { utils } from 'other-service/src/utils';\n"})}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"Best Practices"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prefer using alias paths over relative paths."}),"\n",(0,s.jsx)(n.li,{children:"Maintain semantic and consistent alias paths."}),"\n",(0,s.jsx)(n.li,{children:"Avoid excessive directory levels in alias paths."}),"\n"]}),"\n"]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Importing components\nimport { Button } from 'your-app-name/src/components';\nimport { Layout } from 'your-app-name/src/components/layout';\n\n// Importing utility functions\nimport { formatDate } from 'your-app-name/src/utils';\nimport { request } from 'your-app-name/src/utils/request';\n\n// Importing type definitions\nimport type { UserInfo } from 'your-app-name/src/types';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"cross-service-imports",children:["Cross-Service Imports",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cross-service-imports",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"When module linking (Module Link) is configured, you can import modules from other services in the same way:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Importing components from a remote service\nimport { Header } from 'remote-service/src/components';\n\n// Importing utility functions from a remote service\nimport { logger } from 'remote-service/src/utils';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"custom-aliases",children:["Custom Aliases",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#custom-aliases",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"For third-party packages or special scenarios, you can define custom aliases through the Gez configuration file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"export default {\n    async devApp(gez) {\n        return import('@gez/rspack').then((m) =>\n            m.createApp(gez, (buildContext) => {\n                buildContext.config.resolve = {\n                    ...buildContext.config.resolve,\n                    alias: {\n                        ...buildContext.config.resolve?.alias,\n                        // Configure a specific build version for Vue\n                        'vue$': 'vue/dist/vue.esm.js',\n                        // Configure short aliases for commonly used directories\n                        '@': './src',\n                        '@components': './src/components'\n                    }\n                }\n            })\n        );\n    }\n} satisfies GezOptions;\n"})}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive warning",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"Notes"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"For business modules, it is recommended to always use the default alias mechanism to maintain project consistency."}),"\n",(0,s.jsx)(n.li,{children:"Custom aliases are primarily used for handling special requirements of third-party packages or optimizing development experience."}),"\n",(0,s.jsx)(n.li,{children:"Excessive use of custom aliases may impact code maintainability and build optimization."}),"\n"]}),"\n"]})]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let o=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["en%2Fguide%2Fessentials%2Falias.md"]={toc:[{text:"Default Alias Mechanism",id:"default-alias-mechanism",depth:2},{text:"Configuration Instructions",id:"configuration-instructions",depth:2},{text:"package.json Configuration",id:"packagejson-configuration",depth:3},{text:"tsconfig.json Configuration",id:"tsconfigjson-configuration",depth:3},{text:"Usage Examples",id:"usage-examples",depth:2},{text:"Importing Internal Service Modules",id:"importing-internal-service-modules",depth:3},{text:"Importing Modules from Other Services",id:"importing-modules-from-other-services",depth:3},{text:"Cross-Service Imports",id:"cross-service-imports",depth:3},{text:"Custom Aliases",id:"custom-aliases",depth:3}],title:"Path Alias",headingTitle:"Path Alias",frontmatter:{titleSuffix:"Gez Framework Module Import Path Mapping Guide",description:"Detailed explanation of Gez framework's path alias mechanism, including features such as simplified import paths, avoiding deep nesting, type safety, and module resolution optimization, helping developers improve code maintainability.",head:[["meta",{property:"keywords",content:"Gez, Path Alias, TypeScript, Module Import, Path Mapping, Code Maintainability"}]]}}}}]);