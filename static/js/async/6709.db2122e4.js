"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["6709"],{9297:function(e,n,i){i.r(n),i.d(n,{default:()=>l});var r=i(1549),t=i(6603);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"client-side-rendering",children:["Client-Side Rendering",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#client-side-rendering",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Client-Side Rendering (CSR) ist eine Technik, bei der das Rendering der Seite im Browser stattfindet. In Gez k\xf6nnen Sie, wenn Ihre Anwendung keine Node.js-Serverinstanz bereitstellen kann, w\xe4hrend des Build-Prozesses eine statische ",(0,r.jsx)(n.code,{children:"index.html"}),"-Datei generieren, um reines Client-Side Rendering zu erm\xf6glichen."]}),"\n",(0,r.jsxs)(n.h2,{id:"anwendungsf\\xe4lle",children:["Anwendungsf\xe4lle",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#anwendungsf\\xe4lle",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Die folgenden Szenarien empfehlen die Verwendung von Client-Side Rendering:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Statische Hosting-Umgebungen"}),": Wie GitHub Pages, CDN usw., die kein Server-Side Rendering unterst\xfctzen"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Einfache Anwendungen"}),": Kleine Anwendungen, bei denen die Ladegeschwindigkeit der ersten Seite und SEO-Anforderungen nicht hoch sind"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entwicklungsumgebung"}),": Schnelle Vorschau und Debugging der Anwendung w\xe4hrend der Entwicklungsphase"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"konfigurationsbeschreibung",children:["Konfigurationsbeschreibung",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#konfigurationsbeschreibung",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"html-vorlagenkonfiguration",children:["HTML-Vorlagenkonfiguration",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html-vorlagenkonfiguration",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Im Client-Side Rendering-Modus m\xfcssen Sie eine allgemeine HTML-Vorlage konfigurieren. Diese Vorlage dient als Container f\xfcr Ihre Anwendung und enth\xe4lt die notwendigen Ressourcenreferenzen und Mount-Punkte."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"import type { RenderContext } from '@gez/core';\n\nexport default async (rc: RenderContext) => {\n    // Abh\xe4ngigkeitssammlung abschlie\xdfen\n    await rc.commit();\n    \n    // HTML-Vorlage konfigurieren\n    rc.html = `\n<!DOCTYPE html>\n<html>\n<head>\n    ${rc.preload()}           // Ressourcen vorladen\n    <title>Gez</title>\n    ${rc.css()}               // Stile einf\xfcgen\n</head>\n<body>\n    <div id=\"app\"></div>\n    ${rc.importmap()}         // Import-Mapping\n    ${rc.moduleEntry()}       // Einstiegsmodul\n    ${rc.modulePreload()}     // Modul vorladen\n</body>\n</html>\n`;\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"statische-html-generierung",children:["Statische HTML-Generierung",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#statische-html-generierung",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Um Client-Side Rendering in der Produktionsumgebung zu verwenden, m\xfcssen Sie w\xe4hrend des Build-Prozesses eine statische HTML-Datei generieren. Gez bietet eine ",(0,r.jsx)(n.code,{children:"postBuild"}),"-Hook-Funktion, um diese Funktionalit\xe4t zu implementieren:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n    async postBuild(gez) {\n        // Statische HTML-Datei generieren\n        const rc = await gez.render();\n        // HTML-Datei schreiben\n        gez.writeSync(\n            gez.resolvePath('dist/client', 'index.html'),\n            rc.html\n        );\n    }\n} satisfies GezOptions;\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["de%2Fguide%2Fessentials%2Fcsr.md"]={toc:[{text:"Anwendungsf\xe4lle",id:"anwendungsf\xe4lle",depth:2},{text:"Konfigurationsbeschreibung",id:"konfigurationsbeschreibung",depth:2},{text:"HTML-Vorlagenkonfiguration",id:"html-vorlagenkonfiguration",depth:3},{text:"Statische HTML-Generierung",id:"statische-html-generierung",depth:3}],title:"Client-Side Rendering",headingTitle:"Client-Side Rendering",frontmatter:{titleSuffix:"Gez Framework Client-Side Rendering Implementierungsleitfaden",description:"Detaillierte Erl\xe4uterung des Client-Side Rendering-Mechanismus im Gez Framework, einschlie\xdflich statischer Builds, Bereitstellungsstrategien und Best Practices, um Entwicklern zu helfen, effizientes Frontend-Rendering in serverlosen Umgebungen zu realisieren.",head:[["meta",{property:"keywords",content:"Gez, Client-Side Rendering, CSR, Statischer Build, Frontend-Rendering, Serverlose Bereitstellung, Leistungsoptimierung"}]]}}}}]);