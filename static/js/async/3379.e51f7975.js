"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["3379"],{8815:function(e,n,s){s.r(n),s.d(n,{default:()=>c});var r=s(1549),i=s(6603);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",h4:"h4",ol:"ol",div:"div"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"gez",children:["Gez",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gez",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"简介",children:["简介",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Gez 是一个基于 Rspack 的高性能 Web 应用框架，提供了完整的应用生命周期管理、静态资源处理和服务端渲染能力。"}),"\n",(0,r.jsxs)(n.h2,{id:"类型定义",children:["类型定义",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"runtimetarget",children:["RuntimeTarget",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#runtimetarget",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型定义"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type RuntimeTarget = 'client' | 'server'\n"})}),"\n",(0,r.jsx)(n.p,{children:"应用程序运行时环境类型："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"client"}),": 运行在浏览器环境，支持 DOM 操作和浏览器 API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"server"}),": 运行在 Node.js 环境，支持文件系统和服务器端功能"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"importmap",children:["ImportMap",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmap",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型定义"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type ImportMap = {\n  imports?: SpecifierMap\n  scopes?: ScopesMap\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"ES 模块导入映射类型。"}),"\n",(0,r.jsxs)(n.h4,{id:"specifiermap",children:["SpecifierMap",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#specifiermap",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型定义"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type SpecifierMap = Record<string, string>\n"})}),"\n",(0,r.jsx)(n.p,{children:"模块标识符映射类型，用于定义模块导入路径的映射关系。"}),"\n",(0,r.jsxs)(n.h4,{id:"scopesmap",children:["ScopesMap",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#scopesmap",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型定义"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type ScopesMap = Record<string, SpecifierMap>\n"})}),"\n",(0,r.jsx)(n.p,{children:"作用域映射类型，用于定义特定作用域下的模块导入映射关系。"}),"\n",(0,r.jsxs)(n.h3,{id:"command",children:["COMMAND",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#command",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型定义"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"enum COMMAND {\n    dev = 'dev',\n    build = 'build',\n    preview = 'preview',\n    start = 'start'\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"命令类型枚举："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dev"}),": 开发环境命令，启动开发服务器并支持热更新"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"build"}),": 构建命令，生成生产环境的构建产物"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"preview"}),": 预览命令，启动本地预览服务器"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"start"}),": 启动命令，运行生产环境服务器"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"实例选项",children:["实例选项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例选项",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"定义 Gez 框架的核心配置选项。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface GezOptions {\n  root?: string\n  isProd?: boolean\n  basePathPlaceholder?: string | false\n  modules?: ModuleConfig\n  packs?: PackConfig\n  devApp?: (gez: Gez) => Promise<App>\n  server?: (gez: Gez) => Promise<void>\n  postBuild?: (gez: Gez) => Promise<void>\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"root",children:["root",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#root",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"默认值"}),": ",(0,r.jsx)(n.code,{children:"process.cwd()"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"项目根目录路径。可以是绝对路径或相对路径，相对路径基于当前工作目录解析。"}),"\n",(0,r.jsxs)(n.h4,{id:"isprod",children:["isProd",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isprod",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"默认值"}),": ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV === 'production'"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"环境标识。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"true"}),": 生产环境"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"false"}),": 开发环境"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"basepathplaceholder",children:["basePathPlaceholder",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#basepathplaceholder",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"string | false"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"默认值"}),": ",(0,r.jsx)(n.code,{children:"'[[[___GEZ_DYNAMIC_BASE___]]]'"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["基础路径占位符配置。用于运行时动态替换资源的基础路径。设置为 ",(0,r.jsx)(n.code,{children:"false"})," 可以禁用此功能。"]}),"\n",(0,r.jsxs)(n.h4,{id:"modules",children:["modules",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modules",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"ModuleConfig"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"模块配置选项。用于配置项目的模块解析规则，包括模块别名、外部依赖等配置。"}),"\n",(0,r.jsxs)(n.h4,{id:"packs",children:["packs",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packs",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"PackConfig"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"打包配置选项。用于将构建产物打包成标准的 npm .tgz 格式软件包。"}),"\n",(0,r.jsxs)(n.h4,{id:"devapp",children:["devApp",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#devapp",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"(gez: Gez) => Promise<App>"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"开发环境应用创建函数。仅在开发环境中使用，用于创建开发服务器的应用实例。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"export default {\n  async devApp(gez) {\n    return import('@gez/rspack').then((m) =>\n      m.createRspackHtmlApp(gez, {\n        config(context) {\n          // 自定义 Rspack 配置\n        }\n      })\n    )\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"server",children:["server",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#server",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"(gez: Gez) => Promise<void>"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"服务器启动配置函数。用于配置和启动 HTTP 服务器，在开发环境和生产环境中都可使用。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"export default {\n  async server(gez) {\n    const server = http.createServer((req, res) => {\n      gez.middleware(req, res, async () => {\n        const render = await gez.render({\n          params: { url: req.url }\n        });\n        res.end(render.html);\n      });\n    });\n\n    server.listen(3000);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"postbuild",children:["postBuild",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#postbuild",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"(gez: Gez) => Promise<void>"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"构建后置处理函数。在项目构建完成后执行，可用于："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"执行额外的资源处理"}),"\n",(0,r.jsx)(n.li,{children:"部署操作"}),"\n",(0,r.jsx)(n.li,{children:"生成静态文件"}),"\n",(0,r.jsx)(n.li,{children:"发送构建通知"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"实例属性",children:["实例属性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例属性",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"name",children:["name",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#name",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"当前模块的名称，来源于模块配置。"}),"\n",(0,r.jsxs)(n.h3,{id:"varname",children:["varName",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#varname",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"基于模块名生成的合法 JavaScript 变量名。"}),"\n",(0,r.jsxs)(n.h3,{id:"root-1",children:["root",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#root-1",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["项目根目录的绝对路径。如果配置的 ",(0,r.jsx)(n.code,{children:"root"})," 为相对路径，则基于当前工作目录解析。"]}),"\n",(0,r.jsxs)(n.h3,{id:"isprod-1",children:["isProd",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isprod-1",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["判断当前是否为生产环境。优先使用配置项中的 ",(0,r.jsx)(n.code,{children:"isProd"}),"，若未配置则根据 ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV"})," 判断。"]}),"\n",(0,r.jsxs)(n.h3,{id:"basepath",children:["basePath",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#basepath",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"抛出"}),": ",(0,r.jsx)(n.code,{children:"NotReadyError"})," - 框架未初始化时"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["获取以斜杠开头和结尾的模块基础路径。返回格式为 ",(0,r.jsx)(n.code,{children:"/${name}/"}),"，其中 name 来自模块配置。"]}),"\n",(0,r.jsxs)(n.h3,{id:"basepathplaceholder-1",children:["basePathPlaceholder",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#basepathplaceholder-1",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"获取用于运行时动态替换的基础路径占位符。可通过配置禁用。"}),"\n",(0,r.jsxs)(n.h3,{id:"middleware",children:["middleware",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#middleware",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"Middleware"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"获取静态资源处理中间件。根据环境提供不同实现："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"开发环境：支持源码实时编译、热更新"}),"\n",(0,r.jsx)(n.li,{children:"生产环境：支持静态资源的长期缓存"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const server = http.createServer((req, res) => {\n  gez.middleware(req, res, async () => {\n    const rc = await gez.render({ url: req.url });\n    res.end(rc.html);\n  });\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"render",children:["render",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#render",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"(options?: RenderContextOptions) => Promise<RenderContext>"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"获取服务端渲染函数。根据环境提供不同实现："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"开发环境：支持热更新和实时预览"}),"\n",(0,r.jsx)(n.li,{children:"生产环境：提供优化的渲染性能"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 基本用法\nconst rc = await gez.render({\n  params: { url: req.url }\n});\n\n// 高级配置\nconst rc = await gez.render({\n  base: '',                    // 基础路径\n  importmapMode: 'inline',     // 导入映射模式\n  entryName: 'default',        // 渲染入口\n  params: {\n    url: req.url,\n    state: { user: 'admin' }   // 状态数据\n  }\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"command-1",children:["COMMAND",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#command-1",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"typeof COMMAND"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"获取命令枚举类型定义。"}),"\n",(0,r.jsxs)(n.h3,{id:"moduleconfig",children:["moduleConfig",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#moduleconfig",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"ParsedModuleConfig"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"抛出"}),": ",(0,r.jsx)(n.code,{children:"NotReadyError"})," - 框架未初始化时"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"获取当前模块的完整配置信息，包括模块解析规则、别名配置等。"}),"\n",(0,r.jsxs)(n.h3,{id:"packconfig",children:["packConfig",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packconfig",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型"}),": ",(0,r.jsx)(n.code,{children:"ParsedPackConfig"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只读"}),": ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"抛出"}),": ",(0,r.jsx)(n.code,{children:"NotReadyError"})," - 框架未初始化时"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"获取当前模块的打包相关配置，包括输出路径、package.json 处理等。"}),"\n",(0,r.jsxs)(n.h2,{id:"实例方法",children:["实例方法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"constructor",children:["constructor()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#constructor",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"参数"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options?: GezOptions"})," - 框架配置选项"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Gez"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"创建 Gez 框架实例。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const gez = new Gez({\n  root: './src',\n  isProd: process.env.NODE_ENV === 'production'\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"init",children:["init()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#init",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"参数"}),": ",(0,r.jsx)(n.code,{children:"command: COMMAND"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"抛出"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Error"}),": 重复初始化时"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NotReadyError"}),": 访问未初始化实例时"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"初始化 Gez 框架实例。执行以下核心初始化流程："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"解析项目配置（package.json、模块配置、打包配置等）"}),"\n",(0,r.jsx)(n.li,{children:"创建应用实例（开发环境或生产环境）"}),"\n",(0,r.jsx)(n.li,{children:"根据命令执行相应的生命周期方法"}),"\n"]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive warning",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"注意"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"重复初始化时会抛出错误"}),"\n",(0,r.jsxs)(n.li,{children:["访问未初始化的实例时会抛出 ",(0,r.jsx)(n.code,{children:"NotReadyError"})]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const gez = new Gez({\n  root: './src',\n  isProd: process.env.NODE_ENV === 'production'\n});\n\nawait gez.init(COMMAND.dev);\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"destroy",children:["destroy()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#destroy",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"销毁 Gez 框架实例，执行资源清理和连接关闭等操作。主要用于："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"关闭开发服务器"}),"\n",(0,r.jsx)(n.li,{children:"清理临时文件和缓存"}),"\n",(0,r.jsx)(n.li,{children:"释放系统资源"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"process.once('SIGTERM', async () => {\n  await gez.destroy();\n  process.exit(0);\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"build",children:["build()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#build",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"执行应用程序的构建流程，包括："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"编译源代码"}),"\n",(0,r.jsx)(n.li,{children:"生成生产环境的构建产物"}),"\n",(0,r.jsx)(n.li,{children:"优化和压缩代码"}),"\n",(0,r.jsx)(n.li,{children:"生成资源清单"}),"\n"]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive warning",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"注意"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["在框架实例未初始化时调用会抛出 ",(0,r.jsx)(n.code,{children:"NotReadyError"}),"\n"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"export default {\n  async postBuild(gez) {\n    await gez.build();\n    // 构建完成后生成静态 HTML\n    const render = await gez.render({\n      params: { url: '/' }\n    });\n    gez.writeSync(\n      gez.resolvePath('dist/client', 'index.html'),\n      render.html\n    );\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"server-1",children:["server()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#server-1",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"抛出"}),": ",(0,r.jsx)(n.code,{children:"NotReadyError"})," - 框架未初始化时"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"启动 HTTP 服务器和配置服务器实例。在以下生命周期中被调用："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"开发环境（dev）：启动开发服务器，提供热更新"}),"\n",(0,r.jsx)(n.li,{children:"生产环境（start）：启动生产服务器，提供生产级性能"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"export default {\n  async server(gez) {\n    const server = http.createServer((req, res) => {\n      // 处理静态资源\n      gez.middleware(req, res, async () => {\n        // 服务端渲染\n        const render = await gez.render({\n          params: { url: req.url }\n        });\n        res.end(render.html);\n      });\n    });\n\n    server.listen(3000, () => {\n      console.log('Server running at http://localhost:3000');\n    });\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"postbuild-1",children:["postBuild()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#postbuild-1",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"执行构建后的处理逻辑，用于："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"生成静态 HTML 文件"}),"\n",(0,r.jsx)(n.li,{children:"处理构建产物"}),"\n",(0,r.jsx)(n.li,{children:"执行部署任务"}),"\n",(0,r.jsx)(n.li,{children:"发送构建通知"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"export default {\n  async postBuild(gez) {\n    // 生成多个页面的静态 HTML\n    const pages = ['/', '/about', '/404'];\n\n    for (const url of pages) {\n      const render = await gez.render({\n        params: { url }\n      });\n\n      await gez.write(\n        gez.resolvePath('dist/client', url.substring(1), 'index.html'),\n        render.html\n      );\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"resolvepath",children:["resolvePath",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#resolvepath",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"解析项目路径，将相对路径转换为绝对路径。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"参数"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"projectPath: ProjectPath"})," - 项目路径类型"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"...args: string[]"})," - 路径片段"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"string"})," - 解析后的绝对路径"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"示例"}),":"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 解析静态资源路径\nconst htmlPath = gez.resolvePath('dist/client', 'index.html');\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"writesync",children:["writeSync()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#writesync",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"同步写入文件内容。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"参数"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filepath"}),": ",(0,r.jsx)(n.code,{children:"string"})," - 文件的绝对路径"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data"}),": ",(0,r.jsx)(n.code,{children:"any"})," - 要写入的数据，可以是字符串、Buffer 或对象"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"boolean"})," - 写入是否成功"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"示例"}),":"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"\nasync postBuild(gez) {\n  const htmlPath = gez.resolvePath('dist/client', 'index.html');\n  const success = await gez.write(htmlPath, '<html>...</html>');\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"readjsonsync",children:["readJsonSync()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#readjsonsync",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"同步读取并解析 JSON 文件。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"参数"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filename"}),": ",(0,r.jsx)(n.code,{children:"string"})," - JSON 文件的绝对路径"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"any"})," - 解析后的 JSON 对象"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"异常"}),": 当文件不存在或 JSON 格式错误时抛出异常"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"示例"}),":"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"async server(gez) {\n  const manifest = gez.readJsonSync(gez.resolvePath('dist/client', 'manifest.json'));\n  // 使用 manifest 对象\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"readjson",children:["readJson()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#readjson",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"异步读取并解析 JSON 文件。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"参数"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filename"}),": ",(0,r.jsx)(n.code,{children:"string"})," - JSON 文件的绝对路径"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Promise<any>"})," - 解析后的 JSON 对象"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"异常"}),": 当文件不存在或 JSON 格式错误时抛出异常"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"示例"}),":"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"async server(gez) {\n  const manifest = await gez.readJson(gez.resolvePath('dist/client', 'manifest.json'));\n  // 使用 manifest 对象\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"getmanifestlist",children:["getManifestList()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getmanifestlist",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"获取构建清单列表。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"参数"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target"}),": ",(0,r.jsx)(n.code,{children:"RuntimeTarget"})," - 目标环境类型","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'client'"}),": 客户端环境"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'server'"}),": 服务端环境"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Promise<readonly ManifestJson[]>"})," - 只读的构建清单列表"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"异常"}),": 在框架实例未初始化时抛出 ",(0,r.jsx)(n.code,{children:"NotReadyError"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"该方法用于获取指定目标环境的构建清单列表，包含以下功能："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"缓存管理"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"使用内部缓存机制避免重复加载"}),"\n",(0,r.jsx)(n.li,{children:"返回不可变的清单列表"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"环境适配"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"支持客户端和服务端两种环境"}),"\n",(0,r.jsx)(n.li,{children:"根据目标环境返回对应的清单信息"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"模块映射"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"包含模块导出信息"}),"\n",(0,r.jsx)(n.li,{children:"记录资源依赖关系"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"示例"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"async server(gez) {\n  // 获取客户端构建清单\n  const manifests = await gez.getManifestList('client');\n\n  // 查找特定模块的构建信息\n  const appModule = manifests.find(m => m.name === 'my-app');\n  if (appModule) {\n    console.log('App exports:', appModule.exports);\n    console.log('App chunks:', appModule.chunks);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"getimportmap",children:["getImportMap()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getimportmap",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"获取导入映射对象。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"参数"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target"}),": ",(0,r.jsx)(n.code,{children:"RuntimeTarget"})," - 目标环境类型","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'client'"}),": 生成浏览器环境的导入映射"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'server'"}),": 生成服务端环境的导入映射"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Promise<Readonly<ImportMap>>"})," - 只读的导入映射对象"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"异常"}),": 在框架实例未初始化时抛出 ",(0,r.jsx)(n.code,{children:"NotReadyError"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"该方法用于生成 ES 模块导入映射（Import Map），具有以下特点："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"模块解析"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"基于构建清单生成模块映射"}),"\n",(0,r.jsx)(n.li,{children:"支持客户端和服务端两种环境"}),"\n",(0,r.jsx)(n.li,{children:"自动处理模块路径解析"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"缓存优化"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"使用内部缓存机制"}),"\n",(0,r.jsx)(n.li,{children:"返回不可变的映射对象"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"路径处理"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"自动处理模块路径"}),"\n",(0,r.jsx)(n.li,{children:"支持动态基础路径"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"示例"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"async server(gez) {\n  // 获取客户端导入映射\n  const importmap = await gez.getImportMap('client');\n\n  // 自定义 HTML 模板\n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <script type=\"importmap\">\n        ${JSON.stringify(importmap)}\n      <\/script>\n    </head>\n    <body>\n      \x3c!-- 页面内容 --\x3e\n    </body>\n    </html>\n  `;\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"getimportmapclientinfo",children:["getImportMapClientInfo()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getimportmapclientinfo",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"获取客户端导入映射信息。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"参数"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mode"}),": ",(0,r.jsx)(n.code,{children:"ImportmapMode"})," - 导入映射模式","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'inline'"}),": 内联模式，返回 HTML script 标签"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'js'"}),": JS 文件模式，返回带有文件路径的信息"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["JS 文件模式:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"{\n  src: string;      // JS 文件的 URL\n  filepath: string;  // JS 文件的本地路径\n  code: string;      // HTML script 标签内容\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["内联模式:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"{\n  src: null;\n  filepath: null;\n  code: string;      // HTML script 标签内容\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"异常"}),": 在框架实例未初始化时抛出 ",(0,r.jsx)(n.code,{children:"NotReadyError"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"该方法用于生成客户端环境的导入映射代码，支持两种模式："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"内联模式 (inline)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"将导入映射直接内联到 HTML 中"}),"\n",(0,r.jsx)(n.li,{children:"减少额外的网络请求"}),"\n",(0,r.jsx)(n.li,{children:"适合导入映射较小的场景"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"JS 文件模式 (js)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"生成独立的 JS 文件"}),"\n",(0,r.jsx)(n.li,{children:"支持浏览器缓存"}),"\n",(0,r.jsx)(n.li,{children:"适合导入映射较大的场景"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"核心功能："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"自动处理动态基础路径"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"支持模块路径运行时替换"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"优化缓存策略"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"确保模块加载顺序"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"示例"}),":"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"async server(gez) {\n  const server = express();\n  server.use(gez.middleware);\n\n  server.get('*', async (req, res) => {\n    // 使用 JS 文件模式\n    const result = await gez.render({\n      importmapMode: 'js',\n      params: { url: req.url }\n    });\n    res.send(result.html);\n  });\n\n  // 或者使用内联模式\n  server.get('/inline', async (req, res) => {\n    const result = await gez.render({\n      importmapMode: 'inline',\n      params: { url: req.url }\n    });\n    res.send(result.html);\n  });\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"getstaticimportpaths",children:["getStaticImportPaths()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getstaticimportpaths",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"获取模块的静态导入路径列表。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"参数"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target"}),": ",(0,r.jsx)(n.code,{children:"RuntimeTarget"})," - 构建目标","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'client'"}),": 客户端环境"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'server'"}),": 服务端环境"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"specifier"}),": ",(0,r.jsx)(n.code,{children:"string"})," - 模块标识符"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"返回值"}),": ",(0,r.jsx)(n.code,{children:"Promise<readonly string[] | null>"})," - 返回静态导入路径列表，如果未找到则返回 null"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"异常"}),": 在框架实例未初始化时抛出 ",(0,r.jsx)(n.code,{children:"NotReadyError"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"示例"}),":"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 获取客户端入口模块的静态导入路径\nconst paths = await gez.getStaticImportPaths(\n  'client',\n  `your-app-name/src/entry.client`\n);\n"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["zh%2Fapi%2Fcore%2Fgez.md"]={toc:[{text:"简介",id:"简介",depth:2},{text:"类型定义",id:"类型定义",depth:2},{text:"RuntimeTarget",id:"runtimetarget",depth:3},{text:"ImportMap",id:"importmap",depth:3},{text:"SpecifierMap",id:"specifiermap",depth:4},{text:"ScopesMap",id:"scopesmap",depth:4},{text:"COMMAND",id:"command",depth:3},{text:"实例选项",id:"实例选项",depth:2},{text:"root",id:"root",depth:4},{text:"isProd",id:"isprod",depth:4},{text:"basePathPlaceholder",id:"basepathplaceholder",depth:4},{text:"modules",id:"modules",depth:4},{text:"packs",id:"packs",depth:4},{text:"devApp",id:"devapp",depth:4},{text:"server",id:"server",depth:4},{text:"postBuild",id:"postbuild",depth:4},{text:"实例属性",id:"实例属性",depth:2},{text:"name",id:"name",depth:3},{text:"varName",id:"varname",depth:3},{text:"root",id:"root-1",depth:3},{text:"isProd",id:"isprod-1",depth:3},{text:"basePath",id:"basepath",depth:3},{text:"basePathPlaceholder",id:"basepathplaceholder-1",depth:3},{text:"middleware",id:"middleware",depth:3},{text:"render",id:"render",depth:3},{text:"COMMAND",id:"command-1",depth:3},{text:"moduleConfig",id:"moduleconfig",depth:3},{text:"packConfig",id:"packconfig",depth:3},{text:"实例方法",id:"实例方法",depth:2},{text:"constructor()",id:"constructor",depth:3},{text:"init()",id:"init",depth:3},{text:"destroy()",id:"destroy",depth:3},{text:"build()",id:"build",depth:3},{text:"server()",id:"server-1",depth:3},{text:"postBuild()",id:"postbuild-1",depth:3},{text:"resolvePath",id:"resolvepath",depth:3},{text:"writeSync()",id:"writesync",depth:3},{text:"readJsonSync()",id:"readjsonsync",depth:3},{text:"readJson()",id:"readjson",depth:3},{text:"getManifestList()",id:"getmanifestlist",depth:3},{text:"getImportMap()",id:"getimportmap",depth:3},{text:"getImportMapClientInfo()",id:"getimportmapclientinfo",depth:3},{text:"getStaticImportPaths()",id:"getstaticimportpaths",depth:3}],title:"Gez",headingTitle:"Gez",frontmatter:{titleSuffix:"框架核心类 API 参考",description:"详细介绍 Gez 框架的核心类 API，包括应用生命周期管理、静态资源处理和服务端渲染能力，帮助开发者深入理解框架的核心功能。",head:[["meta",{property:"keywords",content:"Gez, API, 生命周期管理, 静态资源, 服务端渲染, Rspack, Web 应用框架"}]]}}}}]);