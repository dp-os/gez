"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["1921"],{8031:function(e,n,i){i.r(n),i.d(n,{default:()=>d});var r=i(1549),s=i(6603);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",code:"code",h2:"h2",h3:"h3",pre:"pre",div:"div",ol:"ol"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"pfadalias",children:["Pfadalias",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pfadalias",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Pfadalias (Path Alias) ist ein Mechanismus zur Zuordnung von Modulimportpfaden, der es Entwicklern erm\xf6glicht, kurze, semantische Bezeichner anstelle vollst\xe4ndiger Modulpfade zu verwenden. Im Gez-Framework bietet der Pfadaliasmechanismus folgende Vorteile:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vereinfachung von Importpfaden"}),": Verwendung semantischer Aliase anstelle langer relativer Pfade, um die Lesbarkeit des Codes zu verbessern"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vermeidung von tief verschachtelten Pfaden"}),": Beseitigung von Wartungsschwierigkeiten durch mehrstufige Verzeichnisreferenzen (z.B. ",(0,r.jsx)(n.code,{children:"../../../../"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Typsicherheit"}),": Vollst\xe4ndige Integration in das TypeScript-Typsystem, bietet Code-Vervollst\xe4ndigung und Typpr\xfcfung"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modulaufl\xf6sungsoptimierung"}),": Verbesserung der Modulaufl\xf6sungsleistung durch vordefinierte Pfadzuordnungen"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"standard-aliasmechanismus",children:["Standard-Aliasmechanismus",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#standard-aliasmechanismus",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Gez verwendet einen automatischen Aliasmechanismus basierend auf dem Dienstnamen (Service Name). Dieser konfigurationsfreie Ansatz bietet folgende Merkmale:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automatische Konfiguration"}),": Basierend auf dem ",(0,r.jsx)(n.code,{children:"name"}),"-Feld in der ",(0,r.jsx)(n.code,{children:"package.json"})," wird automatisch ein Alias generiert, ohne manuelle Konfiguration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Einheitliche Standards"}),": Sicherstellung, dass alle Dienstmodule einheitlichen Namens- und Referenzstandards folgen"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Typunterst\xfctzung"}),": In Kombination mit dem Befehl ",(0,r.jsx)(n.code,{children:"npm run build:dts"})," werden automatisch Typdeklarationsdateien generiert, um typsichere Verweise zwischen Diensten zu erm\xf6glichen"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vorhersagbarkeit"}),": Der Modulreferenzpfad kann anhand des Dienstnamens abgeleitet werden, was die Wartungskosten senkt"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"konfigurationsanleitung",children:["Konfigurationsanleitung",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#konfigurationsanleitung",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"packagejson-konfiguration",children:["package.json Konfiguration",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson-konfiguration",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["In der ",(0,r.jsx)(n.code,{children:"package.json"})," wird der Dienstname \xfcber das ",(0,r.jsx)(n.code,{children:"name"}),"-Feld definiert. Dieser Name dient als Standardaliaspr\xe4fix f\xfcr den Dienst:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n    "name": "your-app-name"\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"tsconfigjson-konfiguration",children:["tsconfig.json Konfiguration",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tsconfigjson-konfiguration",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Damit TypeScript die Aliaspfade korrekt aufl\xf6sen kann, muss die ",(0,r.jsx)(n.code,{children:"paths"}),"-Zuordnung in der ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," konfiguriert werden:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="tsconfig.json"',children:'{\n    "compilerOptions": {\n        "paths": {\n            "your-app-name/src/*": [\n                "./src/*"\n            ],\n            "your-app-name/*": [\n                "./*"\n            ]\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"anwendungsbeispiele",children:["Anwendungsbeispiele",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#anwendungsbeispiele",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"import-von-dienst-internen-modulen",children:["Import von Dienst-internen Modulen",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#import-von-dienst-internen-modulen",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Verwendung eines Alias f\xfcr den Import\nimport { MyComponent } from 'your-app-name/src/components';\n\n// \xc4quivalenter Import mit relativem Pfad\nimport { MyComponent } from '../components';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"import-von-modulen-anderer-dienste",children:["Import von Modulen anderer Dienste",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#import-von-modulen-anderer-dienste",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Import einer Komponente aus einem anderen Dienst\nimport { SharedComponent } from 'other-service/src/components';\n\n// Import einer Utility-Funktion aus einem anderen Dienst\nimport { utils } from 'other-service/src/utils';\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"Best Practices"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Bevorzugen Sie Aliaspfade gegen\xfcber relativen Pfaden"}),"\n",(0,r.jsx)(n.li,{children:"Halten Sie Aliaspfade semantisch und konsistent"}),"\n",(0,r.jsx)(n.li,{children:"Vermeiden Sie zu viele Verzeichnisebenen in Aliaspfaden"}),"\n"]}),"\n"]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Import von Komponenten\nimport { Button } from 'your-app-name/src/components';\nimport { Layout } from 'your-app-name/src/components/layout';\n\n// Import von Utility-Funktionen\nimport { formatDate } from 'your-app-name/src/utils';\nimport { request } from 'your-app-name/src/utils/request';\n\n// Import von Typdefinitionen\nimport type { UserInfo } from 'your-app-name/src/types';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"import-\\xfcber-dienste-hinweg",children:["Import \xfcber Dienste hinweg",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#import-\\xfcber-dienste-hinweg",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Wenn Modulverkn\xfcpfungen (Module Links) konfiguriert sind, k\xf6nnen Module anderer Dienste auf die gleiche Weise importiert werden:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Import einer Komponente aus einem Remote-Dienst\nimport { Header } from 'remote-service/src/components';\n\n// Import einer Utility-Funktion aus einem Remote-Dienst\nimport { logger } from 'remote-service/src/utils';\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"benutzerdefinierte-aliase",children:["Benutzerdefinierte Aliase",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#benutzerdefinierte-aliase",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"F\xfcr Drittanbieterpakete oder spezielle Szenarien k\xf6nnen benutzerdefinierte Aliase \xfcber die Gez-Konfigurationsdatei festgelegt werden:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"export default {\n    async devApp(gez) {\n        return import('@gez/rspack').then((m) =>\n            m.createApp(gez, (buildContext) => {\n                buildContext.config.resolve = {\n                    ...buildContext.config.resolve,\n                    alias: {\n                        ...buildContext.config.resolve?.alias,\n                        // Spezifische Build-Version f\xfcr Vue konfigurieren\n                        'vue$': 'vue/dist/vue.esm.js',\n                        // Kurze Aliase f\xfcr h\xe4ufig verwendete Verzeichnisse\n                        '@': './src',\n                        '@components': './src/components'\n                    }\n                }\n            })\n        );\n    }\n} satisfies GezOptions;\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive warning",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"Hinweise"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"F\xfcr Gesch\xe4ftsmodule wird empfohlen, immer den Standard-Aliasmechanismus zu verwenden, um die Konsistenz des Projekts zu gew\xe4hrleisten"}),"\n",(0,r.jsx)(n.li,{children:"Benutzerdefinierte Aliase sollten haupts\xe4chlich f\xfcr spezielle Anforderungen von Drittanbieterpaketen oder zur Optimierung der Entwicklungserfahrung verwendet werden"}),"\n",(0,r.jsx)(n.li,{children:"\xdcberm\xe4\xdfige Verwendung von benutzerdefinierten Aliasen kann die Wartbarkeit des Codes und die Build-Optimierung beeintr\xe4chtigen"}),"\n"]}),"\n"]})]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let d=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["de%2Fguide%2Fessentials%2Falias.md"]={toc:[{text:"Standard-Aliasmechanismus",id:"standard-aliasmechanismus",depth:2},{text:"Konfigurationsanleitung",id:"konfigurationsanleitung",depth:2},{text:"package.json Konfiguration",id:"packagejson-konfiguration",depth:3},{text:"tsconfig.json Konfiguration",id:"tsconfigjson-konfiguration",depth:3},{text:"Anwendungsbeispiele",id:"anwendungsbeispiele",depth:2},{text:"Import von Dienst-internen Modulen",id:"import-von-dienst-internen-modulen",depth:3},{text:"Import von Modulen anderer Dienste",id:"import-von-modulen-anderer-dienste",depth:3},{text:"Import \xfcber Dienste hinweg",id:"import-\xfcber-dienste-hinweg",depth:3},{text:"Benutzerdefinierte Aliase",id:"benutzerdefinierte-aliase",depth:3}],title:"Pfadalias",headingTitle:"Pfadalias",frontmatter:{titleSuffix:"Gez Framework - Leitfaden zur Pfadaliaskonfiguration",description:"Detaillierte Erl\xe4uterung des Pfadaliasmechanismus im Gez-Framework, einschlie\xdflich der Vereinfachung von Importpfaden, Vermeidung von tief verschachtelten Pfaden, Typsicherheit und Modulaufl\xf6sungsoptimierung, um die Wartbarkeit des Codes zu verbessern.",head:[["meta",{property:"keywords",content:"Gez, Pfadalias, Path Alias, TypeScript, Modulimport, Pfadzuordnung, Code-Wartbarkeit"}]]}}}}]);