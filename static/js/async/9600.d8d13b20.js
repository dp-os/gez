"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["9600"],{6986:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var s=r(1549),i=r(6603);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",h2:"h2",h3:"h3",pre:"pre",code:"code",h4:"h4"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"rendercontext",children:["RenderContext",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rendercontext",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"RenderContext is the core class in the Gez framework, responsible for managing the complete lifecycle of server-side rendering (SSR). It provides a comprehensive API to handle key tasks such as rendering context, resource management, and state synchronization:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rendering Control"}),": Manages the server-side rendering process, supporting scenarios like multi-entry rendering and conditional rendering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Management"}),": Intelligently collects and injects static resources like JS and CSS to optimize loading performance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Synchronization"}),": Handles server-side state serialization to ensure proper client-side hydration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Routing Control"}),": Supports advanced features like server-side redirection and status code setting"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"type-definitions",children:["Type Definitions",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#type-definitions",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"serverrenderhandle",children:["ServerRenderHandle",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#serverrenderhandle",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Type definition for server-side rendering handler functions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type ServerRenderHandle = (rc: RenderContext) => Promise<void> | void;\n"})}),"\n",(0,s.jsx)(n.p,{children:"A server-side rendering handler function is an asynchronous or synchronous function that takes a RenderContext instance as a parameter, used to handle server-side rendering logic."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 1. Asynchronous handler\nexport default async (rc: RenderContext) => {\n  const app = createApp();\n  const html = await renderToString(app);\n  rc.html = html;\n};\n\n// 2. Synchronous handler\nexport const simple = (rc: RenderContext) => {\n  rc.html = '<h1>Hello World</h1>';\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"renderfiles",children:["RenderFiles",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#renderfiles",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Type definition for the list of resource files collected during rendering."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface RenderFiles {\n  js: string[];\n  css: string[];\n  modulepreload: string[];\n  resources: string[];\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"js"}),": List of JavaScript files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"css"}),": List of stylesheet files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"modulepreload"}),": List of ESM modules to be preloaded"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"resources"}),": List of other resource files (images, fonts, etc.)"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Example of resource file list\nrc.files = {\n  js: [\n    '/assets/entry-client.js',\n    '/assets/vendor.js'\n  ],\n  css: [\n    '/assets/main.css',\n    '/assets/vendor.css'\n  ],\n  modulepreload: [\n    '/assets/Home.js',\n    '/assets/About.js'\n  ],\n  resources: [\n    '/assets/logo.png',\n    '/assets/font.woff2'\n  ]\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmapmode",children:["ImportmapMode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Defines the generation mode for importmap."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type ImportmapMode = 'inline' | 'js';\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"inline"}),": Inlines the importmap content directly into the HTML, suitable for:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reducing the number of HTTP requests"}),"\n",(0,s.jsx)(n.li,{children:"When importmap content is small"}),"\n",(0,s.jsx)(n.li,{children:"When first-screen loading performance is critical"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"js"}),": Generates importmap content as a separate JS file, suitable for:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When importmap content is large"}),"\n",(0,s.jsx)(n.li,{children:"When leveraging browser caching mechanisms"}),"\n",(0,s.jsx)(n.li,{children:"When multiple pages share the same importmap"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Rendering context class, responsible for resource management and HTML generation during server-side rendering (SSR)."}),"\n",(0,s.jsxs)(n.h2,{id:"instance-options",children:["Instance Options",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#instance-options",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Defines configuration options for the rendering context."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface RenderContextOptions {\n  base?: string\n  entryName?: string\n  params?: Record<string, any>\n  importmapMode?: ImportmapMode\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"base",children:["base",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#base",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Base path for static resources."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All static resources (JS, CSS, images, etc.) will be loaded based on this path"}),"\n",(0,s.jsx)(n.li,{children:"Supports runtime dynamic configuration without rebuilding"}),"\n",(0,s.jsx)(n.li,{children:"Commonly used in multi-language sites, micro-frontend applications, etc."}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"entryname",children:["entryName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryname",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"'default'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Server-side rendering entry function name. Used to specify the entry function for server-side rendering when a module exports multiple rendering functions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"export const mobile = async (rc: RenderContext) => {\n  // Mobile rendering logic\n};\n\nexport const desktop = async (rc: RenderContext) => {\n  // Desktop rendering logic\n};\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"params",children:["params",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#params",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"Record<string, any>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Rendering parameters. Can pass any type of parameters to the rendering function, commonly used to pass request information (URL, query parameters, etc.)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const rc = await gez.render({\n  params: {\n    url: req.url,\n    lang: 'zh-CN',\n    theme: 'dark'\n  }\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"importmapmode-1",children:["importmapMode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"'inline' | 'js'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"'inline'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Import Map generation mode:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"inline"}),": Inlines the importmap content directly into the HTML"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"js"}),": Generates importmap content as a separate JS file"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"instance-properties",children:["Instance Properties",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#instance-properties",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"gez",children:["gez",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gez",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"Gez"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read-only"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Reference to the Gez instance. Used to access core framework functionality and configuration information."}),"\n",(0,s.jsxs)(n.h3,{id:"redirect",children:["redirect",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redirect",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"string | null"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Redirection address. When set, the server can perform HTTP redirection based on this value, commonly used in login verification, permission control, etc."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// Login verification example\nexport default async (rc: RenderContext) => {\n  if (!isLoggedIn()) {\n    rc.redirect = '/login';\n    rc.status = 302;\n    return;\n  }\n  // Continue rendering the page...\n};\n\n// Permission control example\nexport default async (rc: RenderContext) => {\n  if (!hasPermission()) {\n    rc.redirect = '/403';\n    rc.status = 403;\n    return;\n  }\n  // Continue rendering the page...\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"status",children:["status",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#status",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"number | null"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"HTTP response status code. Can set any valid HTTP status code, commonly used in error handling, redirection, etc."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// 404 error handling example\nexport default async (rc: RenderContext) => {\n  const page = await findPage(rc.params.url);\n  if (!page) {\n    rc.status = 404;\n    // Render 404 page...\n    return;\n  }\n  // Continue rendering the page...\n};\n\n// Temporary redirection example\nexport default async (rc: RenderContext) => {\n  if (needMaintenance()) {\n    rc.redirect = '/maintenance';\n    rc.status = 307; // Temporary redirect, keeping the request method unchanged\n    return;\n  }\n  // Continue rendering the page...\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"html",children:["html",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"HTML content. Used to set and get the final generated HTML content, automatically handling base path placeholders when setting."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// Basic usage\nexport default async (rc: RenderContext) => {\n  // Set HTML content\n  rc.html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        ${rc.preload()}\n        ${rc.css()}\n      </head>\n      <body>\n        <div id=\"app\">Hello World</div>\n        ${rc.importmap()}\n        ${rc.moduleEntry()}\n        ${rc.modulePreload()}\n      </body>\n    </html>\n  `;\n};\n\n// Dynamic base path\nconst rc = await gez.render({\n  base: '/app',  // Set base path\n  params: { url: req.url }\n});\n\n// Placeholders in HTML will be automatically replaced:\n// [[[___GEZ_DYNAMIC_BASE___]]]/your-app-name/css/style.css\n// Replaced with:\n// /app/your-app-name/css/style.css\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"base-1",children:["base",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#base-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read-only"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"''"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Base path for static resources. All static resources (JS, CSS, images, etc.) will be loaded based on this path, supporting runtime dynamic configuration."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Basic usage\nconst rc = await gez.render({\n  base: '/gez',  // Set base path\n  params: { url: req.url }\n});\n\n// Multi-language site example\nconst rc = await gez.render({\n  base: '/cn',  // Chinese site\n  params: { lang: 'zh-CN' }\n});\n\n// Micro-frontend application example\nconst rc = await gez.render({\n  base: '/app1',  // Sub-application 1\n  params: { appId: 1 }\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"entryname-1",children:["entryName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entryname-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read-only"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"'default'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Server-side rendering entry function name. Used to select the rendering function to use from entry.server.ts."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"// Default entry function\nexport default async (rc: RenderContext) => {\n  // Default rendering logic\n};\n\n// Multiple entry functions\nexport const mobile = async (rc: RenderContext) => {\n  // Mobile rendering logic\n};\n\nexport const desktop = async (rc: RenderContext) => {\n  // Desktop rendering logic\n};\n\n// Select entry function based on device type\nconst rc = await gez.render({\n  entryName: isMobile ? 'mobile' : 'desktop',\n  params: { url: req.url }\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"params-1",children:["params",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#params-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"Record<string, any>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read-only"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Rendering parameters. Can pass and access parameters during server-side rendering, commonly used to pass request information, page configuration, etc."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Basic usage - passing URL and language settings\nconst rc = await gez.render({\n  params: {\n    url: req.url,\n    lang: 'zh-CN'\n  }\n});\n\n// Page configuration - setting theme and layout\nconst rc = await gez.render({\n  params: {\n    theme: 'dark',\n    layout: 'sidebar'\n  }\n});\n\n// Environment configuration - injecting API address\nconst rc = await gez.render({\n  params: {\n    apiBaseUrl: process.env.API_BASE_URL,\n    version: '1.0.0'\n  }\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmetaset",children:["importMetaSet",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaset",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"Set<ImportMeta>"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Module dependency collection set. Automatically tracks and records module dependencies during component rendering, only collecting resources actually used during the current page rendering."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Basic usage\nconst renderToString = (app: any, context: { importMetaSet: Set<ImportMeta> }) => {\n  // Automatically collects module dependencies during rendering\n  // The framework automatically calls context.importMetaSet.add(import.meta) during component rendering\n  // Developers do not need to manually handle dependency collection\n  return '<div id=\"app\">Hello World</div>';\n};\n\n// Usage example\nconst app = createApp();\nconst html = await renderToString(app, {\n  importMetaSet: rc.importMetaSet\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"files",children:["files",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#files",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"RenderFiles"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"List of resource files:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"js: List of JavaScript files"}),"\n",(0,s.jsx)(n.li,{children:"css: List of stylesheet files"}),"\n",(0,s.jsx)(n.li,{children:"modulepreload: List of ESM modules to be preloaded"}),"\n",(0,s.jsx)(n.li,{children:"resources: List of other resource files (images, fonts, etc.)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Resource collection\nawait rc.commit();\n\n// Resource injection\nrc.html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    \x3c!-- Preload resources --\x3e\n    ${rc.preload()}\n    \x3c!-- Inject stylesheets --\x3e\n    ${rc.css()}\n  </head>\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n  </body>\n  </html>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmapmode-2",children:["importmapMode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmapmode-2",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": ",(0,s.jsx)(n.code,{children:"'inline' | 'js'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default"}),": ",(0,s.jsx)(n.code,{children:"'inline'"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Import Map generation mode:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"inline"}),": Inlines the importmap content directly into the HTML"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"js"}),": Generates importmap content as a separate JS file"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"instance-methods",children:["Instance Methods",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#instance-methods",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"serialize",children:["serialize()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#serialize",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"input: any"})," - Data to be serialized"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"options?: serialize.SerializeJSOptions"})," - Serialization options"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Serializes a JavaScript object into a string. Used to serialize state data during server-side rendering, ensuring data can be safely embedded into HTML."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const state = {\n  user: { id: 1, name: 'Alice' },\n  timestamp: new Date()\n};\n\nrc.html = `\n  <script>\n    window.__INITIAL_STATE__ = ${rc.serialize(state)};\n  <\/script>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"state",children:["state()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#state",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"varName: string"})," - Variable name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data: Record<string, any>"})," - State data"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Serializes and injects state data into HTML. Uses safe serialization methods to handle data, supporting complex data structures."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const userInfo = {\n  id: 1,\n  name: 'John',\n  roles: ['admin']\n};\n\nrc.html = `\n  <head>\n    ${rc.state('__USER__', userInfo)}\n  </head>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"commit",children:["commit()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commit",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),": ",(0,s.jsx)(n.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Commits dependency collection and updates the resource list. Collects all used modules from importMetaSet, parsing each module's specific resources based on the manifest file."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Render and commit dependencies\nconst html = await renderToString(app, {\n  importMetaSet: rc.importMetaSet\n});\n\n// Commit dependency collection\nawait rc.commit();\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"preload",children:["preload()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#preload",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Generates resource preload tags. Used to preload CSS and JavaScript resources, supports priority configuration, and automatically handles base paths."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    ${rc.preload()}\n    ${rc.css()}  \x3c!-- Inject stylesheets --\x3e\n  </head>\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}\n  </body>\n  </html>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"css",children:["css()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Generates CSS stylesheet tags. Injects collected CSS files, ensuring stylesheets are loaded in the correct order."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <head>\n    ${rc.css()}  \x3c!-- Inject all collected stylesheets --\x3e\n  </head>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"importmap",children:["importmap()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmap",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Generates import map tags. Generates inline or external import maps based on importmapMode configuration."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <head>\n    ${rc.importmap()}  \x3c!-- Inject import map --\x3e\n  </head>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"moduleentry",children:["moduleEntry()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#moduleentry",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Generates client entry module tags. Injects the client entry module, must be executed after importmap."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}  \x3c!-- Inject client entry module --\x3e\n  </body>\n`;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"modulepreload",children:["modulePreload()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modulepreload",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Generates module preload tags. Preloads collected ESM modules, optimizing first-screen loading performance."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rc.html = `\n  <body>\n    ${html}\n    ${rc.importmap()}\n    ${rc.moduleEntry()}\n    ${rc.modulePreload()}  \x3c!-- Preload module dependencies --\x3e\n  </body>\n`;\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["en%2Fapi%2Fcore%2Frender-context.md"]={toc:[{text:"Type Definitions",id:"type-definitions",depth:2},{text:"ServerRenderHandle",id:"serverrenderhandle",depth:3},{text:"RenderFiles",id:"renderfiles",depth:3},{text:"ImportmapMode",id:"importmapmode",depth:3},{text:"Instance Options",id:"instance-options",depth:2},{text:"base",id:"base",depth:4},{text:"entryName",id:"entryname",depth:4},{text:"params",id:"params",depth:4},{text:"importmapMode",id:"importmapmode-1",depth:4},{text:"Instance Properties",id:"instance-properties",depth:2},{text:"gez",id:"gez",depth:3},{text:"redirect",id:"redirect",depth:3},{text:"status",id:"status",depth:3},{text:"html",id:"html",depth:3},{text:"base",id:"base-1",depth:3},{text:"entryName",id:"entryname-1",depth:3},{text:"params",id:"params-1",depth:3},{text:"importMetaSet",id:"importmetaset",depth:3},{text:"files",id:"files",depth:3},{text:"importmapMode",id:"importmapmode-2",depth:3},{text:"Instance Methods",id:"instance-methods",depth:2},{text:"serialize()",id:"serialize",depth:3},{text:"state()",id:"state",depth:3},{text:"commit()",id:"commit",depth:3},{text:"preload()",id:"preload",depth:3},{text:"css()",id:"css",depth:3},{text:"importmap()",id:"importmap",depth:3},{text:"moduleEntry()",id:"moduleentry",depth:3},{text:"modulePreload()",id:"modulepreload",depth:3}],title:"RenderContext",headingTitle:"RenderContext",frontmatter:{titleSuffix:"Gez Framework Rendering Context API Reference",description:"Detailed documentation of the RenderContext core class in the Gez framework, including rendering control, resource management, state synchronization, and routing control, helping developers achieve efficient server-side rendering.",head:[["meta",{property:"keywords",content:"Gez, RenderContext, SSR, Server-Side Rendering, Rendering Context, State Synchronization, Resource Management, Web Application Framework"}]]}}}}]);