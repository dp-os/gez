"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["4356"],{3716:function(e,r,n){n.r(r),n.d(r,{default:()=>l});var s=n(1549),i=n(6603);function h(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",ul:"ul",li:"li",strong:"strong",ol:"ol"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"コンポーネント共有からネイティブモジュール化へgezマイクロフロントエンドフレームワークの進化の道",children:["コンポーネント共有からネイティブモジュール化へ：Gezマイクロフロントエンドフレームワークの進化の道",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#コンポーネント共有からネイティブモジュール化へgezマイクロフロントエンドフレームワークの進化の道",children:"#"})]}),"\n",(0,s.jsxs)(r.h2,{id:"プロジェクト背景",children:["プロジェクト背景",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#プロジェクト背景",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"過去数年間、マイクロフロントエンドアーキテクチャは正しい道を模索してきました。しかし、私たちが目にしてきたのは、理想的なマイクロフロントエンドの世界を模倣するための複雑な技術的解決策でした。これらの解決策は、重いパフォーマンス負荷をもたらし、シンプルな開発を複雑にし、標準的なプロセスを難解にしました。"}),"\n",(0,s.jsxs)(r.h3,{id:"従来の解決策の限界",children:["従来の解決策の限界",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#従来の解決策の限界",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"マイクロフロントエンドアーキテクチャの実践において、従来の解決策の多くの制限を痛感しました："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"パフォーマンスの低下"}),"：ランタイムでの依存関係注入、JSサンドボックスのプロキシ、すべての操作が貴重なパフォーマンスを消耗します"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"脆弱な隔離"}),"：手動で作成されたサンドボックス環境は、ブラウザのネイティブな隔離能力には到底及びません"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"ビルドの複雑さ"}),"：依存関係を処理するために、ビルドツールを魔改造しなければならず、シンプルなプロジェクトが保守困難になります"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"カスタマイズされたルール"}),"：特殊なデプロイ戦略、ランタイム処理により、すべてのステップが現代の開発標準プロセスから逸脱します"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"エコシステムの制限"}),"：フレームワークの結合、カスタムAPIにより、技術選定が特定のエコシステムに縛られます"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"これらの問題は、2019年のある企業向けプロジェクトで特に顕著でした。当時、大規模な製品が十数個の独立した業務サブシステムに分割され、これらのサブシステムは共通の基本コンポーネントと業務コンポーネントを共有する必要がありました。最初に採用されたnpmパッケージベースのコンポーネント共有ソリューションは、共有コンポーネントが更新された際に、そのコンポーネントに依存するすべてのサブシステムが完全なビルドとデプロイプロセスを経なければならないという深刻な保守効率の問題を露呈しました。"}),"\n",(0,s.jsxs)(r.h2,{id:"技術的進化",children:["技術的進化",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#技術的進化",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"v10リモートコンポーネントの探求",children:["v1.0：リモートコンポーネントの探求",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#v10リモートコンポーネントの探求",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"コンポーネント共有の効率問題を解決するため、Gez v1.0ではHTTPプロトコルに基づくRemoteViewコンポーネントメカニズムを導入しました。このソリューションは、ランタイムでの動的リクエストにより、サービス間のコードをオンデマンドで組み立てることで、ビルド依存チェーンの長さの問題を解決しました。しかし、標準化されたランタイム通信メカニズムが欠如していたため、サービス間の状態同期とイベント伝達には依然として効率のボトルネックが存在しました。"}),"\n",(0,s.jsxs)(r.h3,{id:"v20モジュールフェデレーションの試み",children:["v2.0：モジュールフェデレーションの試み",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#v20モジュールフェデレーションの試み",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["v2.0バージョンでは、",(0,s.jsx)(r.a,{href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer",children:"Webpack 5.0"}),"の",(0,s.jsx)(r.a,{href:"https://webpack.js.org/concepts/module-federation/",target:"_blank",rel:"noopener noreferrer",children:"モジュールフェデレーション（Module Federation）"}),"技術を採用しました。この技術は、統一されたモジュールロードメカニズムとランタイムコンテナにより、サービス間の協調効率を大幅に向上させました。しかし、大規模な実践において、モジュールフェデレーションの閉鎖的な実装メカニズムは新たな課題をもたらしました：正確な依存関係バージョン管理が難しく、特に複数のサービスの共有依存関係を統一する際に、バージョン衝突やランタイム例外が頻繁に発生しました。"]}),"\n",(0,s.jsxs)(r.h2,{id:"esm新時代の到来",children:["ESM新時代の到来",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#esm新時代の到来",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"v3.0バージョンの計画において、私たちはフロントエンドエコシステムの発展トレンドを深く観察し、ブラウザのネイティブ能力の進化がマイクロフロントエンドアーキテクチャに新たな可能性をもたらしていることを発見しました："}),"\n",(0,s.jsxs)(r.h3,{id:"標準化されたモジュールシステム",children:["標準化されたモジュールシステム",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#標準化されたモジュールシステム",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["主要なブラウザが",(0,s.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer",children:"ES Modules"}),"を全面的にサポートし、",(0,s.jsx)(r.a,{href:"https://github.com/WICG/import-maps",target:"_blank",rel:"noopener noreferrer",children:"Import Maps"}),"仕様が成熟するにつれ、フロントエンド開発は真のモジュール化時代を迎えました。",(0,s.jsx)(r.a,{href:"https://caniuse.com/?search=importmap",target:"_blank",rel:"noopener noreferrer",children:"Can I Use"}),"の統計データによると、現在の主要ブラウザ（Chrome >= 89、Edge >= 89、Firefox >= 108、Safari >= 16.4）のESMネイティブサポート率は93.5%に達しており、これにより以下の利点が得られます："]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"依存関係管理の標準化"}),"：Import Mapsは、ブラウザレベルでモジュール依存関係を解決する能力を提供し、複雑なランタイム注入を必要としません"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"リソースロードの最適化"}),"：ブラウザのネイティブなモジュールキャッシュメカニズムにより、リソースロード効率が大幅に向上します"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"ビルドプロセスの簡素化"}),"：ESMベースの開発モードにより、開発環境と本番環境のビルドプロセスがより一貫性を持ちます"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"同時に、互換モードのサポート（Chrome >= 87、Edge >= 88、Firefox >= 78、Safari >= 14）により、ブラウザカバレッジを96.81%までさらに向上させることができ、高性能を維持しながらも旧版ブラウザのサポートを犠牲にしません。"}),"\n",(0,s.jsxs)(r.h3,{id:"パフォーマンスと隔離のブレークスルー",children:["パフォーマンスと隔離のブレークスルー",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#パフォーマンスと隔離のブレークスルー",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"ネイティブモジュールシステムがもたらすのは標準化だけでなく、パフォーマンスと隔離性の質的向上です："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"ゼロランタイムオーバーヘッド"}),"：従来のマイクロフロントエンドソリューションにおけるJavaScriptサンドボックスプロキシとランタイム注入に別れを告げます"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"信頼性の高い隔離メカニズム"}),"：ESMの厳格なモジュールスコープは、最も信頼性の高い隔離能力を自然に提供します"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"正確な依存関係管理"}),"：静的インポート分析により、依存関係がより明確になり、バージョンコントロールがより正確になります"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"ビルドツールの選択",children:["ビルドツールの選択",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#ビルドツールの選択",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"技術ソリューションの実装において、ビルドツールの選択は重要な決定ポイントです。約1年間の技術調査と実践を経て、私たちの選択は以下のように進化しました："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Viteの探求"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"利点：ESMベースの開発サーバーにより、極めて優れた開発体験を提供します"}),"\n",(0,s.jsx)(r.li,{children:"課題：開発環境と本番環境のビルドの差異により、一定の不確実性が生じます"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsxs)(r.strong,{children:[(0,s.jsx)(r.a,{href:"https://www.rspack.dev/",target:"_blank",rel:"noopener noreferrer",children:"Rspack"}),"の確立"]})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["パフォーマンスの利点：",(0,s.jsx)(r.a,{href:"https://www.rust-lang.org/",target:"_blank",rel:"noopener noreferrer",children:"Rust"}),"ベースの高性能コンパイルにより、ビルド速度が大幅に向上します"]}),"\n",(0,s.jsx)(r.li,{children:"エコシステムのサポート：Webpackエコシステムとの高い互換性により、移行コストが低減されます"}),"\n",(0,s.jsx)(r.li,{children:"ESMサポート：Rslibプロジェクトの実践を通じて、ESMビルドにおける信頼性が検証されました"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"この決定により、開発体験を維持しながら、より安定した本番環境サポートを得ることができました。ESMとRspackの組み合わせに基づき、最終的に高性能で低侵入性のマイクロフロントエンドソリューションを構築しました。"}),"\n",(0,s.jsxs)(r.h2,{id:"将来の展望",children:["将来の展望",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#将来の展望",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"今後の発展計画において、Gezフレームワークは以下の3つの方向に重点を置きます："}),"\n",(0,s.jsxs)(r.h3,{id:"import-mapsの深度最適化",children:["Import Mapsの深度最適化",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#import-mapsの深度最適化",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"動的依存関係管理"}),"：ランタイムでの依存関係バージョンのインテリジェントなスケジューリングを実現し、複数アプリケーション間の依存関係衝突を解決します"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"プリロード戦略"}),"：ルート分析に基づくインテリジェントなプリロードにより、リソースロード効率を向上させます"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"ビルド最適化"}),"：最適なImport Maps設定を自動生成し、開発者の手動設定コストを削減します"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"フレームワークに依存しないルーティングソリューション",children:["フレームワークに依存しないルーティングソリューション",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#フレームワークに依存しないルーティングソリューション",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"統一ルーティング抽象化"}),"：フレームワークに依存しないルーティングインターフェースを設計し、Vue、Reactなどの主要フレームワークをサポートします"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"マイクロアプリケーションルーティング"}),"：アプリケーション間のルーティング連動を実現し、URLとアプリケーション状態の一貫性を維持します"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"ルーティングミドルウェア"}),"：拡張可能なミドルウェアメカニズムを提供し、権限制御、ページ遷移などの機能をサポートします"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"クロスフレームワーク通信のベストプラクティス",children:["クロスフレームワーク通信のベストプラクティス",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#クロスフレームワーク通信のベストプラクティス",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"サンプルアプリケーション"}),"：Vue、React、Preactなどの主要フレームワークをカバーする完全なクロスフレームワーク通信サンプルを提供します"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"状態同期"}),"：ESMベースの軽量な状態共有ソリューションを実装します"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"イベントバス"}),"：標準化されたイベント通信メカニズムにより、アプリケーション間の疎結合通信をサポートします"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"これらの最適化と拡張を通じて、Gezがより完成度が高く、使いやすいマイクロフロントエンドソリューションとなり、開発者により優れた開発体験と高い開発効率を提供することを期待しています。"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["ja%2Fblog%2Fbirth-of-gez.md"]={toc:[{text:"プロジェクト背景",id:"プロジェクト背景",depth:2},{text:"従来の解決策の限界",id:"従来の解決策の限界",depth:3},{text:"技術的進化",id:"技術的進化",depth:2},{text:"v1.0：リモートコンポーネントの探求",id:"v10リモートコンポーネントの探求",depth:3},{text:"v2.0：モジュールフェデレーションの試み",id:"v20モジュールフェデレーションの試み",depth:3},{text:"ESM新時代の到来",id:"esm新時代の到来",depth:2},{text:"標準化されたモジュールシステム",id:"標準化されたモジュールシステム",depth:3},{text:"パフォーマンスと隔離のブレークスルー",id:"パフォーマンスと隔離のブレークスルー",depth:3},{text:"ビルドツールの選択",id:"ビルドツールの選択",depth:3},{text:"将来の展望",id:"将来の展望",depth:2},{text:"Import Mapsの深度最適化",id:"import-mapsの深度最適化",depth:3},{text:"フレームワークに依存しないルーティングソリューション",id:"フレームワークに依存しないルーティングソリューション",depth:3},{text:"クロスフレームワーク通信のベストプラクティス",id:"クロスフレームワーク通信のベストプラクティス",depth:3}],title:"コンポーネント共有からネイティブモジュール化へ：Gezマイクロフロントエンドフレームワークの進化の道",headingTitle:"コンポーネント共有からネイティブモジュール化へ：Gezマイクロフロントエンドフレームワークの進化の道",frontmatter:{titleSuffix:"マイクロフロントエンドの課題からESM革新へ：Gezフレームワークの進化の道",description:"Gezフレームワークが従来のマイクロフロントエンドアーキテクチャの課題からESMベースの革新へと進化した過程を深く探り、パフォーマンス最適化、依存関係管理、ビルドツール選定などの技術的実践経験を共有します。",head:[["meta",{property:"keywords",content:"Gez, マイクロフロントエンドフレームワーク, ESM, Import Maps, Rspack, モジュールフェデレーション, 依存関係管理, パフォーマンス最適化, 技術進化, サーバーサイドレンダリング"}]],sidebar:!1}}}}]);