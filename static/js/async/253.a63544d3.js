"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["253"],{9186:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var d=r(1549),s=r(6603);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",pre:"pre",h2:"h2",h3:"h3",h4:"h4",ul:"ul",li:"li",strong:"strong"},(0,s.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"app",children:["App",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#app",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"App"}),"은 Gez 프레임워크의 애플리케이션 추상화로, 애플리케이션의 생명주기, 정적 리소스 및 서버 사이드 렌더링을 관리하기 위한 통합 인터페이스를 제공합니다."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"export default {\n  // 개발 환경 설정\n  async devApp(gez) {\n    return import('@gez/rspack').then((m) =>\n      m.createRspackHtmlApp(gez, {\n        config(rc) {\n          // Rspack 설정 커스터마이징\n        }\n      })\n    );\n  }\n}\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"타입-정의",children:["타입 정의",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#타입-정의",children:"#"})]}),"\n",(0,d.jsxs)(n.h3,{id:"app-1",children:["App",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#app-1",children:"#"})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"interface App {\n  middleware: Middleware;\n  render: (options?: RenderContextOptions) => Promise<RenderContext>;\n  build?: () => Promise<boolean>;\n  destroy?: () => Promise<boolean>;\n}\n"})}),"\n",(0,d.jsxs)(n.h4,{id:"middleware",children:["middleware",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#middleware",children:"#"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"타입"}),": ",(0,d.jsx)(n.code,{children:"Middleware"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"정적 리소스 처리 미들웨어."}),"\n",(0,d.jsx)(n.p,{children:"개발 환경:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"소스 코드의 정적 리소스 요청 처리"}),"\n",(0,d.jsx)(n.li,{children:"실시간 컴파일 및 핫 리로드 지원"}),"\n",(0,d.jsx)(n.li,{children:"no-cache 캐시 정책 사용"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"프로덕션 환경:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"빌드된 정적 리소스 처리"}),"\n",(0,d.jsx)(n.li,{children:"불변 파일의 장기 캐싱 지원 (.final.xxx)"}),"\n",(0,d.jsx)(n.li,{children:"최적화된 리소스 로딩 전략"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"server.use(gez.middleware);\n"})}),"\n",(0,d.jsxs)(n.h4,{id:"render",children:["render",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#render",children:"#"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"타입"}),": ",(0,d.jsx)(n.code,{children:"(options?: RenderContextOptions) => Promise<RenderContext>"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"서버 사이드 렌더링 함수. 실행 환경에 따라 다른 구현 제공:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"프로덕션 환경 (start): 빌드된 서버 진입 파일(entry.server) 로드 및 렌더링 실행"}),"\n",(0,d.jsx)(n.li,{children:"개발 환경 (dev): 소스 코드의 서버 진입 파일 로드 및 렌더링 실행"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"const rc = await gez.render({\n  params: { url: '/page' }\n});\nres.end(rc.html);\n"})}),"\n",(0,d.jsxs)(n.h4,{id:"build",children:["build",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#build",children:"#"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"타입"}),": ",(0,d.jsx)(n.code,{children:"() => Promise<boolean>"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"프로덕션 환경 빌드 함수. 리소스 패키징 및 최적화에 사용. 빌드 성공 시 true 반환, 실패 시 false 반환."}),"\n",(0,d.jsxs)(n.h4,{id:"destroy",children:["destroy",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#destroy",children:"#"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"타입"}),": ",(0,d.jsx)(n.code,{children:"() => Promise<boolean>"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"리소스 정리 함수. 서버 종료, 연결 해제 등에 사용. 정리 성공 시 true 반환, 실패 시 false 반환."})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(i,{...e})}):i(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["ko%2Fapi%2Fcore%2Fapp.md"]={toc:[{text:"타입 정의",id:"타입-정의",depth:2},{text:"App",id:"app-1",depth:3},{text:"middleware",id:"middleware",depth:4},{text:"render",id:"render",depth:4},{text:"build",id:"build",depth:4},{text:"destroy",id:"destroy",depth:4}],title:"App",headingTitle:"App",frontmatter:{titleSuffix:"Gez 프레임워크 애플리케이션 추상 인터페이스",description:"Gez 프레임워크의 App 인터페이스에 대해 자세히 설명합니다. 애플리케이션 생명주기 관리, 정적 리소스 처리 및 서버 사이드 렌더링 기능을 포함하여 개발자가 애플리케이션의 핵심 기능을 이해하고 사용할 수 있도록 돕습니다.",head:[["meta",{property:"keywords",content:"Gez, App, 애플리케이션 추상, 생명주기, 정적 리소스, 서버 사이드 렌더링, API"}]]}}}}]);