"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["2521"],{5673:function(e,n,i){i.r(n),i.d(n,{default:()=>l});var s=i(1549),r=i(6603);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",ul:"ul",li:"li",strong:"strong",h2:"h2",pre:"pre",h3:"h3",h4:"h4"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"packconfig",children:["PackConfig",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packconfig",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"PackConfig"})," is the package bundling configuration interface used to bundle the build artifacts of a service into a standard npm .tgz format package."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Standardization"}),": Uses the npm standard .tgz bundling format"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Completeness"}),": Includes all necessary files such as module source code, type declarations, and configuration files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compatibility"}),": Fully compatible with the npm ecosystem, supporting standard package management workflows"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"type-definition",children:["Type Definition",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#type-definition",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface PackConfig {\n    enable?: boolean;\n    outputs?: string | string[] | boolean;\n    packageJson?: (gez: Gez, pkg: Record<string, any>) => Promise<Record<string, any>>;\n    onBefore?: (gez: Gez, pkg: Record<string, any>) => Promise<void>;\n    onAfter?: (gez: Gez, pkg: Record<string, any>, file: Buffer) => Promise<void>;\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"packconfig-1",children:["PackConfig",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packconfig-1",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"enable",children:["enable",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#enable",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Whether to enable the bundling feature. When enabled, the build artifacts will be bundled into a standard npm .tgz format package."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Type: ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:["Default: ",(0,s.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"outputs",children:["outputs",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#outputs",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Specifies the output package file path. Supports the following configuration methods:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string"}),": A single output path, e.g., 'dist/versions/my-app.tgz'"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string[]"}),": Multiple output paths for generating multiple versions simultaneously"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"boolean"}),": When true, uses the default path 'dist/client/versions/latest.tgz'"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"packagejson",children:["packageJson",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"A callback function to customize the package.json content. Called before bundling to customize the package.json content."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Parameters:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"gez: Gez"})," - Gez instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pkg: any"})," - Original package.json content"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Return Value: ",(0,s.jsx)(n.code,{children:"Promise<any>"})," - Modified package.json content"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Common Use Cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Modify package name and version"}),"\n",(0,s.jsx)(n.li,{children:"Add or update dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Add custom fields"}),"\n",(0,s.jsx)(n.li,{children:"Configure publishing information"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"packageJson: async (gez, pkg) => {\n  // Set package information\n  pkg.name = 'my-app';\n  pkg.version = '1.0.0';\n  pkg.description = 'My Application';\n\n  // Add dependencies\n  pkg.dependencies = {\n    'vue': '^3.0.0',\n    'express': '^4.17.1'\n  };\n\n  // Add publishing configuration\n  pkg.publishConfig = {\n    registry: 'https://registry.example.com'\n  };\n\n  return pkg;\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"onbefore",children:["onBefore",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#onbefore",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"A callback function for pre-bundling preparations."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Parameters:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"gez: Gez"})," - Gez instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pkg: Record<string, any>"})," - package.json content"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Return Value: ",(0,s.jsx)(n.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Common Use Cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add additional files (README, LICENSE, etc.)"}),"\n",(0,s.jsx)(n.li,{children:"Execute tests or build validations"}),"\n",(0,s.jsx)(n.li,{children:"Generate documentation or metadata"}),"\n",(0,s.jsx)(n.li,{children:"Clean up temporary files"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"onBefore: async (gez, pkg) => {\n  // Add documentation\n  await fs.writeFile('dist/README.md', '# My App');\n  await fs.writeFile('dist/LICENSE', 'MIT License');\n\n  // Execute tests\n  await runTests();\n\n  // Generate documentation\n  await generateDocs();\n\n  // Clean up temporary files\n  await cleanupTempFiles();\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"onafter",children:["onAfter",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#onafter",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"A callback function for post-bundling processing. Called after the .tgz file is generated to handle the bundled artifacts."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Parameters:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"gez: Gez"})," - Gez instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pkg: Record<string, any>"})," - package.json content"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file: Buffer"})," - Bundled file content"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Return Value: ",(0,s.jsx)(n.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Common Use Cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Publish to npm registry (public or private)"}),"\n",(0,s.jsx)(n.li,{children:"Upload to static resource server"}),"\n",(0,s.jsx)(n.li,{children:"Perform version management"}),"\n",(0,s.jsx)(n.li,{children:"Trigger CI/CD workflows"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"onAfter: async (gez, pkg, file) => {\n  // Publish to private npm registry\n  await publishToRegistry(file, {\n    registry: 'https://registry.example.com'\n  });\n\n  // Upload to static resource server\n  await uploadToServer(file, 'https://assets.example.com/packages');\n\n  // Create version tag\n  await createGitTag(pkg.version);\n\n  // Trigger deployment process\n  await triggerDeploy(pkg.version);\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"usage-example",children:["Usage Example",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage-example",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n  modules: {\n    // Configure modules to be exported\n    exports: [\n      'root:src/components/button.vue',\n      'root:src/utils/format.ts',\n      'npm:vue',\n      'npm:vue-router'\n    ]\n  },\n  // Bundling configuration\n  pack: {\n    // Enable bundling\n    enable: true,\n\n    // Output multiple versions simultaneously\n    outputs: [\n      'dist/versions/latest.tgz',\n      'dist/versions/1.0.0.tgz'\n    ],\n\n    // Customize package.json\n    packageJson: async (gez, pkg) => {\n      pkg.version = '1.0.0';\n      return pkg;\n    },\n\n    // Pre-bundling preparations\n    onBefore: async (gez, pkg) => {\n      // Add necessary files\n      await fs.writeFile('dist/README.md', '# Your App\\n\\nModule export instructions...');\n      // Execute type checking\n      await runTypeCheck();\n    },\n\n    // Post-bundling processing\n    onAfter: async (gez, pkg, file) => {\n      // Publish to private npm registry\n      await publishToRegistry(file, {\n        registry: 'https://npm.your-registry.com/'\n      });\n      // Or deploy to static server\n      await uploadToServer(file, 'https://static.example.com/packages');\n    }\n  }\n} satisfies GezOptions;\n"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let l=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["en%2Fapi%2Fcore%2Fpack-config.md"]={toc:[{text:"Type Definition",id:"type-definition",depth:2},{text:"PackConfig",id:"packconfig-1",depth:3},{text:"enable",id:"enable",depth:4},{text:"outputs",id:"outputs",depth:4},{text:"packageJson",id:"packagejson",depth:4},{text:"onBefore",id:"onbefore",depth:4},{text:"onAfter",id:"onafter",depth:4},{text:"Usage Example",id:"usage-example",depth:2}],title:"PackConfig",headingTitle:"PackConfig",frontmatter:{titleSuffix:"Gez Framework Pack Configuration API Reference",description:"Detailed documentation on the PackConfig configuration interface of the Gez framework, including package bundling rules, output configurations, and lifecycle hooks, helping developers implement standardized build processes.",head:[["meta",{property:"keywords",content:"Gez, PackConfig, Package Bundling, Build Configuration, Lifecycle Hooks, Bundling Configuration, Web Application Framework"}]]}}}}]);