"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["3204"],{2169:function(e,r,n){n.r(r),n.d(r,{default:()=>l});var s=n(1549),i=n(6603);function d(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ul:"ul",li:"li",strong:"strong",h3:"h3",div:"div"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"介绍",children:["介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.h2,{id:"项目背景",children:["项目背景",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#项目背景",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Gez 是一个基于 ECMAScript Modules (ESM) 的现代微前端框架，专注于构建高性能、可扩展的服务端渲染（SSR）应用。作为 Genesis 项目的第三代产品，Gez 在技术演进过程中不断创新："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"v1.0"}),"：基于 HTTP 请求实现远程组件按需加载"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"v2.0"}),"：基于 Webpack Module Federation 实现应用集成"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"v3.0"}),"：基于浏览器原生 ESM 重新设计",(0,s.jsx)(r.a,{href:"/guide/essentials/module-link",children:"模块链接"}),"系统"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"技术背景",children:["技术背景",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#技术背景",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"在微前端架构发展过程中，传统解决方案主要存在以下局限："}),"\n",(0,s.jsxs)(r.h3,{id:"现有方案的挑战",children:["现有方案的挑战",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#现有方案的挑战",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"性能瓶颈"}),"：运行时依赖注入和 JavaScript 沙箱代理带来显著的性能开销"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"隔离机制"}),"：自研沙箱环境难以企及浏览器原生的模块隔离能力"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"构建复杂性"}),"：为实现依赖共享而进行的构建工具改造，增加了项目维护成本"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"标准偏离"}),"：特殊的部署策略和运行时处理机制，与现代 Web 开发标准相悖"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"生态限制"}),"：框架耦合和定制 API 导致技术栈选择受限"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"技术创新",children:["技术创新",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#技术创新",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Gez 基于现代 Web 标准，提供了全新的解决方案："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"原生模块系统"}),"：利用浏览器原生 ESM 和 Import Maps 实现依赖管理，具有更快的解析和执行速度"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"标准隔离机制"}),"：基于 ECMAScript 模块作用域实现可靠的应用隔离"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"开放技术栈"}),"：支持任意现代前端框架的无缝接入"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"优化开发体验"}),"：提供符合直觉的开发模式和完整的调试能力"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"极致性能优化"}),"：通过原生能力实现零运行时开销，配合智能缓存策略"]}),"\n"]}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"TIP"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"Gez 专注于打造高性能、易扩展的微前端基础设施，尤其适合大规模服务端渲染应用场景。"})})]}),"\n",(0,s.jsxs)(r.h2,{id:"技术规范",children:["技术规范",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#技术规范",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"环境依赖",children:["环境依赖",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#环境依赖",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["请参考",(0,s.jsx)(r.a,{href:"/guide/start/environment",children:"环境要求"}),"文档了解详细的浏览器和 Node.js 环境要求。"]}),"\n",(0,s.jsxs)(r.h3,{id:"核心技术栈",children:["核心技术栈",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#核心技术栈",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"依赖管理"}),"：采用 ",(0,s.jsx)(r.a,{href:"https://caniuse.com/?search=import%20map",target:"_blank",rel:"noopener noreferrer",children:"Import Maps"})," 实现模块映射，使用 ",(0,s.jsx)(r.a,{href:"https://github.com/guybedford/es-module-shims",target:"_blank",rel:"noopener noreferrer",children:"es-module-shims"})," 提供兼容支持"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"构建系统"}),"：基于 Rspack 的 ",(0,s.jsx)(r.a,{href:"https://rspack.dev/config/externals#externalstypemodule-import",target:"_blank",rel:"noopener noreferrer",children:"module-import"})," 处理外部依赖"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"开发工具链"}),"：支持 ESM 热更新和 TypeScript 原生执行"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"框架定位",children:["框架定位",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#框架定位",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["Gez 不同于 ",(0,s.jsx)(r.a,{href:"https://nextjs.org",target:"_blank",rel:"noopener noreferrer",children:"Next.js"})," 或 ",(0,s.jsx)(r.a,{href:"https://nuxt.com/",target:"_blank",rel:"noopener noreferrer",children:"Nuxt.js"}),"，而是专注于提供微前端基础设施："]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"模块链接系统"}),"：实现高效、可靠的模块导入导出"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"服务端渲染"}),"：提供灵活的 SSR 实现机制"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"类型系统支持"}),"：集成完整的 TypeScript 类型定义"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"框架中立性"}),"：支持主流前端框架集成"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"架构设计",children:["架构设计",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#架构设计",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"中心化依赖管理",children:["中心化依赖管理",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#中心化依赖管理",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"统一依赖源"}),"：集中化的第三方依赖管理"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"自动化分发"}),"：依赖更新的全局自动同步"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"版本一致性"}),"：精确的依赖版本控制"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"模块化设计",children:["模块化设计",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#模块化设计",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"职责分离"}),"：业务逻辑与基础设施解耦"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"插件机制"}),"：支持模块的灵活组合与替换"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"标准接口"}),"：规范化的模块间通信协议"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"性能优化",children:["性能优化",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#性能优化",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"零开销原则"}),"：最大化利用浏览器原生能力"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"智能缓存"}),"：基于内容哈希的精确缓存策略"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"按需加载"}),"：精细化的代码分割与依赖管理"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"项目成熟度",children:["项目成熟度",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#项目成熟度",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Gez 通过近 5 年的迭代演进（v1.0 至 v3.0），已在企业级环境中得到全面验证。目前支撑数十个业务项目稳定运行，并持续推动技术栈现代化升级。框架的稳定性、可靠性和性能优势已在实践中得到充分检验，为大规模应用开发提供了可靠的技术基础。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let l=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["zh%2Fguide%2Fstart%2Fintroduction.md"]={toc:[{text:"项目背景",id:"项目背景",depth:2},{text:"技术背景",id:"技术背景",depth:2},{text:"现有方案的挑战",id:"现有方案的挑战",depth:3},{text:"技术创新",id:"技术创新",depth:3},{text:"技术规范",id:"技术规范",depth:2},{text:"环境依赖",id:"环境依赖",depth:3},{text:"核心技术栈",id:"核心技术栈",depth:3},{text:"框架定位",id:"框架定位",depth:2},{text:"架构设计",id:"架构设计",depth:2},{text:"中心化依赖管理",id:"中心化依赖管理",depth:3},{text:"模块化设计",id:"模块化设计",depth:3},{text:"性能优化",id:"性能优化",depth:3},{text:"项目成熟度",id:"项目成熟度",depth:2}],title:"介绍",headingTitle:"介绍",frontmatter:{titleSuffix:"Gez 框架概述与技术创新",description:"深入了解 Gez 微前端框架的项目背景、技术演进和核心优势，探索基于 ESM 的现代化服务端渲染解决方案。",head:[["meta",{property:"keywords",content:"Gez, 微前端, ESM, 服务端渲染, SSR, 技术创新, 模块联邦"}]]}}}}]);