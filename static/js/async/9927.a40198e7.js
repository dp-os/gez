"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["9927"],{5783:function(n,e,r){r.r(e),r.d(e,{default:()=>c});var s=r(1549),i=r(6603);function l(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ol:"ol",li:"li",strong:"strong",ul:"ul",h2:"h2",code:"code",pre:"pre",h3:"h3",h4:"h4"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"レンダリングコンテキスト",children:["レンダリングコンテキスト",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#レンダリングコンテキスト",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"RenderContext は Gez フレームワークのコアクラスで、主にサーバーサイドレンダリング（SSR）プロセス中のリソース管理と HTML 生成を担当します。以下のコア特徴を持っています："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"ESM ベースのモジュールシステム"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"現代的な ECMAScript Modules 標準を採用"}),"\n",(0,s.jsx)(e.li,{children:"ネイティブのモジュールインポート/エクスポートをサポート"}),"\n",(0,s.jsx)(e.li,{children:"より良いコード分割とオンデマンドロードを実現"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"インテリジェントな依存関係収集"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"実際のレンダリングパスに基づいて動的に依存関係を収集"}),"\n",(0,s.jsx)(e.li,{children:"不要なリソースロードを回避"}),"\n",(0,s.jsx)(e.li,{children:"非同期コンポーネントと動的インポートをサポート"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"正確なリソース注入"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"リソースロード順序を厳密に制御"}),"\n",(0,s.jsx)(e.li,{children:"初回ロードパフォーマンスを最適化"}),"\n",(0,s.jsx)(e.li,{children:"クライアントサイドのアクティベーション（Hydration）の信頼性を確保"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"柔軟な設定メカニズム"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"動的なベースパス設定をサポート"}),"\n",(0,s.jsx)(e.li,{children:"複数のインポートマッピングモードを提供"}),"\n",(0,s.jsx)(e.li,{children:"異なるデプロイシナリオに対応"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"使用方法",children:["使用方法",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用方法",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["Gez フレームワークでは、開発者は通常 RenderContext インスタンスを直接作成する必要はなく、",(0,s.jsx)(e.code,{children:"gez.render()"})," メソッドを通じてインスタンスを取得します："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"async server(gez) {\n    const server = http.createServer((req, res) => {\n        // 静的ファイル処理\n        gez.middleware(req, res, async () => {\n            // gez.render() を通じて RenderContext インスタンスを取得\n            const rc = await gez.render({\n                params: {\n                    url: req.url\n                }\n            });\n            // HTML コンテンツをレスポンス\n            res.end(rc.html);\n        });\n    });\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"主な機能",children:["主な機能",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#主な機能",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"依存関係収集",children:["依存関係収集",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#依存関係収集",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"RenderContext はインテリジェントな依存関係収集メカニズムを実装しており、実際にレンダリングされるコンポーネントに基づいて動的に依存関係を収集します："}),"\n",(0,s.jsxs)(e.h4,{id:"オンデマンド収集",children:["オンデマンド収集",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#オンデマンド収集",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"コンポーネントの実際のレンダリングプロセス中に自動的にモジュール依存関係を追跡・記録"}),"\n",(0,s.jsx)(e.li,{children:"現在のページレンダリングで実際に使用される CSS、JavaScript などのリソースのみを収集"}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"importMetaSet"})," を通じて各コンポーネントのモジュール依存関係を正確に記録"]}),"\n",(0,s.jsx)(e.li,{children:"非同期コンポーネントと動的インポートの依存関係収集をサポート"}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"自動化処理",children:["自動化処理",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#自動化処理",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"開発者が手動で依存関係収集プロセスを管理する必要はありません"}),"\n",(0,s.jsx)(e.li,{children:"フレームワークがコンポーネントレンダリング時に自動的に依存関係情報を収集"}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"commit()"})," メソッドを通じて収集されたすべてのリソースを一括処理"]}),"\n",(0,s.jsx)(e.li,{children:"循環依存と重複依存の問題を自動的に処理"}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"パフォーマンス最適化",children:["パフォーマンス最適化",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#パフォーマンス最適化",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"未使用のモジュールのロードを回避し、初回ロード時間を大幅に短縮"}),"\n",(0,s.jsx)(e.li,{children:"リソースロード順序を正確に制御し、ページレンダリングパフォーマンスを最適化"}),"\n",(0,s.jsx)(e.li,{children:"最適なインポートマッピング（Import Map）を自動生成"}),"\n",(0,s.jsx)(e.li,{children:"リソースのプリロードとオンデマンドロード戦略をサポート"}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"リソース注入",children:["リソース注入",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#リソース注入",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"RenderContext は、異なるタイプのリソースを注入するための複数のメソッドを提供し、各メソッドはリソースロードパフォーマンスを最適化するために設計されています："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"preload()"}),"：CSS と JS リソースをプリロードし、優先度設定をサポート"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"css()"}),"：初回表示用のスタイルシートを注入し、クリティカル CSS の抽出をサポート"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"importmap()"}),"：モジュールインポートマッピングを注入し、動的パス解決をサポート"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"moduleEntry()"}),"：クライアントサイドのエントリーモジュールを注入し、マルチエントリー設定をサポート"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"modulePreload()"}),"：モジュール依存関係をプリロードし、オンデマンドロード戦略をサポート"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"リソース注入順序",children:["リソース注入順序",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#リソース注入順序",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"RenderContext はリソース注入順序を厳密に制御し、この順序設計はブラウザの動作原理とパフォーマンス最適化を考慮しています："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"head 部分："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"preload()"}),"：CSS と JS リソースをプリロードし、ブラウザがこれらのリソースを早期に発見してロードを開始できるようにします"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"css()"}),"：初回表示用のスタイルシートを注入し、ページのスタイルがコンテンツレンダリング時に準備されていることを確認します"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"body 部分："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"importmap()"}),"：モジュールインポートマッピングを注入し、ESM モジュールのパス解決ルールを定義します"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"moduleEntry()"}),"：クライアントサイドのエントリーモジュールを注入し、importmap の後に実行する必要があります"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"modulePreload()"}),"：モジュール依存関係をプリロードし、importmap の後に実行する必要があります"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"完全なレンダリングプロセス",children:["完全なレンダリングプロセス",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#完全なレンダリングプロセス",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"典型的な RenderContext の使用プロセスは以下の通りです："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"export default async (rc: RenderContext) => {\n    // 1. ページコンテンツをレンダリングし、依存関係を収集\n    const app = createApp();\n    const html = await renderToString(app, {\n       importMetaSet: rc.importMetaSet\n    });\n\n    // 2. 依存関係収集をコミット\n    await rc.commit();\n    \n    // 3. 完全な HTML を生成\n    rc.html = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n            ${rc.preload()}\n            ${rc.css()}\n        </head>\n        <body>\n            ${html}\n            ${rc.importmap()}\n            ${rc.moduleEntry()}\n            ${rc.modulePreload()}\n        </body>\n        </html>\n    `;\n};\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"高度な機能",children:["高度な機能",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#高度な機能",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"ベースパス設定",children:["ベースパス設定",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ベースパス設定",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"RenderContext は柔軟な動的ベースパス設定メカニズムを提供し、実行時に静的リソースのベースパスを動的に設定できます："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"const rc = await gez.render({\n    base: '/gez',  // ベースパスを設定\n    params: {\n        url: req.url\n    }\n});\n"})}),"\n",(0,s.jsx)(e.p,{children:"このメカニズムは以下のシナリオに特に適しています："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"多言語サイトデプロイ"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"メインドメイン.com      → デフォルト言語\nメインドメイン.com/cn/  → 中国語サイト\nメインドメイン.com/en/  → 英語サイト\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"マイクロフロントエンドアプリケーション"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"サブアプリケーションを異なるパス下で柔軟にデプロイ"}),"\n",(0,s.jsx)(e.li,{children:"異なるメインアプリケーションへの統合が容易"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"インポートマッピングモード",children:["インポートマッピングモード",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#インポートマッピングモード",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"RenderContext は2つのインポートマッピング（Import Map）モードを提供します："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Inline モード"}),"（デフォルト）"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"インポートマッピングを直接 HTML にインライン化"}),"\n",(0,s.jsx)(e.li,{children:"小規模アプリケーションに適し、追加のネットワークリクエストを削減"}),"\n",(0,s.jsx)(e.li,{children:"ページロード時に即時利用可能"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"JS モード"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"外部 JavaScript ファイルを通じてインポートマッピングをロード"}),"\n",(0,s.jsx)(e.li,{children:"大規模アプリケーションに適し、ブラウザのキャッシュメカニズムを利用"}),"\n",(0,s.jsx)(e.li,{children:"マッピング内容の動的更新をサポート"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"設定を通じて適切なモードを選択できます："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"const rc = await gez.render({\n    importmapMode: 'js',  // 'inline' | 'js'\n    params: {\n        url: req.url\n    }\n});\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"エントリー関数設定",children:["エントリー関数設定",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#エントリー関数設定",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["RenderContext は ",(0,s.jsx)(e.code,{children:"entryName"})," 設定を通じてサーバーサイドレンダリングのエントリー関数を指定できます："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"const rc = await gez.render({\n    entryName: 'mobile',  // モバイルエントリー関数を使用\n    params: {\n        url: req.url\n    }\n});\n"})}),"\n",(0,s.jsx)(e.p,{children:"このメカニズムは以下のシナリオに特に適しています："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"マルチテンプレートレンダリング"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"// モバイルエントリー関数\nexport const mobile = async (rc: RenderContext) => {\n    // モバイル固有のレンダリングロジック\n};\n\n// デスクトップエントリー関数\nexport const desktop = async (rc: RenderContext) => {\n    // デスクトップ固有のレンダリングロジック\n};\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"A/B テスト"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"同一ページで異なるレンダリングロジックを使用"}),"\n",(0,s.jsx)(e.li,{children:"ユーザーエクスペリエンス実験を容易に実施"}),"\n",(0,s.jsx)(e.li,{children:"異なるレンダリング戦略を柔軟に切り替え"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"特殊なレンダリング要件"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"特定のページでカスタムレンダリングプロセスを使用"}),"\n",(0,s.jsx)(e.li,{children:"異なるシナリオのパフォーマンス最適化要件に対応"}),"\n",(0,s.jsx)(e.li,{children:"より細かいレンダリング制御を実現"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"ベストプラクティス",children:["ベストプラクティス",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ベストプラクティス",children:"#"})]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"RenderContext インスタンスの取得"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["常に ",(0,s.jsx)(e.code,{children:"gez.render()"})," メソッドを通じてインスタンスを取得"]}),"\n",(0,s.jsx)(e.li,{children:"必要に応じて適切なパラメータを渡す"}),"\n",(0,s.jsx)(e.li,{children:"手動でのインスタンス作成を避ける"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"依存関係収集"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["すべてのモジュールが正しく ",(0,s.jsx)(e.code,{children:"importMetaSet.add(import.meta)"})," を呼び出すことを確認"]}),"\n",(0,s.jsxs)(e.li,{children:["レンダリング完了後すぐに ",(0,s.jsx)(e.code,{children:"commit()"})," メソッドを呼び出す"]}),"\n",(0,s.jsx)(e.li,{children:"非同期コンポーネントと動的インポートを適切に使用して初回ロードを最適化"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"リソース注入"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"リソース注入順序を厳密に遵守"}),"\n",(0,s.jsx)(e.li,{children:"body 内に CSS を注入しない"}),"\n",(0,s.jsx)(e.li,{children:"importmap が moduleEntry の前に実行されることを確認"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"パフォーマンス最適化"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"preload を使用して重要なリソースをプリロード"}),"\n",(0,s.jsx)(e.li,{children:"modulePreload を適切に使用してモジュールロードを最適化"}),"\n",(0,s.jsx)(e.li,{children:"不要なリソースロードを避ける"}),"\n",(0,s.jsx)(e.li,{children:"ブラウザのキャッシュメカニズムを利用してロードパフォーマンスを最適化"}),"\n"]}),"\n"]}),"\n"]})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["ja%2Fguide%2Fessentials%2Frender-context.md"]={toc:[{text:"使用方法",id:"使用方法",depth:2},{text:"主な機能",id:"主な機能",depth:2},{text:"依存関係収集",id:"依存関係収集",depth:3},{text:"オンデマンド収集",id:"オンデマンド収集",depth:4},{text:"自動化処理",id:"自動化処理",depth:4},{text:"パフォーマンス最適化",id:"パフォーマンス最適化",depth:4},{text:"リソース注入",id:"リソース注入",depth:3},{text:"リソース注入順序",id:"リソース注入順序",depth:3},{text:"完全なレンダリングプロセス",id:"完全なレンダリングプロセス",depth:2},{text:"高度な機能",id:"高度な機能",depth:2},{text:"ベースパス設定",id:"ベースパス設定",depth:3},{text:"インポートマッピングモード",id:"インポートマッピングモード",depth:3},{text:"エントリー関数設定",id:"エントリー関数設定",depth:3},{text:"ベストプラクティス",id:"ベストプラクティス",depth:2}],title:"レンダリングコンテキスト",headingTitle:"レンダリングコンテキスト",frontmatter:{titleSuffix:"Gez フレームワークのサーバーサイドレンダリングコアメカニズム",description:"Gez フレームワークのレンダリングコンテキスト（RenderContext）メカニズムについて詳しく説明します。リソース管理、HTML生成、ESMモジュールシステムを含め、開発者がサーバーサイドレンダリング機能を理解し使用するのに役立ちます。",head:[["meta",{property:"keywords",content:"Gez, レンダリングコンテキスト, RenderContext, SSR, サーバーサイドレンダリング, ESM, リソース管理"}]]}}}}]);