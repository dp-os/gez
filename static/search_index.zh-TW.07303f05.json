[{"id":300,"title":"@gez/rspack-vue","content":"#\n\nRspack Vue 套件提供了一套用於建立和設定基於 Vue 框架的 Rspack 應用程式的 API，支援 Vue 元件的開發、建置與伺服器端渲染。\n\n\n安裝#\n\n使用套件管理器安裝 @gez/rspack-vue 開發依賴：\n\n\n類型匯出#\n\n\nBuildTarget#\n\n\n\n建置目標環境類型，定義了應用程式的建置目標環境，用於設定建置過程中的特定最佳化和功能：\n\n * node: 建置為 Node.js 環境執行的程式碼\n * client: 建置為瀏覽器環境執行的程式碼\n * server: 建置為伺服器端環境執行的程式碼\n\n\nRspackAppConfigContext#\n\n\n\nRspack 應用程式設定上下文介面，提供了在設定鉤子函數中可以存取的上下文資訊：\n\n * gez: Gez 框架實例\n * buildTarget: 當前的建置目標（client/server/node）\n * config: Rspack 設定物件\n * options: 應用程式設定選項\n\n\nRspackAppOptions#\n\n\n\nRspack 應用程式設定選項介面：\n\n * css: CSS 輸出方式，可選 'css'（獨立檔案）或 'style'（內嵌樣式）\n * loaders: 自訂 loader 設定\n * styleLoader: style-loader 設定選項\n * cssLoader: css-loader 設定選項\n * target: 建置目標相容性設定\n * definePlugin: 全域常數定義\n * config: 設定鉤子函數\n\n\nRspackHtmlAppOptions#\n\n繼承自 RspackAppOptions，用於設定 HTML 應用程式的特定選項。\n\n\n函數匯出#\n\n\ncreateRspackApp#\n\n\n\n建立一個標準的 Rspack 應用程式實例。\n\n參數：\n\n * gez: Gez 框架實例\n * options: Rspack 應用程式設定選項\n\n回傳值：\n\n * 回傳一個 Promise，解析為建立的應用程式實例\n\n\ncreateRspackHtmlApp#\n\n\n\n建立一個 HTML 類型的 Rspack 應用程式實例。\n\n參數：\n\n * gez: Gez 框架實例\n * options: HTML 應用程式設定選項\n\n回傳值：\n\n * 回傳一個 Promise，解析為建立的 HTML 應用程式實例\n\n\n常數匯出#\n\n\nRSPACK_LOADER#\n\n\n\nRspack 內建的 loader 識別符號映射物件，提供了常用的 loader 名稱常數：\n\n * builtinSwcLoader: Rspack 內建的 SWC loader，用於處理 TypeScript/JavaScript 檔案\n * lightningcssLoader: Rspack 內建的 lightningcss loader，用於處理 CSS 檔案的高效能編譯器\n * styleLoader: 用於將 CSS 注入到 DOM 中的 loader\n * cssLoader: 用於解析 CSS 檔案和處理 CSS 模組化的 loader\n * lessLoader: 用於將 Less 檔案編譯為 CSS 的 loader\n * styleResourcesLoader: 用於自動匯入全域樣式資源（如變數、mixins）的 loader\n * workerRspackLoader: 用於處理 Web Worker 檔案的 loader\n\n使用這些常數可以在設定中引用內建的 loader，避免手動輸入字串：\n\n\n\n注意事項：\n\n * 這些 loader 已經內建在 Rspack 中，無需額外安裝\n * 在自訂 loader 設定時，可以使用這些常數來替換預設的 loader 實作\n * 某些 loader（如 builtinSwcLoader）有特定的設定選項，請參考相應的設定文件\n\n\n模組匯出#\n\n\nrspack#\n\n重新匯出 @rspack/core 套件的所有內容，提供完整的 Rspack 核心功能。","routePath":"/zh-TW/api/app/rspack-vue","lang":"zh-TW","toc":[{"text":"安裝","id":"安裝","depth":2,"charIndex":81},{"text":"類型匯出","id":"類型匯出","depth":2,"charIndex":120},{"text":"BuildTarget","id":"buildtarget","depth":3,"charIndex":128},{"text":"RspackAppConfigContext","id":"rspackappconfigcontext","depth":3,"charIndex":274},{"text":"RspackAppOptions","id":"rspackappoptions","depth":3,"charIndex":451},{"text":"RspackHtmlAppOptions","id":"rspackhtmlappoptions","depth":3,"charIndex":693},{"text":"函數匯出","id":"函數匯出","depth":2,"charIndex":760},{"text":"createRspackApp","id":"createrspackapp","depth":3,"charIndex":768},{"text":"createRspackHtmlApp","id":"createrspackhtmlapp","depth":3,"charIndex":900},{"text":"常數匯出","id":"常數匯出","depth":2,"charIndex":1046},{"text":"RSPACK_LOADER","id":"rspack_loader","depth":3,"charIndex":1054},{"text":"模組匯出","id":"模組匯出","depth":2,"charIndex":1682},{"text":"rspack","id":"rspack","depth":3,"charIndex":1690}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架 Vue 建置工具","description":"Gez 框架的 Vue 專用建置工具，提供完整的 Vue 2/3 應用程式建置支援，包括元件開發、SSR 渲染和效能最佳化等功能。","head":[["meta",{"property":"keywords","content":"Gez, Rspack, Vue, Vue2, Vue3, SSR, 建置工具, 元件開發, 伺服器端渲染, 效能最佳化"}]]},"version":""},{"id":301,"title":"@gez/rspack","content":"#\n\nRspack 套件提供了一套用於建立和配置 Rspack 應用的 API，支援標準應用和 HTML 應用的建置與開發。\n\n\n安裝#\n\n使用套件管理器安裝 @gez/rspack 開發依賴：\n\n\n類型匯出#\n\n\nBuildTarget#\n\n\n\n建置目標環境類型，定義了應用程式的建置目標環境，用於配置建置過程中的特定優化和功能：\n\n * node: 建置為 Node.js 環境執行的程式碼\n * client: 建置為瀏覽器環境執行的程式碼\n * server: 建置為伺服器環境執行的程式碼\n\n\nRspackAppConfigContext#\n\n\n\nRspack 應用配置上下文介面，提供了在配置鉤子函數中可以存取的上下文資訊：\n\n * gez: Gez 框架實例\n * buildTarget: 當前的建置目標（client/server/node）\n * config: Rspack 配置物件\n * options: 應用配置選項\n\n\nRspackAppOptions#\n\n\n\nRspack 應用配置選項介面：\n\n * css: CSS 輸出方式，可選 'css'（獨立檔案）或 'style'（內嵌樣式）\n * loaders: 自訂 loader 配置\n * styleLoader: style-loader 配置選項\n * cssLoader: css-loader 配置選項\n * target: 建置目標相容性配置\n * definePlugin: 全域常數定義\n * config: 配置鉤子函數\n\n\nRspackHtmlAppOptions#\n\n繼承自 RspackAppOptions，用於配置 HTML 應用的特定選項。\n\n\n函數匯出#\n\n\ncreateRspackApp#\n\n\n\n建立一個標準的 Rspack 應用實例。\n\n參數：\n\n * gez: Gez 框架實例\n * options: Rspack 應用配置選項\n\n回傳值：\n\n * 回傳一個 Promise，解析為建立的應用實例\n\n\ncreateRspackHtmlApp#\n\n\n\n建立一個 HTML 類型的 Rspack 應用實例。\n\n參數：\n\n * gez: Gez 框架實例\n * options: HTML 應用配置選項\n\n回傳值：\n\n * 回傳一個 Promise，解析為建立的 HTML 應用實例\n\n\n常數匯出#\n\n\nRSPACK_LOADER#\n\n\n\nRspack 內建的 loader 識別符映射物件，提供了常用的 loader 名稱常數：\n\n * builtinSwcLoader: Rspack 內建的 SWC loader，用於處理 TypeScript/JavaScript 檔案\n * lightningcssLoader: Rspack 內建的 lightningcss loader，用於處理 CSS 檔案的高效能編譯器\n * styleLoader: 用於將 CSS 注入到 DOM 中的 loader\n * cssLoader: 用於解析 CSS 檔案和處理 CSS 模組化的 loader\n * lessLoader: 用於將 Less 檔案編譯為 CSS 的 loader\n * styleResourcesLoader: 用於自動匯入全域樣式資源（如變數、mixins）的 loader\n * workerRspackLoader: 用於處理 Web Worker 檔案的 loader\n\n使用這些常數可以在配置中引用內建的 loader，避免手動輸入字串：\n\n\n\n注意事項：\n\n * 這些 loader 已經內建在 Rspack 中，無需額外安裝\n * 在自訂 loader 配置時，可以使用這些常數來替換預設的 loader 實作\n * 某些 loader（如 builtinSwcLoader）有特定的配置選項，請參考相應的配置文件\n\n\n模組匯出#\n\n\nrspack#\n\n重新匯出 @rspack/core 套件的所有內容，提供完整的 Rspack 核心功能。","routePath":"/zh-TW/api/app/rspack","lang":"zh-TW","toc":[{"text":"安裝","id":"安裝","depth":2,"charIndex":64},{"text":"類型匯出","id":"類型匯出","depth":2,"charIndex":99},{"text":"BuildTarget","id":"buildtarget","depth":3,"charIndex":107},{"text":"RspackAppConfigContext","id":"rspackappconfigcontext","depth":3,"charIndex":251},{"text":"RspackAppOptions","id":"rspackappoptions","depth":3,"charIndex":424},{"text":"RspackHtmlAppOptions","id":"rspackhtmlappoptions","depth":3,"charIndex":664},{"text":"函數匯出","id":"函數匯出","depth":2,"charIndex":729},{"text":"createRspackApp","id":"createrspackapp","depth":3,"charIndex":737},{"text":"createRspackHtmlApp","id":"createrspackhtmlapp","depth":3,"charIndex":863},{"text":"常數匯出","id":"常數匯出","depth":2,"charIndex":1003},{"text":"RSPACK_LOADER","id":"rspack_loader","depth":3,"charIndex":1011},{"text":"模組匯出","id":"模組匯出","depth":2,"charIndex":1638},{"text":"rspack","id":"rspack","depth":3,"charIndex":1646}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架 Rspack 建置工具","description":"Gez 框架的 Rspack 建置工具，提供高效能的應用建置能力，支援標準應用和 HTML 應用的開發與建置，內建多種資源處理器和優化配置。","head":[["meta",{"property":"keywords","content":"Gez, Rspack, 建置工具, 應用建置, HTML 應用, TypeScript, CSS, 資源處理, 效能優化"}]]},"version":""},{"id":302,"title":"App","content":"#\n\nApp 是 Gez 框架的應用抽象，提供了統一的介面來管理應用程式的生命週期、靜態資源和伺服器端渲染。\n\n\n\n\n類型定義#\n\n\nApp#\n\n\n\nmiddleware#\n\n * 類型: Middleware\n\n靜態資源處理中介軟體。\n\n開發環境：\n\n * 處理原始碼的靜態資源請求\n * 支援即時編譯和熱更新\n * 使用 no-cache 快取策略\n\n生產環境：\n\n * 處理建置後的靜態資源\n * 支援不可變檔案的長期快取（.final.xxx）\n * 最佳化的資源載入策略\n\n\n\nrender#\n\n * 類型: (options?: RenderContextOptions) => Promise\n\n伺服器端渲染函式。根據執行環境提供不同實作：\n\n * 生產環境（start）：載入建置後的伺服器端入口檔案（entry.server）執行渲染\n * 開發環境（dev）：載入原始碼中的伺服器端入口檔案執行渲染\n\n\n\nbuild#\n\n * 類型: () => Promise\n\n生產環境建置函式。用於資源打包和最佳化。建置成功返回 true，失敗返回 false。\n\ndestroy#\n\n * 類型: () => Promise\n\n資源清理函式。用於關閉伺服器、斷開連線等。清理成功返回 true，失敗返回 false。","routePath":"/zh-TW/api/core/app","lang":"zh-TW","toc":[{"text":"類型定義","id":"類型定義","depth":2,"charIndex":58},{"text":"App","id":"app-1","depth":3,"charIndex":-1},{"text":"middleware","id":"middleware","depth":4,"charIndex":74},{"text":"render","id":"render","depth":4,"charIndex":243},{"text":"build","id":"build","depth":4,"charIndex":412},{"text":"destroy","id":"destroy","depth":4,"charIndex":487}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架應用抽象介面","description":"詳細介紹 Gez 框架的 App 介面，包括應用程式生命週期管理、靜態資源處理和伺服器端渲染功能，幫助開發者理解和使用應用核心功能。","head":[["meta",{"property":"keywords","content":"Gez, App, 應用抽象, 生命週期, 靜態資源, 伺服器端渲染, API"}]]},"version":""},{"id":303,"title":"Gez","content":"","routePath":"/zh-TW/api/core/gez","lang":"zh-TW","toc":[{"text":"簡介","id":"簡介","depth":2,"charIndex":-1},{"text":"類型定義","id":"類型定義","depth":2,"charIndex":-1},{"text":"RuntimeTarget","id":"runtimetarget","depth":3,"charIndex":-1},{"text":"ImportMap","id":"importmap","depth":3,"charIndex":-1},{"text":"SpecifierMap","id":"specifiermap","depth":4,"charIndex":-1},{"text":"ScopesMap","id":"scopesmap","depth":4,"charIndex":-1},{"text":"COMMAND","id":"command","depth":3,"charIndex":-1},{"text":"實例選項","id":"實例選項","depth":2,"charIndex":-1},{"text":"root","id":"root","depth":4,"charIndex":-1},{"text":"isProd","id":"isprod","depth":4,"charIndex":-1},{"text":"basePathPlaceholder","id":"basepathplaceholder","depth":4,"charIndex":-1},{"text":"modules","id":"modules","depth":4,"charIndex":-1},{"text":"packs","id":"packs","depth":4,"charIndex":-1},{"text":"devApp","id":"devapp","depth":4,"charIndex":-1},{"text":"server","id":"server","depth":4,"charIndex":-1},{"text":"postBuild","id":"postbuild","depth":4,"charIndex":-1},{"text":"實例屬性","id":"實例屬性","depth":2,"charIndex":-1},{"text":"name","id":"name","depth":3,"charIndex":-1},{"text":"varName","id":"varname","depth":3,"charIndex":-1},{"text":"root","id":"root-1","depth":3,"charIndex":-1},{"text":"isProd","id":"isprod-1","depth":3,"charIndex":-1},{"text":"basePath","id":"basepath","depth":3,"charIndex":-1},{"text":"basePathPlaceholder","id":"basepathplaceholder-1","depth":3,"charIndex":-1},{"text":"middleware","id":"middleware","depth":3,"charIndex":-1},{"text":"render","id":"render","depth":3,"charIndex":-1},{"text":"COMMAND","id":"command-1","depth":3,"charIndex":-1},{"text":"moduleConfig","id":"moduleconfig","depth":3,"charIndex":-1},{"text":"packConfig","id":"packconfig","depth":3,"charIndex":-1},{"text":"實例方法","id":"實例方法","depth":2,"charIndex":-1},{"text":"constructor()","id":"constructor","depth":3,"charIndex":-1},{"text":"init()","id":"init","depth":3,"charIndex":-1},{"text":"destroy()","id":"destroy","depth":3,"charIndex":-1},{"text":"build()","id":"build","depth":3,"charIndex":-1},{"text":"server()","id":"server-1","depth":3,"charIndex":-1},{"text":"postBuild()","id":"postbuild-1","depth":3,"charIndex":-1},{"text":"resolvePath","id":"resolvepath","depth":3,"charIndex":-1},{"text":"writeSync()","id":"writesync","depth":3,"charIndex":-1},{"text":"readJsonSync()","id":"readjsonsync","depth":3,"charIndex":-1},{"text":"readJson()","id":"readjson","depth":3,"charIndex":-1},{"text":"getManifestList()","id":"getmanifestlist","depth":3,"charIndex":-1},{"text":"getImportMap()","id":"getimportmap","depth":3,"charIndex":-1},{"text":"getImportMapClientInfo()","id":"getimportmapclientinfo","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"框架核心類 API 參考","description":"詳細介紹 Gez 框架的核心類 API，包括應用生命週期管理、靜態資源處理和伺服器端渲染能力，幫助開發者深入理解框架的核心功能。","head":[["meta",{"property":"keywords","content":"Gez, API, 生命週期管理, 靜態資源, 伺服器端渲染, Rspack, Web 應用框架"}]]},"version":""},{"id":304,"title":"ManifestJson","content":"#\n\nmanifest.json 是 Gez 框架在建構過程中產生的清單檔案，用於記錄服務建構的產物資訊。它提供了統一的介面來管理建構產物、匯出檔案和資源大小統計。\n\n\n\n\n類型定義#\n\n\nManifestJson#\n\n\n\nname#\n\n * 類型: string\n\n服務名稱，來自於 GezOptions.name 配置。\n\nexports#\n\n * 類型: Record\n\n對外匯出的檔案映射關係，key 為原始檔案路徑，value 為建構後的檔案路徑。\n\nbuildFiles#\n\n * 類型: string[]\n\n建構產物的完整檔案清單，包含所有產生的檔案路徑。\n\nchunks#\n\n * 類型: Record\n\n原始檔案與編譯產物的對應關係，key 為原始檔案路徑，value 為編譯資訊。\n\n\nManifestJsonChunks#\n\n\n\njs#\n\n * 類型: string\n\n當前原始檔案編譯後的 JS 檔案路徑。\n\ncss#\n\n * 類型: string[]\n\n當前原始檔案關聯的 CSS 檔案路徑列表。\n\nresources#\n\n * 類型: string[]\n\n當前原始檔案關聯的其它資源檔案路徑列表。\n\nsizes#\n\n * 類型: ManifestJsonChunkSizes\n\n建構產物的大小統計資訊。\n\n\nManifestJsonChunkSizes#\n\n\n\njs#\n\n * 類型: number\n\nJS 檔案大小（位元組）。\n\ncss#\n\n * 類型: number\n\nCSS 檔案大小（位元組）。\n\nresource#\n\n * 類型: number\n\n資源檔案大小（位元組）。","routePath":"/zh-TW/api/core/manifest-json","lang":"zh-TW","toc":[{"text":"類型定義","id":"類型定義","depth":2,"charIndex":86},{"text":"ManifestJson","id":"manifestjson-1","depth":3,"charIndex":-1},{"text":"name","id":"name","depth":4,"charIndex":111},{"text":"exports","id":"exports","depth":4,"charIndex":163},{"text":"buildFiles","id":"buildfiles","depth":4,"charIndex":230},{"text":"chunks","id":"chunks","depth":4,"charIndex":286},{"text":"ManifestJsonChunks","id":"manifestjsonchunks","depth":3,"charIndex":352},{"text":"js","id":"js","depth":4,"charIndex":375},{"text":"css","id":"css","depth":4,"charIndex":416},{"text":"resources","id":"resources","depth":4,"charIndex":462},{"text":"sizes","id":"sizes","depth":4,"charIndex":513},{"text":"ManifestJsonChunkSizes","id":"manifestjsonchunksizes","depth":3,"charIndex":567},{"text":"js","id":"js-1","depth":4,"charIndex":594},{"text":"css","id":"css-1","depth":4,"charIndex":629},{"text":"resource","id":"resource","depth":4,"charIndex":666}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架建構清單檔案參考","description":"詳細介紹 Gez 框架的建構清單檔案（manifest.json）結構，包括建構產物管理、匯出檔案映射和資源統計功能，幫助開發者理解和使用建構系統。","head":[["meta",{"property":"keywords","content":"Gez, ManifestJson, 建構清單, 資源管理, 建構產物, 檔案映射, API"}]]},"version":""},{"id":305,"title":"ModuleConfig","content":"#\n\nModuleConfig 提供了 Gez 框架的模組配置功能，用於定義模組的匯入匯出規則、別名配置和外部依賴等。\n\n\n類型定義#\n\n\nPathType#\n\n * 類型定義:\n\n\n\n模組路徑類型列舉：\n\n * npm: 表示 node_modules 中的依賴\n * root: 表示專案根目錄下的檔案\n\n\nModuleConfig#\n\n * 類型定義:\n\n\n\n模組配置介面，用於定義服務的匯出、匯入和外部依賴配置。\n\nexports#\n\n匯出配置列表，將服務中的特定程式碼單元（如元件、工具函數等）以 ESM 格式對外暴露。\n\n支援兩種類型：\n\n * root:*: 匯出原始碼檔案，如：'root:src/components/button.vue'\n * npm:*: 匯出第三方依賴，如：'npm:vue'\n\nimports#\n\n匯入配置映射，配置需要匯入的遠端模組及其本地路徑。\n\n安裝方式不同，配置也不同：\n\n * 原始碼安裝（Workspace、Git）：需要指向 dist 目錄\n * 軟體包安裝（Link、靜態伺服器、私有鏡像源、File）：直接指向套件目錄\n\nexternals#\n\n外部依賴映射，配置要使用的外部依賴，通常是使用遠端模組中的依賴。\n\n範例：\n\n\n\n\nParsedModuleConfig#\n\n * 類型定義:\n\n\n\n解析後的模組配置，將原始的模組配置轉換為標準化的內部格式：\n\nname#\n\n目前服務的名稱\n\n * 用於識別模組和產生匯入路徑\n\nroot#\n\n目前服務的根目錄路徑\n\n * 用於解析相對路徑和建置產物的存放\n\nexports#\n\n匯出配置列表\n\n * name: 原始匯出路徑，如：'npm:vue' 或 'root:src/components'\n * type: 路徑類型（npm 或 root）\n * importName: 匯入名稱，格式：'${serviceName}/${type}/${path}'\n * exportName: 匯出路徑，相對於服務根目錄\n * exportPath: 實際的檔案路徑\n * externalName: 外部依賴名稱，用於其他服務匯入此模組時的識別\n\nimports#\n\n匯入配置列表\n\n * name: 外部服務的名稱\n * localPath: 本地儲存路徑，用於存放外部模組的建置產物\n\nexternals#\n\n外部依賴映射\n\n * 將模組的匯入路徑映射到實際的模組位置\n * match: 用於匹配匯入語句的正則表達式\n * import: 實際的模組路徑\n\n","routePath":"/zh-TW/api/core/module-config","lang":"zh-TW","toc":[{"text":"類型定義","id":"類型定義","depth":2,"charIndex":61},{"text":"PathType","id":"pathtype","depth":3,"charIndex":69},{"text":"ModuleConfig","id":"moduleconfig-1","depth":3,"charIndex":-1},{"text":"exports","id":"exports","depth":4,"charIndex":211},{"text":"imports","id":"imports","depth":4,"charIndex":360},{"text":"externals","id":"externals","depth":4,"charIndex":491},{"text":"ParsedModuleConfig","id":"parsedmoduleconfig","depth":3,"charIndex":545},{"text":"name","id":"name","depth":4,"charIndex":609},{"text":"root","id":"root","depth":4,"charIndex":643},{"text":"exports","id":"exports-1","depth":4,"charIndex":683},{"text":"imports","id":"imports-1","depth":4,"charIndex":928},{"text":"externals","id":"externals-1","depth":4,"charIndex":999}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架模組配置 API 參考","description":"詳細介紹 Gez 框架的 ModuleConfig 配置介面，包括模組匯入匯出規則、別名配置和外部依賴管理，幫助開發者深入理解框架的模組化系統。","head":[["meta",{"property":"keywords","content":"Gez, ModuleConfig, 模組配置, 模組匯入匯出, 外部依賴, 別名配置, 依賴管理, Web 應用框架"}]]},"version":""},{"id":306,"title":"PackConfig","content":"#\n\nPackConfig 是軟體包打包配置介面，用於將服務的建置產物打包成標準的 npm .tgz 格式軟體包。\n\n * 標準化：使用 npm 標準的 .tgz 打包格式\n * 完整性：包含模組的原始碼、類型宣告和設定檔等所有必要檔案\n * 相容性：與 npm 生態系統完全相容，支援標準的套件管理工作流程\n\n\n類型定義#\n\n\n\n\nPackConfig#\n\nenable#\n\n是否啟用打包功能。啟用後會將建置產物打包成標準的 npm .tgz 格式軟體包。\n\n * 類型：boolean\n * 預設值：false\n\noutputs#\n\n指定輸出的軟體包檔案路徑。支援以下配置方式：\n\n * string: 單一輸出路徑，如 'dist/versions/my-app.tgz'\n * string[]: 多個輸出路徑，用於同時產生多個版本\n * boolean: true 時使用預設路徑 'dist/client/versions/latest.tgz'\n\npackageJson#\n\n自訂 package.json 內容的回呼函式。在打包前呼叫，用於自訂 package.json 的內容。\n\n * 參數：\n   * gez: Gez - Gez 實例\n   * pkg: any - 原始的 package.json 內容\n * 回傳值：Promise - 修改後的 package.json 內容\n\n常見用途：\n\n * 修改套件名稱和版本號\n * 新增或更新相依項目\n * 新增自訂欄位\n * 配置發佈相關資訊\n\n範例：\n\n\n\nonBefore#\n\n打包前的準備工作回呼函式。\n\n * 參數：\n   * gez: Gez - Gez 實例\n   * pkg: Record - package.json 內容\n * 回傳值：Promise\n\n常見用途：\n\n * 新增額外的檔案（README、LICENSE 等）\n * 執行測試或建置驗證\n * 產生文件或元資料\n * 清理暫存檔案\n\n範例：\n\n\n\nonAfter#\n\n打包完成後的處理回呼函式。在 .tgz 檔案產生後呼叫，用於處理打包產物。\n\n * 參數：\n   * gez: Gez - Gez 實例\n   * pkg: Record - package.json 內容\n   * file: Buffer - 打包後的檔案內容\n * 回傳值：Promise\n\n常見用途：\n\n * 發佈到 npm 倉庫（公開或私有）\n * 上傳到靜態資源伺服器\n * 執行版本管理\n * 觸發 CI/CD 流程\n\n範例：\n\n\n\n\n使用範例#\n\n","routePath":"/zh-TW/api/core/pack-config","lang":"zh-TW","toc":[{"text":"類型定義","id":"類型定義","depth":2,"charIndex":156},{"text":"PackConfig","id":"packconfig-1","depth":3,"charIndex":-1},{"text":"enable","id":"enable","depth":4,"charIndex":179},{"text":"outputs","id":"outputs","depth":4,"charIndex":258},{"text":"packageJson","id":"packagejson","depth":4,"charIndex":430},{"text":"onBefore","id":"onbefore","depth":4,"charIndex":668},{"text":"onAfter","id":"onafter","depth":4,"charIndex":854},{"text":"使用範例","id":"使用範例","depth":2,"charIndex":1089}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架打包配置 API 參考","description":"詳細介紹 Gez 框架的 PackConfig 配置介面，包括軟體包打包規則、輸出配置和生命週期鉤子，幫助開發者實現標準化的建置流程。","head":[["meta",{"property":"keywords","content":"Gez, PackConfig, 軟體包打包, 建置配置, 生命週期鉤子, 打包配置, Web 應用框架"}]]},"version":""},{"id":307,"title":"RenderContext","content":"Hello World\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()} ${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()} ${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()} ${html}\n${rc.importmap()} ${rc.moduleEntry()} ${html} ${rc.importmap()}\n${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/zh-TW/api/core/render-context","lang":"zh-TW","toc":[{"text":"類型定義","id":"類型定義","depth":2,"charIndex":-1},{"text":"ServerRenderHandle","id":"serverrenderhandle","depth":3,"charIndex":-1},{"text":"RenderFiles","id":"renderfiles","depth":3,"charIndex":-1},{"text":"ImportmapMode","id":"importmapmode","depth":3,"charIndex":-1},{"text":"實例選項","id":"實例選項","depth":2,"charIndex":-1},{"text":"base","id":"base","depth":4,"charIndex":-1},{"text":"entryName","id":"entryname","depth":4,"charIndex":-1},{"text":"params","id":"params","depth":4,"charIndex":-1},{"text":"importmapMode","id":"importmapmode-1","depth":4,"charIndex":-1},{"text":"實例屬性","id":"實例屬性","depth":2,"charIndex":-1},{"text":"gez","id":"gez","depth":3,"charIndex":-1},{"text":"redirect","id":"redirect","depth":3,"charIndex":-1},{"text":"status","id":"status","depth":3,"charIndex":-1},{"text":"html","id":"html","depth":3,"charIndex":-1},{"text":"base","id":"base-1","depth":3,"charIndex":-1},{"text":"entryName","id":"entryname-1","depth":3,"charIndex":-1},{"text":"params","id":"params-1","depth":3,"charIndex":-1},{"text":"importMetaSet","id":"importmetaset","depth":3,"charIndex":-1},{"text":"files","id":"files","depth":3,"charIndex":-1},{"text":"importmapMode","id":"importmapmode-2","depth":3,"charIndex":-1},{"text":"實例方法","id":"實例方法","depth":2,"charIndex":-1},{"text":"serialize()","id":"serialize","depth":3,"charIndex":-1},{"text":"state()","id":"state","depth":3,"charIndex":-1},{"text":"commit()","id":"commit","depth":3,"charIndex":-1},{"text":"preload()","id":"preload","depth":3,"charIndex":-1},{"text":"css()","id":"css","depth":3,"charIndex":-1},{"text":"importmap()","id":"importmap","depth":3,"charIndex":-1},{"text":"moduleEntry()","id":"moduleentry","depth":3,"charIndex":-1},{"text":"modulePreload()","id":"modulepreload","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架渲染上下文 API 參考","description":"詳細介紹 Gez 框架的 RenderContext 核心類別，包括渲染控制、資源管理、狀態同步和路由控制等功能，幫助開發者實現高效的伺服器端渲染。","head":[["meta",{"property":"keywords","content":"Gez, RenderContext, SSR, 伺服器端渲染, 渲染上下文, 狀態同步, 資源管理, Web 應用框架"}]]},"version":""},{"id":308,"title":"從元件共享到原生模組化：Gez 微前端框架的演進之路","content":"#\n\n\n專案背景#\n\n在過去的幾年裡，微前端架構一直在尋找一條正確的道路。然而，我們看到的是各種複雜的技術方案，它們用層層包裝和人工隔離來模擬一個理想的微前端世界。這些方案帶來了沉重\n的效能負擔，讓簡單的開發變得複雜，讓標準的流程變得晦澀。\n\n\n傳統方案的局限性#\n\n在實踐微前端架構的過程中，我們深刻體會到傳統方案的諸多限制：\n\n * 效能損耗：執行時注入依賴、JS 沙箱代理，每一次操作都在消耗寶貴的效能\n * 脆弱的隔離：人工打造的沙箱環境，始終無法企及瀏覽器原生的隔離能力\n * 建置複雜性：為了處理依賴關係，不得不魔改建置工具，讓簡單的專案變得難以維護\n * 客製化規則：特殊的部署策略、執行時處理，讓每一步都偏離了現代開發的標準流程\n * 生態限制：框架耦合、客製化 API，讓技術選型被迫綁定在特定的生態中\n\n這些問題在我們 2019\n年的一個企業級專案中表現得尤為突出。當時，一個大型產品被拆分為十餘個獨立的業務子系統，這些子系統需要共享一套基礎元件和業務元件。最初採用的基於 npm\n套件的元件共享方案，在實踐中暴露出了嚴重的維護效率問題：當共享元件發生更新時，所有依賴該元件的子系統都需要經歷完整的建置和部署流程。\n\n\n技術演進#\n\n\nv1.0：探索遠端元件#\n\n為解決元件共享的效率問題，Gez v1.0 引入了基於 HTTP 協定的 RemoteView\n元件機制。這一方案通過執行時動態請求的方式實現了服務間的程式碼按需組裝，成功解決了建置依賴鏈過長的問題。然而，由於缺乏標準化的執行時通訊機制，服務間的狀態同步和\n事件傳遞仍然存在效率瓶頸。\n\n\nv2.0：模組聯邦嘗試#\n\n在 v2.0 版本中，我們採用了 Webpack 5.0 的模組聯邦（Module\nFederation）技術。這一技術通過統一的模組載入機制和執行時容器，顯著提升了服務間的協同效率。但在大規模實踐中，模組聯邦的封閉式實現機制帶來了新的挑戰：難\n以實現精確的依賴版本管理，特別是在統一多個服務的共享依賴時，經常遇到版本衝突和執行時異常。\n\n\n擁抱 ESM 新時代#\n\n在規劃 v3.0 版本時，我們深入觀察了前端生態的發展趨勢，發現瀏覽器原生能力的進步為微前端架構帶來了新的可能：\n\n\n標準化的模組系統#\n\n隨著主流瀏覽器對 ES Modules 的全面支援，以及 Import Maps 規範的成熟，前端開發迎來了真正的模組化時代。根據 Can I Use\n的統計數據，目前主流瀏覽器（Chrome >= 89、Edge >= 89、Firefox >= 108、Safari >= 16.4）對 ESM\n的原生支援率已達到 93.5%，這為我們提供了以下優勢：\n\n * 依賴管理標準化：Import Maps 提供了在瀏覽器層面解析模組依賴的能力，無需複雜的執行時注入\n * 資源載入優化：瀏覽器原生的模組快取機制，顯著提升了資源載入效率\n * 建置流程簡化：基於 ESM 的開發模式，使得開發環境和生產環境的建置流程更加一致\n\n同時，通過相容模式的支援（Chrome >= 87、Edge >= 88、Firefox >= 78、Safari >=\n14），我們可以將瀏覽器覆蓋率進一步提升至 96.81%，這讓我們能夠在保持高效能的同時，不犧牲對舊版瀏覽器的支援。\n\n\n效能與隔離的突破#\n\n原生模組系統帶來的不僅是標準化，更重要的是效能和隔離性的質的提升：\n\n * 零執行時開銷：告別了傳統微前端方案中的 JavaScript 沙箱代理和執行時注入\n * 可靠的隔離機制：ESM 嚴格的模組作用域天然提供了最可靠的隔離能力\n * 精確的依賴管理：靜態導入分析讓依賴關係更加清晰，版本控制更加精確\n\n\n建置工具的選擇#\n\n在技術方案的落地過程中，建置工具的選擇是一個關鍵決策點。經過近一年的技術調研和實踐，我們的選擇經歷了以下演進：\n\n 1. Vite 探索\n    \n    * 優勢：基於 ESM 的開發伺服器，提供極致的開發體驗\n    * 挑戰：開發環境和生產環境的建置差異，帶來了一定的不確定性\n\n 2. Rspack 確立\n    \n    * 效能優勢：基於 Rust 的高效能編譯，顯著提升了建置速度\n    * 生態支援：與 Webpack 生態的高度相容性，降低了遷移成本\n    * ESM 支援：通過 Rslib 專案的實踐，驗證了其在 ESM 建置方面的可靠性\n\n這一決策讓我們在保持開發體驗的同時，獲得了更穩定的生產環境支援。基於 ESM 和 Rspack 的組合，我們最終建置了一個高效能、低侵入性的微前端解決方案。\n\n\n未來展望#\n\n在未來的發展規劃中，Gez 框架將重點關注以下三個方向：\n\n\nImport Maps 深度優化#\n\n * 動態依賴管理：實現執行時依賴版本的智慧調度，解決多應用間的依賴衝突\n * 預載策略：基於路由分析的智慧預載，提升資源載入效率\n * 建置優化：自動生成最優的 Import Maps 配置，減少開發者的手動配置成本\n\n\n框架無關的路由方案#\n\n * 統一路由抽象：設計框架無關的路由介面，支援 Vue、React 等主流框架\n * 微應用路由：實現應用間的路由聯動，保持 URL 與應用狀態的一致性\n * 路由中介軟體：提供可擴充的中介軟體機制，支援權限控制、頁面轉場等功能\n\n\n跨框架通訊最佳實踐#\n\n * 範例應用：提供完整的跨框架通訊範例，涵蓋 Vue、React、Preact 等主流框架\n * 狀態同步：基於 ESM 實現的輕量級狀態共享方案\n * 事件匯流排：標準化的事件通訊機制，支援應用間的解耦通訊\n\n通過這些優化和擴充，我們期望讓 Gez 成為一個更加完善、易用的微前端解決方案，為開發者提供更好的開發體驗和更高的開發效率。","routePath":"/zh-TW/blog/birth-of-gez","lang":"zh-TW","toc":[{"text":"專案背景","id":"專案背景","depth":2,"charIndex":3},{"text":"傳統方案的局限性","id":"傳統方案的局限性","depth":3,"charIndex":122},{"text":"技術演進","id":"技術演進","depth":2,"charIndex":519},{"text":"v1.0：探索遠端元件","id":"v10探索遠端元件","depth":3,"charIndex":527},{"text":"v2.0：模組聯邦嘗試","id":"v20模組聯邦嘗試","depth":3,"charIndex":686},{"text":"擁抱 ESM 新時代","id":"擁抱-esm-新時代","depth":2,"charIndex":871},{"text":"標準化的模組系統","id":"標準化的模組系統","depth":3,"charIndex":943},{"text":"效能與隔離的突破","id":"效能與隔離的突破","depth":3,"charIndex":1389},{"text":"建置工具的選擇","id":"建置工具的選擇","depth":3,"charIndex":1555},{"text":"未來展望","id":"未來展望","depth":2,"charIndex":1930},{"text":"Import Maps 深度優化","id":"import-maps-深度優化","depth":3,"charIndex":1968},{"text":"框架無關的路由方案","id":"框架無關的路由方案","depth":3,"charIndex":2099},{"text":"跨框架通訊最佳實踐","id":"跨框架通訊最佳實踐","depth":3,"charIndex":2229}],"domain":"","frontmatter":{"titleSuffix":"從微前端困境到 ESM 創新：Gez 框架的演進之路","description":"深入探討 Gez 框架從傳統微前端架構的困境到基於 ESM 的創新突破，分享框架在效能優化、依賴管理和建置工具選型等方面的技術實踐經驗。","head":[["meta",{"property":"keywords","content":"Gez, 微前端框架, ESM, Import Maps, Rspack, 模組聯邦, 依賴管理, 效能優化, 技術演進, 伺服器端渲染"}]],"sidebar":false},"version":""},{"id":309,"title":"團隊部落格","content":"#\n\n歡迎來到 Gez 團隊的技術部落格！在這裡，我們將分享框架開發過程中的經驗、技術創新和最佳實踐。\n\n\n最新文章#\n\n * 2025-02-25 從元件共享到原生模組化：Gez 微前端框架的演進之路\n   \n   > 探索 Gez 框架從傳統元件共享到基於 ESM 的原生模組化演進歷程，分享在效能優化、依賴管理和建置工具選型等方面的技術實踐經驗。","routePath":"/zh-TW/blog/","lang":"zh-TW","toc":[{"text":"最新文章","id":"最新文章","depth":2,"charIndex":53}],"domain":"","frontmatter":{"titleSuffix":"Gez 團隊部落格","description":"Gez 團隊的技術部落格，分享框架開發經驗、最佳實踐和技術創新。","head":[["meta",{"property":"keywords","content":"Gez, 團隊部落格, 技術分享, 最佳實踐, 開發經驗"}]],"sidebar":false},"version":""},{"id":310,"title":"路徑別名","content":"#\n\n路徑別名（Path Alias）是一種模組導入路徑映射機制，它允許開發者使用簡短、語義化的識別符來替代完整的模組路徑。在 Gez 中，路徑別名機制具有以下優勢：\n\n * 簡化導入路徑：使用語義化的別名替代冗長的相對路徑，提高程式碼可讀性\n * 避免深層嵌套：消除多層級目錄引用（如 ../../../../）帶來的維護困難\n * 類型安全：與 TypeScript 的類型系統完全整合，提供程式碼補全和類型檢查\n * 模組解析優化：通過預定義的路徑映射，提升模組解析效能\n\n\n預設別名機制#\n\nGez 採用基於服務名稱（Service Name）的自動別名機制，這種約定優於配置的設計具有以下特點：\n\n * 自動配置：基於 package.json 中的 name 欄位自動生成別名，無需手動配置\n * 統一規範：確保所有服務模組遵循一致的命名和引用規範\n * 類型支援：配合 npm run build:dts 指令，自動生成類型宣告檔案，實現跨服務的類型推導\n * 可預測性：通過服務名稱即可推斷出模組的引用路徑，降低維護成本\n\n\n配置說明#\n\n\npackage.json 配置#\n\n在 package.json 中，通過 name 欄位定義服務的名稱，該名稱將作為服務的預設別名前綴：\n\n\n\n\ntsconfig.json 配置#\n\n為了使 TypeScript 能夠正確解析別名路徑，需要在 tsconfig.json 中配置 paths 映射：\n\n\n\n\n使用範例#\n\n\n導入服務內部模組#\n\n\n\n\n導入其他服務模組#\n\n\n\n最佳實踐\n * 優先使用別名路徑而不是相對路徑\n * 保持別名路徑的語義化和一致性\n * 避免在別名路徑中使用過多的目錄層級\n\n\n\n\n跨服務導入#\n\n當配置了模組連結（Module Link）後，可以使用相同的方式導入其他服務的模組：\n\n\n\n\n自定義別名#\n\n對於第三方套件或特殊場景，可以通過 Gez 配置檔案自定義別名：\n\n\n\n注意事項\n 1. 對於業務模組，建議始終使用預設的別名機制，以保持專案的一致性\n 2. 自定義別名主要用於處理第三方套件的特殊需求或優化開發體驗\n 3. 過度使用自定義別名可能會影響程式碼的可維護性和建置優化","routePath":"/zh-TW/guide/essentials/alias","lang":"zh-TW","toc":[{"text":"預設別名機制","id":"預設別名機制","depth":2,"charIndex":240},{"text":"配置說明","id":"配置說明","depth":2,"charIndex":470},{"text":"package.json 配置","id":"packagejson-配置","depth":3,"charIndex":478},{"text":"tsconfig.json 配置","id":"tsconfigjson-配置","depth":3,"charIndex":552},{"text":"使用範例","id":"使用範例","depth":2,"charIndex":633},{"text":"導入服務內部模組","id":"導入服務內部模組","depth":3,"charIndex":641},{"text":"導入其他服務模組","id":"導入其他服務模組","depth":3,"charIndex":655},{"text":"跨服務導入","id":"跨服務導入","depth":3,"charIndex":735},{"text":"自定義別名","id":"自定義別名","depth":3,"charIndex":790}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架模組導入路徑映射指南","description":"詳細介紹 Gez 框架的路徑別名機制，包括簡化導入路徑、避免深層嵌套、類型安全和模組解析優化等特性，幫助開發者提升程式碼可維護性。","head":[["meta",{"property":"keywords","content":"Gez, 路徑別名, Path Alias, TypeScript, 模組導入, 路徑映射, 程式碼可維護性"}]]},"version":""},{"id":311,"title":"基礎路徑","content":"#\n\n基礎路徑（Base Path）是指應用程式中靜態資源（如 JavaScript、CSS、圖片等）的存取路徑前綴。在 Gez\n中，合理配置基礎路徑對於以下場景至關重要：\n\n * 多環境部署：支援開發環境、測試環境、生產環境等不同環境的資源存取\n * 多區域部署：適應不同地區或國家的叢集部署需求\n * CDN 分發：實現靜態資源的全球分發和加速\n\n\n預設路徑機制#\n\nGez 採用基於服務名稱的自動路徑生成機制。預設情況下，框架會讀取專案 package.json 中的 name\n欄位來生成靜態資源的基礎路徑：/your-app-name/。\n\n\n\n這種約定優於配置的設計具有以下優勢：\n\n * 一致性：確保所有靜態資源使用統一的存取路徑\n * 可預測性：透過 package.json 的 name 欄位即可推斷出資源的存取路徑\n * 可維護性：無需額外配置，降低維護成本\n\n\n動態路徑配置#\n\n在實際專案中，我們經常需要將同一套程式碼部署到不同的環境或區域。Gez 提供了動態基礎路徑的支援，使得應用程式能夠適應不同的部署場景。\n\n\n使用場景#\n\n二級目錄部署#\n\n\n\n獨立網域部署#\n\n\n\n\n配置方法#\n\n透過 gez.render() 方法的 base 參數，你可以根據請求上下文動態設定基礎路徑：\n\n","routePath":"/zh-TW/guide/essentials/base-path","lang":"zh-TW","toc":[{"text":"預設路徑機制","id":"預設路徑機制","depth":2,"charIndex":176},{"text":"動態路徑配置","id":"動態路徑配置","depth":2,"charIndex":392},{"text":"使用場景","id":"使用場景","depth":3,"charIndex":471},{"text":"二級目錄部署","id":"二級目錄部署","depth":4,"charIndex":478},{"text":"獨立網域部署","id":"獨立網域部署","depth":4,"charIndex":489},{"text":"配置方法","id":"配置方法","depth":3,"charIndex":501}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架靜態資源路徑配置指南","description":"詳細介紹 Gez 框架的基礎路徑配置，包括多環境部署、CDN 分發和資源存取路徑設定，幫助開發者實現靈活的靜態資源管理。","head":[["meta",{"property":"keywords","content":"Gez, 基礎路徑, Base Path, CDN, 靜態資源, 多環境部署, 資源管理"}]]},"version":""},{"id":312,"title":"客戶端渲染","content":"\n${rc.importmap()} // 導入映射 ${rc.moduleEntry()} // 入口模組 ${rc.modulePreload()} //\n模組預載","routePath":"/zh-TW/guide/essentials/csr","lang":"zh-TW","toc":[{"text":"使用場景","id":"使用場景","depth":2,"charIndex":-1},{"text":"配置說明","id":"配置說明","depth":2,"charIndex":-1},{"text":"HTML 模板配置","id":"html-模板配置","depth":3,"charIndex":-1},{"text":"靜態 HTML 生成","id":"靜態-html-生成","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架客戶端渲染實作指南","description":"詳細介紹 Gez 框架的客戶端渲染機制，包括靜態建置、部署策略和最佳實踐，幫助開發者在無伺服器環境下實現高效的前端渲染。","head":[["meta",{"property":"keywords","content":"Gez, 客戶端渲染, CSR, 靜態建置, 前端渲染, 無伺服器部署, 效能優化"}]]},"version":""},{"id":313,"title":"模組連結","content":"#\n\nGez 框架提供了一套完整的模組連結機制，用於管理服務間的程式碼共享和依賴關係。該機制基於 ESM（ECMAScript\nModule）規範實現，支援原始碼層級的模組匯出和匯入，以及完整的依賴管理功能。\n\n\n核心概念#\n\n模組匯出#\n\n模組匯出是將服務中的特定程式碼單元（如元件、工具函數等）以 ESM 格式對外暴露的過程。支援兩種匯出類型：\n\n * 原始碼匯出：直接匯出專案中的原始碼檔案\n * 依賴匯出：匯出專案使用的第三方依賴套件\n\n模組匯入#\n\n模組匯入是在服務中引用其他服務匯出的程式碼單元的過程。支援多種安裝方式：\n\n * 原始碼安裝：適用於開發環境，支援即時修改和熱更新\n * 軟體包安裝：適用於生產環境，直接使用建置產物\n\n\n預載機制#\n\n為了優化服務效能，Gez 實現了智能的模組預載機制：\n\n 1. 依賴分析\n    \n    * 建置時分析元件間的依賴關係\n    * 識別關鍵路徑上的核心模組\n    * 確定模組的載入優先級\n\n 2. 載入策略\n    \n    * 立即載入：關鍵路徑上的核心模組\n    * 延遲載入：非關鍵功能模組\n    * 按需載入：條件渲染的模組\n\n 3. 資源優化\n    \n    * 智能的程式碼分割策略\n    * 模組層級的快取管理\n    * 按需編譯和打包\n\n\n模組匯出#\n\n\n配置說明#\n\n在 entry.node.ts 中配置需要匯出的模組：\n\n\n\n匯出配置支援兩種類型：\n\n * root:*：匯出原始碼檔案，路徑相對於專案根目錄\n * npm:*：匯出第三方依賴，直接指定套件名稱\n\n\n模組匯入#\n\n\n配置說明#\n\n在 entry.node.ts 中配置需要匯入的模組：\n\n\n\n配置項說明：\n\n 1. imports：配置遠端模組的本地路徑\n    \n    * 原始碼安裝：指向建置產物目錄（dist）\n    * 軟體包安裝：直接指向套件目錄\n\n 2. externals：配置外部依賴\n    \n    * 用於共享遠端模組中的依賴\n    * 避免重複打包相同依賴\n    * 支援多個模組共享依賴\n\n\n安裝方式#\n\n原始碼安裝#\n\n適用於開發環境，支援即時修改和熱更新。\n\n 1. Workspace 方式 推薦在 Monorepo 專案中使用：\n\n\n\n 2. Link 方式 用於本地開發除錯：\n\n\n\n軟體包安裝#\n\n適用於生產環境，直接使用建置產物。\n\n 1. NPM Registry 透過 npm registry 安裝：\n\n\n\n 2. 靜態伺服器 透過 HTTP/HTTPS 協定安裝：\n\n\n\n\n軟體包建置#\n\n\n配置說明#\n\n在 entry.node.ts 中配置建置選項：\n\n\n\n\n建置產物#\n\n\n\n\n發布流程#\n\n\n\n\n最佳實踐#\n\n\n開發環境配置#\n\n * 依賴管理\n   \n   * 使用 Workspace 或 Link 方式安裝依賴\n   * 統一管理依賴版本\n   * 避免重複安裝相同依賴\n\n * 開發體驗\n   \n   * 啟用熱更新功能\n   * 配置合適的預載策略\n   * 優化建置速度\n\n\n生產環境配置#\n\n * 部署策略\n   \n   * 使用 NPM Registry 或靜態伺服器\n   * 確保建置產物完整性\n   * 實施灰度發布機制\n\n * 效能優化\n   \n   * 合理配置資源預載\n   * 優化模組載入順序\n   * 實施有效的快取策略\n\n\n版本管理#\n\n * 版本規範\n   \n   * 遵循語意化版本規範\n   * 維護詳細的更新日誌\n   * 做好版本相容性測試\n\n * 依賴更新\n   \n   * 及時更新依賴套件\n   * 定期進行安全審計\n   * 保持依賴版本一致性\n\n","routePath":"/zh-TW/guide/essentials/module-link","lang":"zh-TW","toc":[{"text":"核心概念","id":"核心概念","depth":3,"charIndex":106},{"text":"模組匯出","id":"模組匯出","depth":4,"charIndex":113},{"text":"模組匯入","id":"模組匯入","depth":4,"charIndex":222},{"text":"預載機制","id":"預載機制","depth":3,"charIndex":323},{"text":"模組匯出","id":"模組匯出-1","depth":2,"charIndex":567},{"text":"配置說明","id":"配置說明","depth":3,"charIndex":575},{"text":"模組匯入","id":"模組匯入-1","depth":2,"charIndex":683},{"text":"配置說明","id":"配置說明-1","depth":3,"charIndex":691},{"text":"安裝方式","id":"安裝方式","depth":3,"charIndex":896},{"text":"原始碼安裝","id":"原始碼安裝","depth":4,"charIndex":903},{"text":"軟體包安裝","id":"軟體包安裝","depth":4,"charIndex":997},{"text":"軟體包建置","id":"軟體包建置","depth":2,"charIndex":1098},{"text":"配置說明","id":"配置說明-2","depth":3,"charIndex":1107},{"text":"建置產物","id":"建置產物","depth":3,"charIndex":1143},{"text":"發布流程","id":"發布流程","depth":3,"charIndex":1153},{"text":"最佳實踐","id":"最佳實踐","depth":2,"charIndex":1163},{"text":"開發環境配置","id":"開發環境配置","depth":3,"charIndex":1171},{"text":"生產環境配置","id":"生產環境配置","depth":3,"charIndex":1309},{"text":"版本管理","id":"版本管理","depth":3,"charIndex":1445}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架服務間程式碼共享機制","description":"詳細介紹 Gez 框架的模組連結機制，包括服務間程式碼共享、依賴管理和 ESM 規範實現，幫助開發者構建高效的微前端應用。","head":[["meta",{"property":"keywords","content":"Gez, 模組連結, Module Link, ESM, 程式碼共享, 依賴管理, 微前端"}]]},"version":""},{"id":314,"title":"渲染上下文","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/zh-TW/guide/essentials/render-context","lang":"zh-TW","toc":[{"text":"使用方式","id":"使用方式","depth":2,"charIndex":-1},{"text":"主要功能","id":"主要功能","depth":2,"charIndex":-1},{"text":"依賴收集","id":"依賴收集","depth":3,"charIndex":-1},{"text":"按需收集","id":"按需收集","depth":4,"charIndex":-1},{"text":"自動化處理","id":"自動化處理","depth":4,"charIndex":-1},{"text":"效能優化","id":"效能優化","depth":4,"charIndex":-1},{"text":"資源注入","id":"資源注入","depth":3,"charIndex":-1},{"text":"資源注入順序","id":"資源注入順序","depth":3,"charIndex":-1},{"text":"完整渲染流程","id":"完整渲染流程","depth":2,"charIndex":-1},{"text":"進階特性","id":"進階特性","depth":2,"charIndex":-1},{"text":"基礎路徑配置","id":"基礎路徑配置","depth":3,"charIndex":-1},{"text":"導入映射模式","id":"導入映射模式","depth":3,"charIndex":-1},{"text":"入口函數配置","id":"入口函數配置","depth":3,"charIndex":-1},{"text":"最佳實踐","id":"最佳實踐","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架服務端渲染核心機制","description":"詳細介紹 Gez 框架的渲染上下文（RenderContext）機制，包括資源管理、HTML 生成和 ESM 模組系統，幫助開發者理解和使用服務端渲染功能。","head":[["meta",{"property":"keywords","content":"Gez, 渲染上下文, RenderContext, SSR, 服務端渲染, ESM, 資源管理"}]]},"version":""},{"id":315,"title":"Rspack","content":"#\n\nGez 基於 Rspack 建置系統實現，充分利用了 Rspack 的高效能建置能力。本文檔將介紹 Rspack 在 Gez 框架中的定位和核心功能。\n\n\n特性#\n\nRspack 是 Gez 框架的核心建置系統，它提供了以下關鍵特性：\n\n * 高效能建置：基於 Rust 實現的建置引擎，提供極速的編譯效能，顯著提升大型專案的建置速度\n * 開發體驗優化：支援熱更新（HMR）、增量編譯等現代開發特性，提供流暢的開發體驗\n * 多環境建置：統一的建置配置支援客戶端（client）、伺服器端（server）和 Node.js（node）環境，簡化多端開發流程\n * 資源優化：內建的資源處理和優化能力，支援程式碼分割、Tree Shaking、資源壓縮等特性\n\n\n建置應用#\n\nGez 的 Rspack 建置系統採用模組化設計，主要包含以下核心模組：\n\n\n@gez/rspack#\n\n基礎建置模組，提供以下核心能力：\n\n * 統一建置配置：提供標準化的建置配置管理，支援多環境配置\n * 資源處理：內建對 TypeScript、CSS、圖片等資源的處理能力\n * 建置優化：提供程式碼分割、Tree Shaking 等效能優化特性\n * 開發伺服器：整合高效能的開發伺服器，支援 HMR\n\n\n@gez/rspack-vue#\n\nVue 框架專用建置模組，提供：\n\n * Vue 元件編譯：支援 Vue 2/3 元件的高效編譯\n * SSR 優化：針對伺服器端渲染場景的特定優化\n * 開發增強：Vue 開發環境的特定功能增強\n\n\n建置流程#\n\nGez 的建置流程主要分為以下幾個階段：\n\n 1. 配置初始化\n    \n    * 載入專案配置\n    * 合併預設配置和使用者配置\n    * 根據環境變數調整配置\n\n 2. 資源編譯\n    \n    * 解析原始碼相依\n    * 轉換各類資源（TypeScript、CSS 等）\n    * 處理模組匯入匯出\n\n 3. 優化處理\n    \n    * 執行程式碼分割\n    * 應用 Tree Shaking\n    * 壓縮程式碼和資源\n\n 4. 輸出生成\n    \n    * 生成目標檔案\n    * 輸出資源映射\n    * 生成建置報告\n\n\n最佳實踐#\n\n\n開發環境優化#\n\n * 增量編譯配置：合理配置 cache 選項，利用快取加快建置速度\n * HMR 優化：針對性配置熱更新範圍，避免不必要的模組更新\n * 資源處理優化：使用適當的 loader 配置，避免重複處理\n\n\n生產環境優化#\n\n * 程式碼分割策略：合理配置 splitChunks，優化資源載入\n * 資源壓縮：啟用適當的壓縮配置，平衡建置時間和產物大小\n * 快取優化：利用內容雜湊和長期快取策略，提升載入效能\n\n\n配置範例#\n\n\n\nTIP\n\n更多詳細的 API 說明和配置選項，請參考 Rspack API 文件。","routePath":"/zh-TW/guide/essentials/rspack","lang":"zh-TW","toc":[{"text":"特性","id":"特性","depth":2,"charIndex":80},{"text":"建置應用","id":"建置應用","depth":2,"charIndex":334},{"text":"@gez/rspack","id":"gezrspack","depth":3,"charIndex":380},{"text":"@gez/rspack-vue","id":"gezrspack-vue","depth":3,"charIndex":548},{"text":"建置流程","id":"建置流程","depth":2,"charIndex":667},{"text":"最佳實踐","id":"最佳實踐","depth":2,"charIndex":957},{"text":"開發環境優化","id":"開發環境優化","depth":3,"charIndex":965},{"text":"生產環境優化","id":"生產環境優化","depth":3,"charIndex":1076},{"text":"配置範例","id":"配置範例","depth":2,"charIndex":1181}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架高效能建置引擎","description":"深入解析 Gez 框架的 Rspack 建置系統，包括高效能編譯、多環境建置、資源優化等核心特性，協助開發者建置高效、可靠的現代 Web 應用。","head":[["meta",{"property":"keywords","content":"Gez, Rspack, 建置系統, 高效能編譯, 熱更新, 多環境建置, Tree Shaking, 程式碼分割, SSR, 資源優化, 開發效率, 建置工具"}]]},"version":""},{"id":316,"title":"標準規範","content":"#\n\nGez 是一個現代化的 SSR 框架，採用標準化的專案結構和路徑解析機制，以確保專案在開發和生產環境中的一致性和可維護性。\n\n\n專案結構規範#\n\n\n標準目錄結構#\n\n\n\n拓展知識\n * gez.name 來源於 package.json 的 name 欄位\n * dist/package.json 來源於根目錄的 package.json\n * 設定 packs.enable 為 true 時，才會對 dist 目錄進行歸檔\n\n\n入口檔案規範#\n\n\nentry.client.ts#\n\n用戶端入口檔案負責：\n\n * 初始化應用：設定用戶端應用的基礎設定\n * 路由管理：處理用戶端路由和導航\n * 狀態管理：實現用戶端狀態的儲存和更新\n * 互動處理：管理使用者事件和介面互動\n\n\nentry.server.ts#\n\n伺服器端入口檔案負責：\n\n * 伺服器端渲染：執行 SSR 渲染流程\n * HTML 生成：建立初始頁面結構\n * 資料預取：處理伺服器端資料獲取\n * 狀態注入：將伺服器端狀態傳遞給用戶端\n * SEO 優化：確保頁面的搜尋引擎優化\n\n\nentry.node.ts#\n\nNode.js 伺服器入口檔案負責：\n\n * 伺服器設定：設定 HTTP 伺服器參數\n * 路由處理：管理伺服器端路由規則\n * 中介軟體整合：設定伺服器中介軟體\n * 環境管理：處理環境變數和設定\n * 請求回應：處理 HTTP 請求和回應\n\n\n設定檔規範#\n\n\npackage.json#\n\n\n\n\ntsconfig.json#\n\n","routePath":"/zh-TW/guide/essentials/std","lang":"zh-TW","toc":[{"text":"專案結構規範","id":"專案結構規範","depth":2,"charIndex":66},{"text":"標準目錄結構","id":"標準目錄結構","depth":3,"charIndex":76},{"text":"入口檔案規範","id":"入口檔案規範","depth":2,"charIndex":219},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":229},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":345},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":483},{"text":"設定檔規範","id":"設定檔規範","depth":2,"charIndex":623},{"text":"package.json","id":"packagejson","depth":3,"charIndex":632},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":650}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架專案結構與規範指南","description":"詳細介紹 Gez 框架的標準專案結構、入口檔案規範和設定檔規範，幫助開發者建立規範化、可維護的 SSR 應用。","head":[["meta",{"property":"keywords","content":"Gez, 專案結構, 入口檔案, 設定規範, SSR框架, TypeScript, 專案規範, 開發標準"}]]},"version":""},{"id":317,"title":"HTML","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/zh-TW/guide/frameworks/html","lang":"zh-TW","toc":[{"text":"專案結構","id":"專案結構","depth":2,"charIndex":-1},{"text":"專案配置","id":"專案配置","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"原始碼結構","id":"原始碼結構","depth":2,"charIndex":-1},{"text":"app.ts","id":"appts","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"執行專案","id":"執行專案","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架 HTML SSR 應用範例","description":"從零開始搭建基於 Gez 的 HTML SSR 應用，透過實例展示框架的基本用法，包括專案初始化、HTML 配置和入口檔案設定。","head":[["meta",{"property":"keywords","content":"Gez, HTML, SSR應用, TypeScript配置, 專案初始化, 伺服器端渲染, 客戶端互動"}]]},"version":""},{"id":318,"title":"Preact+HTM","content":"${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/zh-TW/guide/frameworks/preact-htm","lang":"zh-TW","toc":[{"text":"專案結構","id":"專案結構","depth":2,"charIndex":-1},{"text":"專案配置","id":"專案配置","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"原始碼結構","id":"原始碼結構","depth":2,"charIndex":-1},{"text":"app.ts","id":"appts","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"執行專案","id":"執行專案","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架 Preact+HTM SSR 應用範例","description":"從零開始搭建基於 Gez 的 Preact+HTM SSR 應用，透過實例展示框架的基本用法，包括專案初始化、Preact 配置和入口檔案設定。","head":[["meta",{"property":"keywords","content":"Gez, Preact, HTM, SSR應用, TypeScript配置, 專案初始化, 伺服器端渲染, 客戶端互動"}]]},"version":""},{"id":319,"title":"Vue2","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/zh-TW/guide/frameworks/vue2","lang":"zh-TW","toc":[{"text":"專案結構","id":"專案結構","depth":2,"charIndex":-1},{"text":"專案配置","id":"專案配置","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"原始碼結構","id":"原始碼結構","depth":2,"charIndex":-1},{"text":"app.vue","id":"appvue","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"執行專案","id":"執行專案","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架 Vue2 SSR 應用範例","description":"從零開始搭建基於 Gez 的 Vue2 SSR 應用，透過實例展示框架的基本用法，包括專案初始化、Vue2 配置和入口檔案設定。","head":[["meta",{"property":"keywords","content":"Gez, Vue2, SSR應用, TypeScript配置, 專案初始化, 伺服器端渲染, 客戶端互動"}]]},"version":""},{"id":320,"title":"Vue3","content":"${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/zh-TW/guide/frameworks/vue3","lang":"zh-TW","toc":[{"text":"專案結構","id":"專案結構","depth":2,"charIndex":-1},{"text":"專案配置","id":"專案配置","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"原始碼結構","id":"原始碼結構","depth":2,"charIndex":-1},{"text":"app.vue","id":"appvue","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"執行專案","id":"執行專案","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架 Vue3 SSR 應用範例","description":"從零開始搭建基於 Gez 的 Vue3 SSR 應用，透過實例展示框架的基本用法，包括專案初始化、Vue3 配置和入口檔案設定。","head":[["meta",{"property":"keywords","content":"Gez, Vue3, SSR應用, TypeScript配置, 專案初始化, 伺服器端渲染, 客戶端互動, 組合式API"}]]},"version":""},{"id":321,"title":"環境要求","content":"#\n\n本文檔介紹了使用本框架所需的環境要求，包括 Node.js 環境和瀏覽器相容性。\n\n\nNode.js 環境#\n\n框架要求 Node.js 版本 >= 22.6，主要用於支援 TypeScript 類型導入（透過 --experimental-strip-types\n標誌），無需額外編譯步驟。\n\n\n瀏覽器相容性#\n\n框架預設採用相容模式建置，以支援更廣泛的瀏覽器。但需要注意，要實現完整的瀏覽器相容支援，需要手動添加 es-module-shims 依賴。\n\n\n相容模式（預設）#\n\n * 🌐 Chrome：>= 87\n * 🔷 Edge：>= 88\n * 🦊 Firefox：>= 78\n * 🧭 Safari：>= 14\n\n根據 Can I Use 的統計數據，相容模式下的瀏覽器覆蓋率達到 96.81%。\n\n\n原生支援模式#\n\n * 🌐 Chrome：>= 89\n * 🔷 Edge：>= 89\n * 🦊 Firefox：>= 108\n * 🧭 Safari：>= 16.4\n\n原生支援模式具有以下優勢：\n\n * 零執行時開銷，無需額外的模組載入器\n * 瀏覽器原生解析，更快的執行速度\n * 更好的程式碼分割和按需載入能力\n\n根據 Can I Use 的統計數據，相容模式下的瀏覽器覆蓋率達到 93.5%。\n\n\n啟用相容支援#\n\n重要提示\n\n雖然框架預設使用相容模式建置，但要實現對舊版瀏覽器的完整支援，您需要在專案中添加 es-module-shims 依賴。\n\n在 HTML 文件中添加以下腳本：\n\n\n\n最佳實踐\n 1. 生產環境建議：\n    * 將 es-module-shims 部署到自有伺服器\n    * 確保資源載入的穩定性和存取速度\n    * 避免潛在的安全風險\n 2. 效能考量：\n    * 相容模式會帶來少量效能開銷\n    * 可以根據目標用戶群的瀏覽器分佈決定是否啟用","routePath":"/zh-TW/guide/start/environment","lang":"zh-TW","toc":[{"text":"Node.js 環境","id":"nodejs-環境","depth":2,"charIndex":45},{"text":"瀏覽器相容性","id":"瀏覽器相容性","depth":2,"charIndex":151},{"text":"相容模式（預設）","id":"相容模式預設","depth":3,"charIndex":233},{"text":"原生支援模式","id":"原生支援模式","depth":3,"charIndex":364},{"text":"啟用相容支援","id":"啟用相容支援","depth":3,"charIndex":570}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架相容性指南","description":"詳細介紹 Gez 框架的環境要求，包括 Node.js 版本要求和瀏覽器相容性說明，幫助開發者正確配置開發環境。","head":[["meta",{"property":"keywords","content":"Gez, Node.js, 瀏覽器相容性, TypeScript, es-module-shims, 環境配置"}]]},"version":""},{"id":322,"title":"快速開始","content":"#\n\n\n專案初始化#\n\n建立並初始化一個新的 Gez 專案，請按照以下步驟操作：\n\n\n\n\n框架版本選擇#\n\nGez 框架提供了多個技術棧版本，每個版本都針對不同的應用場景進行了優化。請根據專案需求選擇合適的版本：\n\n\nHTML#\n\n適用於追求極簡架構的專案：\n\n * 零外部依賴，啟動即用\n * 原生 JavaScript 開發體驗\n * 適合建置靜態網站和輕量級應用\n * 支援漸進式功能擴展\n\n查看 HTML 版本詳細文件\n\n\nVue2#\n\n適用於企業級應用開發：\n\n * 完整的 TypeScript 支援\n * 豐富的第三方元件生態\n * 成熟的開發工具鏈\n * 經過生產環境驗證的穩定性\n\n查看 Vue2 版本詳細文件\n\n\nVue3#\n\n適用於現代化 Web 應用開發：\n\n * 基於 Proxy 的響應式系統\n * 組合式 API 支援\n * 更優的執行時效能\n * 更小的打包體積\n\n查看 Vue3 版本詳細文件\n\n\nPreact+HTM#\n\n適用於追求輕量級和高效能的專案：\n\n * 極小的執行時體積（3KB）\n * 原生 JavaScript 模板語法\n * 與 React 相容的 API\n * 優秀的效能表現\n\n查看 Preact+HTM 版本詳細文件\n\n\nAI 輔助開發#\n\nGez 框架提供了 AI 輔助開發能力，可以顯著提升開發效率：\n\n 1. 選擇適合的框架版本文檔\n 2. 將文件內容提供給 AI 助手\n 3. AI 將自動生成專案骨架和設定檔\n\n提示\n\nAI 輔助開發不僅能加快專案初始化速度，還能確保專案結構符合最佳實踐。","routePath":"/zh-TW/guide/start/getting-started","lang":"zh-TW","toc":[{"text":"專案初始化","id":"專案初始化","depth":2,"charIndex":3},{"text":"框架版本選擇","id":"框架版本選擇","depth":2,"charIndex":44},{"text":"HTML","id":"html","depth":3,"charIndex":108},{"text":"Vue2","id":"vue2","depth":3,"charIndex":215},{"text":"Vue3","id":"vue3","depth":3,"charIndex":316},{"text":"Preact+HTM","id":"preacthtm","depth":3,"charIndex":415},{"text":"AI 輔助開發","id":"ai-輔助開發","depth":2,"charIndex":539}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架快速入門指南","description":"Gez 框架快速入門指南，幫助你從零開始搭建專案，包括專案初始化、框架版本選擇以及 AI 輔助開發等內容。","head":[["meta",{"name":"keywords","content":"Gez框架, 快速開始, 專案初始化, Vue開發, HTML開發, AI輔助"}]]},"version":""},{"id":323,"title":"介紹","content":"#\n\n\n專案背景#\n\nGez 是一個基於 ECMAScript Modules (ESM) 的現代微前端框架，專注於構建高效能、可擴展的服務端渲染（SSR）應用。作為 Genesis\n專案的第三代產品，Gez 在技術演進過程中不斷創新：\n\n * v1.0：基於 HTTP 請求實現遠端元件按需載入\n * v2.0：基於 Webpack Module Federation 實現應用整合\n * v3.0：基於瀏覽器原生 ESM 重新設計模組連結系統\n\n\n技術背景#\n\n在微前端架構發展過程中，傳統解決方案主要存在以下局限：\n\n\n現有方案的挑戰#\n\n * 效能瓶頸：執行時依賴注入和 JavaScript 沙箱代理帶來顯著的效能開銷\n * 隔離機制：自研沙箱環境難以企及瀏覽器原生的模組隔離能力\n * 建置複雜性：為實現依賴共享而進行的建置工具改造，增加了專案維護成本\n * 標準偏離：特殊的部署策略和執行時處理機制，與現代 Web 開發標準相悖\n * 生態限制：框架耦合和客製 API 導致技術棧選擇受限\n\n\n技術創新#\n\nGez 基於現代 Web 標準，提供了全新的解決方案：\n\n * 原生模組系統：利用瀏覽器原生 ESM 和 Import Maps 實現依賴管理，具有更快的解析和執行速度\n * 標準隔離機制：基於 ECMAScript 模組作用域實現可靠的應用隔離\n * 開放技術棧：支援任意現代前端框架的無縫接入\n * 最佳化開發體驗：提供符合直覺的開發模式和完整的除錯能力\n * 極致效能最佳化：透過原生能力實現零執行時開銷，配合智慧快取策略\n\nTIP\n\nGez 專注於打造高效能、易擴展的微前端基礎設施，尤其適合大規模服務端渲染應用場景。\n\n\n技術規範#\n\n\n環境依賴#\n\n請參考環境要求文件了解詳細的瀏覽器和 Node.js 環境要求。\n\n\n核心技術棧#\n\n * 依賴管理：採用 Import Maps 實現模組映射，使用 es-module-shims 提供相容支援\n * 建置系統：基於 Rspack 的 module-import 處理外部依賴\n * 開發工具鏈：支援 ESM 熱更新和 TypeScript 原生執行\n\n\n框架定位#\n\nGez 不同於 Next.js 或 Nuxt.js，而是專注於提供微前端基礎設施：\n\n * 模組連結系統：實現高效、可靠的模組匯入匯出\n * 服務端渲染：提供靈活的 SSR 實現機制\n * 型別系統支援：整合完整的 TypeScript 型別定義\n * 框架中立性：支援主流前端框架整合\n\n\n架構設計#\n\n\n中心化依賴管理#\n\n * 統一依賴源：集中化的第三方依賴管理\n * 自動化分發：依賴更新的全域自動同步\n * 版本一致性：精確的依賴版本控制\n\n\n模組化設計#\n\n * 職責分離：業務邏輯與基礎設施解耦\n * 外掛機制：支援模組的靈活組合與替換\n * 標準介面：規範化的模組間通訊協定\n\n\n效能最佳化#\n\n * 零開銷原則：最大化利用瀏覽器原生能力\n * 智慧快取：基於內容雜湊的精確快取策略\n * 按需載入：精細化的程式碼分割與依賴管理\n\n\n專案成熟度#\n\nGez 透過近 5 年的迭代演進（v1.0 至\nv3.0），已在企業級環境中得到全面驗證。目前支撐數十個業務專案穩定運行，並持續推動技術棧現代化升級。框架的穩定性、可靠性和效能優勢已在實踐中得到充分檢驗，為大\n規模應用開發提供了可靠的技術基礎。","routePath":"/zh-TW/guide/start/introduction","lang":"zh-TW","toc":[{"text":"專案背景","id":"專案背景","depth":2,"charIndex":3},{"text":"技術背景","id":"技術背景","depth":2,"charIndex":225},{"text":"現有方案的挑戰","id":"現有方案的挑戰","depth":3,"charIndex":262},{"text":"技術創新","id":"技術創新","depth":3,"charIndex":453},{"text":"技術規範","id":"技術規範","depth":2,"charIndex":726},{"text":"環境依賴","id":"環境依賴","depth":3,"charIndex":734},{"text":"核心技術棧","id":"核心技術棧","depth":3,"charIndex":776},{"text":"框架定位","id":"框架定位","depth":2,"charIndex":920},{"text":"架構設計","id":"架構設計","depth":2,"charIndex":1073},{"text":"中心化依賴管理","id":"中心化依賴管理","depth":3,"charIndex":1081},{"text":"模組化設計","id":"模組化設計","depth":3,"charIndex":1154},{"text":"效能最佳化","id":"效能最佳化","depth":3,"charIndex":1225},{"text":"專案成熟度","id":"專案成熟度","depth":2,"charIndex":1302}],"domain":"","frontmatter":{"titleSuffix":"Gez 框架概述與技術創新","description":"深入了解 Gez 微前端框架的專案背景、技術演進和核心優勢，探索基於 ESM 的現代化服務端渲染解決方案。","head":[["meta",{"property":"keywords","content":"Gez, 微前端, ESM, 服務端渲染, SSR, 技術創新, 模組聯邦"}]]},"version":""}]