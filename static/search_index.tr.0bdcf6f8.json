[{"id":250,"title":"@gez/rspack-vue","content":"#\n\nRspack Vue paketi, Vue framework'üne dayalı Rspack uygulamaları oluşturmak ve\nyapılandırmak için bir dizi API sağlar. Vue bileşenlerinin geliştirilmesi,\nyapılandırılması ve sunucu taraflı render işlemlerini destekler.\n\n\nKurulum#\n\nPaket yöneticisi kullanarak @gez/rspack-vue geliştirme bağımlılığını yükleyin:\n\n\nTür İhracı#\n\n\nBuildTarget#\n\n\n\nYapı hedef ortam türü, uygulamanın yapı hedef ortamını tanımlar ve yapı\nsürecindeki belirli optimizasyonları ve işlevleri yapılandırmak için kullanılır:\n\n * node: Node.js ortamında çalışacak kod olarak yapılandırır\n * client: Tarayıcı ortamında çalışacak kod olarak yapılandırır\n * server: Sunucu ortamında çalışacak kod olarak yapılandırır\n\n\nRspackAppConfigContext#\n\n\n\nRspack uygulama yapılandırma bağlamı arayüzü, yapılandırma kancası işlevlerinde\nerişilebilen bağlam bilgilerini sağlar:\n\n * gez: Gez framework örneği\n * buildTarget: Mevcut yapı hedefi (client/server/node)\n * config: Rspack yapılandırma nesnesi\n * options: Uygulama yapılandırma seçenekleri\n\n\nRspackAppOptions#\n\n\n\nRspack uygulama yapılandırma seçenekleri arayüzü:\n\n * css: CSS çıktı yöntemi, 'css' (bağımsız dosya) veya 'style' (satır içi stil)\n   seçeneklerinden biri olabilir\n * loaders: Özel loader yapılandırması\n * styleLoader: style-loader yapılandırma seçenekleri\n * cssLoader: css-loader yapılandırma seçenekleri\n * target: Yapı hedefi uyumluluk yapılandırması\n * definePlugin: Global sabit tanımları\n * config: Yapılandırma kancası işlevi\n\n\nRspackHtmlAppOptions#\n\nRspackAppOptions arayüzünden türetilmiştir ve HTML uygulamaları için özel\nseçenekleri yapılandırmak için kullanılır.\n\n\nFonksiyon İhracı#\n\n\ncreateRspackApp#\n\n\n\nStandart bir Rspack uygulama örneği oluşturur.\n\nParametreler:\n\n * gez: Gez framework örneği\n * options: Rspack uygulama yapılandırma seçenekleri\n\nDönüş Değeri:\n\n * Oluşturulan uygulama örneğini çözümleyen bir Promise döndürür\n\n\ncreateRspackHtmlApp#\n\n\n\nHTML türünde bir Rspack uygulama örneği oluşturur.\n\nParametreler:\n\n * gez: Gez framework örneği\n * options: HTML uygulama yapılandırma seçenekleri\n\nDönüş Değeri:\n\n * Oluşturulan HTML uygulama örneğini çözümleyen bir Promise döndürür\n\n\nSabit İhracı#\n\n\nRSPACK_LOADER#\n\n\n\nRspack'ın dahili loader tanımlayıcıları eşleme nesnesi, yaygın kullanılan loader\nisimleri için sabitler sağlar:\n\n * builtinSwcLoader: TypeScript/JavaScript dosyalarını işlemek için Rspack'ın\n   dahili SWC loader'ı\n * lightningcssLoader: CSS dosyalarını işlemek için Rspack'ın yüksek\n   performanslı lightningcss derleyicisi\n * styleLoader: CSS'yi DOM'a enjekte etmek için kullanılan loader\n * cssLoader: CSS dosyalarını ayrıştırmak ve CSS modülerleştirmeyi işlemek için\n   kullanılan loader\n * lessLoader: Less dosyalarını CSS'ye derlemek için kullanılan loader\n * styleResourcesLoader: Global stil kaynaklarını (değişkenler, mixins gibi)\n   otomatik olarak içe aktarmak için kullanılan loader\n * workerRspackLoader: Web Worker dosyalarını işlemek için kullanılan loader\n\nBu sabitleri kullanarak yapılandırmada dahili loader'lara referans verebilir ve\nmanuel olarak dize yazmaktan kaçınabilirsiniz:\n\n\n\nDikkat Edilmesi Gerekenler:\n\n * Bu loader'lar Rspack'ın içinde yerleşik olarak bulunur, ek kurulum\n   gerektirmez\n * Özel loader yapılandırması yaparken, bu sabitleri kullanarak varsayılan\n   loader uygulamalarını değiştirebilirsiniz\n * Bazı loader'lar (builtinSwcLoader gibi) belirli yapılandırma seçeneklerine\n   sahiptir, ilgili yapılandırma belgelerine başvurun\n\n\nModül İhracı#\n\n\nrspack#\n\n@rspack/core paketinin tüm içeriğini yeniden ihraç eder ve Rspack'ın temel\nişlevlerinin tamamını sağlar.","routePath":"/tr/api/app/rspack-vue","lang":"tr","toc":[{"text":"Kurulum","id":"kurulum","depth":2,"charIndex":222},{"text":"Tür İhracı","id":"tür-i̇hracı","depth":2,"charIndex":313},{"text":"BuildTarget","id":"buildtarget","depth":3,"charIndex":327},{"text":"RspackAppConfigContext","id":"rspackappconfigcontext","depth":3,"charIndex":686},{"text":"RspackAppOptions","id":"rspackappoptions","depth":3,"charIndex":1006},{"text":"RspackHtmlAppOptions","id":"rspackhtmlappoptions","depth":3,"charIndex":1463},{"text":"Fonksiyon İhracı","id":"fonksiyon-i̇hracı","depth":2,"charIndex":1605},{"text":"createRspackApp","id":"createrspackapp","depth":3,"charIndex":1625},{"text":"createRspackHtmlApp","id":"createrspackhtmlapp","depth":3,"charIndex":1873},{"text":"Sabit İhracı","id":"sabit-i̇hracı","depth":2,"charIndex":2132},{"text":"RSPACK_LOADER","id":"rspack_loader","depth":3,"charIndex":2148},{"text":"Modül İhracı","id":"modül-i̇hracı","depth":2,"charIndex":3436},{"text":"rspack","id":"rspack","depth":3,"charIndex":3452}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Vue Yapı Aracı","description":"Gez Framework'ün Vue için özel yapı aracı, Vue 2/3 uygulamaları için tam destek sunar. Bileşen geliştirme, SSR render ve performans optimizasyonu gibi özellikleri içerir.","head":[["meta",{"property":"keywords","content":"Gez, Rspack, Vue, Vue2, Vue3, SSR, Yapı Aracı, Bileşen Geliştirme, Sunucu Taraflı Render, Performans Optimizasyonu"}]]},"version":""},{"id":251,"title":"@gez/rspack","content":"#\n\nRspack paketi, Rspack uygulamaları oluşturmak ve yapılandırmak için bir API seti\nsağlar, standart uygulamalar ve HTML uygulamalarının yapılandırılmasını ve\ngeliştirilmesini destekler.\n\n\nKurulum#\n\nPaket yöneticisi kullanarak @gez/rspack geliştirme bağımlılığını yükleyin:\n\n\nTür İhracı#\n\n\nBuildTarget#\n\n\n\nYapı hedef ortamı türü, uygulamanın yapı hedef ortamını tanımlar, yapı\nsürecindeki belirli optimizasyonlar ve işlevler için kullanılır:\n\n * node: Node.js ortamında çalışacak kod olarak yapılandırma\n * client: Tarayıcı ortamında çalışacak kod olarak yapılandırma\n * server: Sunucu ortamında çalışacak kod olarak yapılandırma\n\n\nRspackAppConfigContext#\n\n\n\nRspack uygulama yapılandırma bağlamı arayüzü, yapılandırma kancası işlevlerinde\nerişilebilen bağlam bilgilerini sağlar:\n\n * gez: Gez çerçevesi örneği\n * buildTarget: Mevcut yapı hedefi (client/server/node)\n * config: Rspack yapılandırma nesnesi\n * options: Uygulama yapılandırma seçenekleri\n\n\nRspackAppOptions#\n\n\n\nRspack uygulama yapılandırma seçenekleri arayüzü:\n\n * css: CSS çıktı yöntemi, 'css' (bağımsız dosya) veya 'style' (satır içi stil)\n   seçenekleri\n * loaders: Özel loader yapılandırması\n * styleLoader: style-loader yapılandırma seçenekleri\n * cssLoader: css-loader yapılandırma seçenekleri\n * target: Yapı hedefi uyumluluk yapılandırması\n * definePlugin: Global sabit tanımları\n * config: Yapılandırma kancası işlevi\n\n\nRspackHtmlAppOptions#\n\nRspackAppOptions'dan miras alır, HTML uygulamaları için özel seçenekleri\nyapılandırmak için kullanılır.\n\n\nFonksiyon İhracı#\n\n\ncreateRspackApp#\n\n\n\nStandart bir Rspack uygulama örneği oluşturur.\n\nParametreler:\n\n * gez: Gez çerçevesi örneği\n * options: Rspack uygulama yapılandırma seçenekleri\n\nDönüş Değeri:\n\n * Oluşturulan uygulama örneğini çözen bir Promise döndürür\n\n\ncreateRspackHtmlApp#\n\n\n\nHTML türünde bir Rspack uygulama örneği oluşturur.\n\nParametreler:\n\n * gez: Gez çerçevesi örneği\n * options: HTML uygulama yapılandırma seçenekleri\n\nDönüş Değeri:\n\n * Oluşturulan HTML uygulama örneğini çözen bir Promise döndürür\n\n\nSabit İhracı#\n\n\nRSPACK_LOADER#\n\n\n\nRspack'in yerleşik loader tanımlayıcıları eşleme nesnesi, yaygın kullanılan\nloader adları için sabitler sağlar:\n\n * builtinSwcLoader: TypeScript/JavaScript dosyalarını işlemek için Rspack'in\n   yerleşik SWC loader'ı\n * lightningcssLoader: CSS dosyalarını yüksek performansla derlemek için\n   Rspack'in yerleşik lightningcss loader'ı\n * styleLoader: CSS'yi DOM'a enjekte etmek için kullanılan loader\n * cssLoader: CSS dosyalarını ayrıştırmak ve CSS modülerleştirmeyi işlemek için\n   kullanılan loader\n * lessLoader: Less dosyalarını CSS'ye derlemek için kullanılan loader\n * styleResourcesLoader: Global stil kaynaklarını (değişkenler, mixins gibi)\n   otomatik olarak içe aktarmak için kullanılan loader\n * workerRspackLoader: Web Worker dosyalarını işlemek için kullanılan loader\n\nBu sabitleri kullanarak yapılandırmada yerleşik loader'lara referans verebilir\nve manuel olarak dize girmekten kaçınabilirsiniz:\n\n\n\nDikkat Edilmesi Gerekenler:\n\n * Bu loader'lar Rspack'te yerleşik olarak bulunur, ek kurulum gerektirmez\n * Özel loader yapılandırması yaparken, varsayılan loader uygulamalarını\n   değiştirmek için bu sabitleri kullanabilirsiniz\n * Bazı loader'lar (builtinSwcLoader gibi) belirli yapılandırma seçeneklerine\n   sahiptir, lütfen ilgili yapılandırma belgelerine bakın\n\n\nModül İhracı#\n\n\nrspack#\n\n@rspack/core paketinin tüm içeriğini yeniden ihraç eder, Rspack'in temel\nişlevlerinin tamamını sağlar.","routePath":"/tr/api/app/rspack","lang":"tr","toc":[{"text":"Kurulum","id":"kurulum","depth":2,"charIndex":188},{"text":"Tür İhracı","id":"tür-i̇hracı","depth":2,"charIndex":275},{"text":"BuildTarget","id":"buildtarget","depth":3,"charIndex":289},{"text":"RspackAppConfigContext","id":"rspackappconfigcontext","depth":3,"charIndex":631},{"text":"RspackAppOptions","id":"rspackappoptions","depth":3,"charIndex":951},{"text":"RspackHtmlAppOptions","id":"rspackhtmlappoptions","depth":3,"charIndex":1390},{"text":"Fonksiyon İhracı","id":"fonksiyon-i̇hracı","depth":2,"charIndex":1519},{"text":"createRspackApp","id":"createrspackapp","depth":3,"charIndex":1539},{"text":"createRspackHtmlApp","id":"createrspackhtmlapp","depth":3,"charIndex":1782},{"text":"Sabit İhracı","id":"sabit-i̇hracı","depth":2,"charIndex":2036},{"text":"RSPACK_LOADER","id":"rspack_loader","depth":3,"charIndex":2052},{"text":"Modül İhracı","id":"modül-i̇hracı","depth":2,"charIndex":3349},{"text":"rspack","id":"rspack","depth":3,"charIndex":3365}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Rspack Yapı Aracı","description":"Gez çerçevesinin Rspack yapı aracı, yüksek performanslı uygulama yapı yetenekleri sunar, standart uygulamalar ve HTML uygulamalarının geliştirilmesini ve yapılandırılmasını destekler, yerleşik çeşitli kaynak işlemciler ve optimizasyon yapılandırmaları içerir.","head":[["meta",{"property":"keywords","content":"Gez, Rspack, yapı aracı, uygulama yapısı, HTML uygulaması, TypeScript, CSS, kaynak işleme, performans optimizasyonu"}]]},"version":""},{"id":252,"title":"App","content":"#\n\nApp, Gez çerçevesinin uygulama soyutlamasıdır ve uygulamanın yaşam döngüsünü,\nstatik kaynakları ve sunucu tarafı renderlamayı yönetmek için birleşik bir\narayüz sağlar.\n\n\n\n\nTür Tanımları#\n\n\nApp#\n\n\n\nmiddleware#\n\n * Tür: Middleware\n\nStatik kaynak işleme middleware'i.\n\nGeliştirme ortamı:\n\n * Kaynak kodun statik kaynak isteklerini işler\n * Gerçek zamanlı derleme ve sıcak yenileme desteği\n * no-cache önbellek stratejisi kullanır\n\nÜretim ortamı:\n\n * Derlenmiş statik kaynakları işler\n * Değişmez dosyalar için uzun süreli önbellek desteği (.final.xxx)\n * Optimize edilmiş kaynak yükleme stratejisi\n\n\n\nrender#\n\n * Tür: (options?: RenderContextOptions) => Promise\n\nSunucu tarafı renderlama fonksiyonu. Çalışma ortamına göre farklı uygulamalar\nsağlar:\n\n * Üretim ortamı (start): Derlenmiş sunucu giriş dosyasını (entry.server)\n   yükleyerek renderlama yapar\n * Geliştirme ortamı (dev): Kaynak kodundaki sunucu giriş dosyasını yükleyerek\n   renderlama yapar\n\n\n\nbuild#\n\n * Tür: () => Promise\n\nÜretim ortamı derleme fonksiyonu. Kaynak paketleme ve optimizasyon için\nkullanılır. Derleme başarılı olursa true, başarısız olursa false döner.\n\ndestroy#\n\n * Tür: () => Promise\n\nKaynak temizleme fonksiyonu. Sunucuyu kapatma, bağlantıları kesme vb. için\nkullanılır. Temizleme başarılı olursa true, başarısız olursa false döner.","routePath":"/tr/api/core/app","lang":"tr","toc":[{"text":"Tür Tanımları","id":"tür-tanımları","depth":2,"charIndex":174},{"text":"App","id":"app-1","depth":3,"charIndex":-1},{"text":"middleware","id":"middleware","depth":4,"charIndex":199},{"text":"render","id":"render","depth":4,"charIndex":600},{"text":"build","id":"build","depth":4,"charIndex":956},{"text":"destroy","id":"destroy","depth":4,"charIndex":1132}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Uygulama Soyutlama Arayüzü","description":"Gez çerçevesinin App arayüzünü detaylı olarak açıklar, uygulama yaşam döngüsü yönetimi, statik kaynak işleme ve sunucu tarafı renderlama özelliklerini içerir, geliştiricilerin uygulama çekirdek işlevlerini anlamasına ve kullanmasına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, App, Uygulama Soyutlama, Yaşam Döngüsü, Statik Kaynaklar, Sunucu Tarafı Renderlama, API"}]]},"version":""},{"id":253,"title":"Gez","content":"#\n\n\nGiriş#\n\nGez, Rspack tabanlı yüksek performanslı bir Web uygulama çerçevesidir ve\neksiksiz bir uygulama yaşam döngüsü yönetimi, statik kaynak işleme ve sunucu\ntarafı render özellikleri sunar.\n\n\nTür Tanımları#\n\n\nRuntimeTarget#\n\n * Tür Tanımı:\n\n\n\nUygulama çalışma zamanı ortamı türü:\n\n * client: Tarayıcı ortamında çalışır, DOM işlemleri ve tarayıcı API'larını\n   destekler\n * server: Node.js ortamında çalışır, dosya sistemi ve sunucu tarafı işlevleri\n   destekler\n\n\nImportMap#\n\n * Tür Tanımı:\n\n\n\nES modülü import haritalama türü.\n\nSpecifierMap#\n\n * Tür Tanımı:\n\n\n\nModül tanımlayıcı haritalama türü, modül import yollarının haritalanmasını\ntanımlamak için kullanılır.\n\nScopesMap#\n\n * Tür Tanımı:\n\n\n\nKapsam haritalama türü, belirli bir kapsam altındaki modül import\nharitalamalarını tanımlamak için kullanılır.\n\n\nCOMMAND#\n\n * Tür Tanımı:\n\n\n\nKomut türü numaralandırması:\n\n * dev: Geliştirme ortamı komutu, geliştirme sunucusunu başlatır ve sıcak\n   yenilemeyi destekler\n * build: Derleme komutu, üretim ortamı için derleme çıktıları oluşturur\n * preview: Önizleme komutu, yerel önizleme sunucusunu başlatır\n * start: Başlatma komutu, üretim ortamı sunucusunu çalıştırır\n\n\nÖrnek Seçenekleri#\n\nGez çerçevesinin temel yapılandırma seçeneklerini tanımlar.\n\n\n\nroot#\n\n * Tür: string\n * Varsayılan: process.cwd()\n\nProje kök dizini yolu. Mutlak yol veya göreli yol olabilir, göreli yollar mevcut\nçalışma dizinine göre çözümlenir.\n\nisProd#\n\n * Tür: boolean\n * Varsayılan: process.env.NODE_ENV === 'production'\n\nOrtam belirteci.\n\n * true: Üretim ortamı\n * false: Geliştirme ortamı\n\nbasePathPlaceholder#\n\n * Tür: string | false\n * Varsayılan: '[[[___GEZ_DYNAMIC_BASE___]]]'\n\nTemel yol yer tutucusu yapılandırması. Çalışma zamanında kaynakların temel\nyolunu dinamik olarak değiştirmek için kullanılır. false olarak ayarlanırsa bu\nözellik devre dışı bırakılır.\n\nmodules#\n\n * Tür: ModuleConfig\n\nModül yapılandırma seçenekleri. Projenin modül çözümleme kurallarını\nyapılandırmak için kullanılır, modül takma adları, harici bağımlılıklar gibi\nyapılandırmaları içerir.\n\npacks#\n\n * Tür: PackConfig\n\nPaketleme yapılandırma seçenekleri. Derleme çıktılarını standart npm .tgz\nformatında yazılım paketleri halinde paketlemek için kullanılır.\n\ndevApp#\n\n * Tür: (gez: Gez) => Promise\n\nGeliştirme ortamı uygulama oluşturma işlevi. Yalnızca geliştirme ortamında\nkullanılır, geliştirme sunucusu için uygulama örneği oluşturmak için kullanılır.\n\n\n\nserver#\n\n * Tür: (gez: Gez) => Promise\n\nSunucu başlatma yapılandırma işlevi. HTTP sunucusunu yapılandırmak ve başlatmak\niçin kullanılır, geliştirme ve üretim ortamlarında kullanılabilir.\n\n\n\npostBuild#\n\n * Tür: (gez: Gez) => Promise\n\nDerleme sonrası işlem işlevi. Proje derlendikten sonra çalıştırılır, şunlar için\nkullanılabilir:\n\n * Ek kaynak işleme\n * Dağıtım işlemleri\n * Statik dosyalar oluşturma\n * Derleme bildirimi gönderme\n\n\nÖrnek Özellikleri#\n\n\nname#\n\n * Tür: string\n * Salt Okunur: true\n\nMevcut modülün adı, modül yapılandırmasından alınır.\n\n\nvarName#\n\n * Tür: string\n * Salt Okunur: true\n\nModül adına dayalı geçerli bir JavaScript değişken adı.\n\n\nroot#\n\n * Tür: string\n * Salt Okunur: true\n\nProje kök dizininin mutlak yolu. root göreli yol olarak yapılandırılmışsa,\nmevcut çalışma dizinine göre çözümlenir.\n\n\nisProd#\n\n * Tür: boolean\n * Salt Okunur: true\n\nMevcut ortamın üretim ortamı olup olmadığını belirler. Öncelikle yapılandırma\nseçeneklerindeki isProd kullanılır, yapılandırılmamışsa process.env.NODE_ENV\ndeğerine göre belirlenir.\n\n\nbasePath#\n\n * Tür: string\n * Salt Okunur: true\n * Fırlatır: NotReadyError - Çerçeve başlatılmamışsa\n\nEğik çizgi ile başlayan ve biten modül temel yolunu alır. Döndürülen format\n/${name}/ şeklindedir, burada name modül yapılandırmasından alınır.\n\n\nbasePathPlaceholder#\n\n * Tür: string\n * Salt Okunur: true\n\nÇalışma zamanında dinamik olarak değiştirilecek temel yol yer tutucusunu alır.\nYapılandırma ile devre dışı bırakılabilir.\n\n\nmiddleware#\n\n * Tür: Middleware\n * Salt Okunur: true\n\nStatik kaynak işleme ara katmanını alır. Ortama göre farklı uygulamalar sağlar:\n\n * Geliştirme ortamı: Kaynak kodun gerçek zamanlı derlenmesini ve sıcak\n   yenilemeyi destekler\n * Üretim ortamı: Statik kaynakların uzun süreli önbelleğe alınmasını destekler\n\n\n\n\nrender#\n\n * Tür: (options?: RenderContextOptions) => Promise\n * Salt Okunur: true\n\nSunucu tarafı render işlevini alır. Ortama göre farklı uygulamalar sağlar:\n\n * Geliştirme ortamı: Sıcak yenileme ve gerçek zamanlı önizlemeyi destekler\n * Üretim ortamı: Optimize edilmiş render performansı sağlar\n\n\n\n\nCOMMAND#\n\n * Tür: typeof COMMAND\n * Salt Okunur: true\n\nKomut numaralandırma tür tanımını alır.\n\n\nmoduleConfig#\n\n * Tür: ParsedModuleConfig\n * Salt Okunur: true\n * Fırlatır: NotReadyError - Çerçeve başlatılmamışsa\n\nMevcut modülün tam yapılandırma bilgilerini alır, modül çözümleme kuralları,\ntakma ad yapılandırmaları gibi bilgileri içerir.\n\n\npackConfig#\n\n * Tür: ParsedPackConfig\n * Salt Okunur: true\n * Fırlatır: NotReadyError - Çerçeve başlatılmamışsa\n\nMevcut modülün paketleme ile ilgili yapılandırmalarını alır, çıktı yolu,\npackage.json işleme gibi bilgileri içerir.\n\n\nÖrnek Metodları#\n\n\nconstructor()#\n\n * Parametreler:\n   * options?: GezOptions - Çerçeve yapılandırma seçenekleri\n * Dönüş Değeri: Gez\n\nGez çerçevesi örneği oluşturur.\n\n\n\n\ninit()#\n\n * Parametreler: command: COMMAND\n * Dönüş Değeri: Promise\n * Fırlatır:\n   * Error: Tekrar başlatma sırasında\n   * NotReadyError: Başlatılmamış örneğe erişim sırasında\n\nGez çerçevesi örneğini başlatır. Aşağıdaki temel başlatma işlemlerini\ngerçekleştirir:\n\n 1. Proje yapılandırmasını çözümleme (package.json, modül yapılandırması,\n    paketleme yapılandırması vb.)\n 2. Uygulama örneği oluşturma (geliştirme ortamı veya üretim ortamı)\n 3. Komuta göre ilgili yaşam döngüsü metodlarını çalıştırma\n\n::: uyarı Dikkat\n\n * Tekrar başlatma sırasında hata fırlatır\n * Başlatılmamış örneğe erişim sırasında NotReadyError fırlatır\n\n:::\n\n\n\n\ndestroy()#\n\n * Dönüş Değeri: Promise\n\nGez çerçevesi örneğini yok eder, kaynak temizleme ve bağlantı kapatma gibi\nişlemleri gerçekleştirir. Temel olarak şunlar için kullanılır:\n\n * Geliştirme sunucusunu kapatma\n * Geçici dosyaları ve önbelleği temizleme\n * Sistem kaynaklarını serbest bırakma\n\n\n\n\nbuild()#\n\n * Dönüş Değeri: Promise\n\nUygulamanın derleme sürecini gerçekleştirir, şunları içerir:\n\n * Kaynak kodun derlenmesi\n * Üretim ortamı için derleme çıktılarının oluşturulması\n * Kodun optimize edilmesi ve sıkıştırılması\n * Kaynak envanterinin oluşturulması\n\n::: uyarı Dikkat Çerçeve örneği başlatılmadan çağrılırsa NotReadyError fırlatır\n:::\n\n\n\n\nserver()#\n\n * Dönüş Değeri: Promise\n * Fırlatır: NotReadyError - Çerçeve başlatılmamışsa\n\nHTTP sunucusunu ve yapılandırma sunucusu örneğini başlatır. Aşağıdaki yaşam\ndöngülerinde çağrılır:\n\n * Geliştirme ortamı (dev): Geliştirme sunucusunu başlatır, sıcak yenileme\n   sağlar\n * Üretim ortamı (start): Üretim sunucusunu başlatır, üretim düzeyinde\n   performans sağlar\n\n\n\n\npostBuild()#\n\n * Dönüş Değeri: Promise\n\nDerleme sonrası işlem mantığını gerçekleştirir, şunlar için kullanılır:\n\n * Statik HTML dosyaları oluşturma\n * Derleme çıktılarını işleme\n * Dağıtım görevlerini gerçekleştirme\n * Derleme bildirimi gönderme\n\n","routePath":"/tr/api/core/gez","lang":"tr","toc":[{"text":"Giriş","id":"giriş","depth":2,"charIndex":3},{"text":"Tür Tanımları","id":"tür-tanımları","depth":2,"charIndex":196},{"text":"RuntimeTarget","id":"runtimetarget","depth":3,"charIndex":213},{"text":"ImportMap","id":"importmap","depth":3,"charIndex":468},{"text":"SpecifierMap","id":"specifiermap","depth":4,"charIndex":533},{"text":"ScopesMap","id":"scopesmap","depth":4,"charIndex":670},{"text":"COMMAND","id":"command","depth":3,"charIndex":813},{"text":"Örnek Seçenekleri","id":"örnek-seçenekleri","depth":2,"charIndex":1171},{"text":"root","id":"root","depth":4,"charIndex":1254},{"text":"isProd","id":"isprod","depth":4,"charIndex":1422},{"text":"basePathPlaceholder","id":"basepathplaceholder","depth":4,"charIndex":1571},{"text":"modules","id":"modules","depth":4,"charIndex":1848},{"text":"packs","id":"packs","depth":4,"charIndex":2052},{"text":"devApp","id":"devapp","depth":4,"charIndex":2220},{"text":"server","id":"server","depth":4,"charIndex":2419},{"text":"postBuild","id":"postbuild","depth":4,"charIndex":2609},{"text":"Örnek Özellikleri","id":"örnek-özellikleri","depth":2,"charIndex":2852},{"text":"name","id":"name","depth":3,"charIndex":2873},{"text":"varName","id":"varname","depth":3,"charIndex":2972},{"text":"root","id":"root-1","depth":3,"charIndex":3077},{"text":"isProd","id":"isprod-1","depth":3,"charIndex":3239},{"text":"basePath","id":"basepath","depth":3,"charIndex":3469},{"text":"basePathPlaceholder","id":"basepathplaceholder-1","depth":3,"charIndex":3716},{"text":"middleware","id":"middleware","depth":3,"charIndex":3899},{"text":"render","id":"render","depth":3,"charIndex":4214},{"text":"COMMAND","id":"command-1","depth":3,"charIndex":4514},{"text":"moduleConfig","id":"moduleconfig","depth":3,"charIndex":4611},{"text":"packConfig","id":"packconfig","depth":3,"charIndex":4856},{"text":"Örnek Metodları","id":"örnek-metodları","depth":2,"charIndex":5087},{"text":"constructor()","id":"constructor","depth":3,"charIndex":5106},{"text":"init()","id":"init","depth":3,"charIndex":5258},{"text":"destroy()","id":"destroy","depth":3,"charIndex":5895},{"text":"build()","id":"build","depth":3,"charIndex":6191},{"text":"server()","id":"server-1","depth":3,"charIndex":-1},{"text":"postBuild()","id":"postbuild-1","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Çerçeve Çekirdek Sınıfı API Referansı","description":"Gez çerçevesinin çekirdek sınıf API'lerini detaylı olarak açıklar, uygulama yaşam döngüsü yönetimi, statik kaynak işleme ve sunucu tarafı render özelliklerini içerir, geliştiricilerin çerçevenin temel işlevlerini derinlemesine anlamasına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, API, yaşam döngüsü yönetimi, statik kaynak, sunucu tarafı render, Rspack, Web uygulama çerçevesi"}]]},"version":""},{"id":254,"title":"ManifestJson","content":"#\n\nmanifest.json, Gez çerçevesinin derleme sürecinde oluşturulan bir manifest\ndosyasıdır ve hizmet derleme çıktılarını kaydetmek için kullanılır. Derleme\nçıktılarını yönetmek, dosyaları dışa aktarmak ve kaynak boyut istatistikleri\nsağlamak için birleşik bir arayüz sunar.\n\n\n\n\nTür Tanımları#\n\n\nManifestJson#\n\n\n\nname#\n\n * Tür: string\n\nHizmet adı, GezOptions.name yapılandırmasından alınır.\n\nexports#\n\n * Tür: Record\n\nDışa aktarılan dosyaların eşleme ilişkisi, anahtar kaynak dosya yolu, değer ise\nderlenmiş dosya yoludur.\n\nbuildFiles#\n\n * Tür: string[]\n\nDerleme çıktılarının tam dosya listesi, oluşturulan tüm dosya yollarını içerir.\n\nchunks#\n\n * Tür: Record\n\nKaynak dosyalar ile derleme çıktıları arasındaki ilişki, anahtar kaynak dosya\nyolu, değer ise derleme bilgileridir.\n\n\nManifestJsonChunks#\n\n\n\njs#\n\n * Tür: string\n\nMevcut kaynak dosyanın derlenmiş JS dosyasının yolu.\n\ncss#\n\n * Tür: string[]\n\nMevcut kaynak dosya ile ilişkili CSS dosyalarının yolları.\n\nresources#\n\n * Tür: string[]\n\nMevcut kaynak dosya ile ilişkili diğer kaynak dosyalarının yolları.\n\nsizes#\n\n * Tür: ManifestJsonChunkSizes\n\nDerleme çıktılarının boyut istatistikleri.\n\n\nManifestJsonChunkSizes#\n\n\n\njs#\n\n * Tür: number\n\nJS dosyasının boyutu (bayt cinsinden).\n\ncss#\n\n * Tür: number\n\nCSS dosyasının boyutu (bayt cinsinden).\n\nresource#\n\n * Tür: number\n\nKaynak dosyalarının boyutu (bayt cinsinden).","routePath":"/tr/api/core/manifest-json","lang":"tr","toc":[{"text":"Tür Tanımları","id":"tür-tanımları","depth":2,"charIndex":275},{"text":"ManifestJson","id":"manifestjson-1","depth":3,"charIndex":-1},{"text":"name","id":"name","depth":4,"charIndex":309},{"text":"exports","id":"exports","depth":4,"charIndex":388},{"text":"buildFiles","id":"buildfiles","depth":4,"charIndex":520},{"text":"chunks","id":"chunks","depth":4,"charIndex":632},{"text":"ManifestJsonChunks","id":"manifestjsonchunks","depth":3,"charIndex":775},{"text":"js","id":"js","depth":4,"charIndex":798},{"text":"css","id":"css","depth":4,"charIndex":873},{"text":"resources","id":"resources","depth":4,"charIndex":957},{"text":"sizes","id":"sizes","depth":4,"charIndex":1056},{"text":"ManifestJsonChunkSizes","id":"manifestjsonchunksizes","depth":3,"charIndex":1141},{"text":"js","id":"js-1","depth":4,"charIndex":1168},{"text":"css","id":"css-1","depth":4,"charIndex":1229},{"text":"resource","id":"resource","depth":4,"charIndex":1292}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Manifest Dosyası Referansı","description":"Gez çerçevesinin manifest dosyasının (manifest.json) yapısını detaylı olarak açıklar, derleme çıktılarını yönetme, dosya eşleme ve kaynak istatistikleri gibi özellikleri kapsar, geliştiricilerin derleme sistemini anlamasına ve kullanmasına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, ManifestJson, Derleme Manifesti, Kaynak Yönetimi, Derleme Çıktıları, Dosya Eşleme, API"}]]},"version":""},{"id":255,"title":"ModuleConfig","content":"#\n\nModuleConfig, Gez çerçevesinin modül yapılandırma işlevlerini sağlar, modüllerin\niçe/dışa aktarma kurallarını, takma ad yapılandırmasını ve harici bağımlılıkları\ntanımlamak için kullanılır.\n\n\nTür Tanımları#\n\n\nPathType#\n\n * Tür Tanımı:\n\n\n\nModül yol türü numaralandırması:\n\n * npm: node_modules içindeki bağımlılıkları temsil eder\n * root: proje kök dizinindeki dosyaları temsil eder\n\n\nModuleConfig#\n\n * Tür Tanımı:\n\n\n\nModül yapılandırma arayüzü, servislerin dışa aktarma, içe aktarma ve harici\nbağımlılık yapılandırmalarını tanımlamak için kullanılır.\n\nexports#\n\nDışa aktarma yapılandırma listesi, servisteki belirli kod birimlerini\n(bileşenler, yardımcı fonksiyonlar vb.) ESM formatında dışarıya açığa çıkarır.\n\nİki türü destekler:\n\n * root:*: kaynak kod dosyalarını dışa aktarır, örneğin:\n   'root:src/components/button.vue'\n * npm:*: üçüncü parti bağımlılıkları dışa aktarır, örneğin: 'npm:vue'\n\nimports#\n\nİçe aktarma yapılandırma eşlemesi, uzak modülleri ve yerel yollarını\nyapılandırır.\n\nKurulum yöntemine göre yapılandırma farklılık gösterir:\n\n * Kaynak kod kurulumu (Workspace, Git): dist dizinine işaret etmelidir\n * Paket kurulumu (Link, statik sunucu, özel ayna kaynağı, File): doğrudan paket\n   dizinine işaret eder\n\nexternals#\n\nHarici bağımlılık eşlemesi, kullanılacak harici bağımlılıkları yapılandırır,\ngenellikle uzak modüllerdeki bağımlılıkları kullanır.\n\nÖrnek:\n\n\n\n\nParsedModuleConfig#\n\n * Tür Tanımı:\n\n\n\nAyrıştırılmış modül yapılandırması, orijinal modül yapılandırmasını\nstandartlaştırılmış bir iç formata dönüştürür:\n\nname#\n\nMevcut servisin adı\n\n * Modülü tanımlamak ve içe aktarma yollarını oluşturmak için kullanılır\n\nroot#\n\nMevcut servisin kök dizin yolu\n\n * Göreli yolları çözümlemek ve yapı ürünlerini depolamak için kullanılır\n\nexports#\n\nDışa aktarma yapılandırma listesi\n\n * name: orijinal dışa aktarma yolu, örneğin: 'npm:vue' veya\n   'root:src/components'\n * type: yol türü (npm veya root)\n * importName: içe aktarma adı, format: '${serviceName}/${type}/${path}'\n * exportName: servis kök dizinine göre dışa aktarma yolu\n * exportPath: gerçek dosya yolu\n * externalName: harici bağımlılık adı, diğer servislerin bu modülü içe\n   aktarması için kullanılan tanımlayıcı\n\nimports#\n\nİçe aktarma yapılandırma listesi\n\n * name: harici servisin adı\n * localPath: harici modüllerin yapı ürünlerini depolamak için kullanılan yerel\n   depolama yolu\n\nexternals#\n\nHarici bağımlılık eşlemesi\n\n * Modülün içe aktarma yolunu gerçek modül konumuna eşler\n * match: içe aktarma ifadelerini eşleştirmek için kullanılan düzenli ifade\n * import: gerçek modül yolu\n\n","routePath":"/tr/api/core/module-config","lang":"tr","toc":[{"text":"Tür Tanımları","id":"tür-tanımları","depth":2,"charIndex":194},{"text":"PathType","id":"pathtype","depth":3,"charIndex":211},{"text":"ModuleConfig","id":"moduleconfig-1","depth":3,"charIndex":-1},{"text":"exports","id":"exports","depth":4,"charIndex":554},{"text":"imports","id":"imports","depth":4,"charIndex":900},{"text":"externals","id":"externals","depth":4,"charIndex":1229},{"text":"ParsedModuleConfig","id":"parsedmoduleconfig","depth":3,"charIndex":1384},{"text":"name","id":"name","depth":4,"charIndex":1539},{"text":"root","id":"root","depth":4,"charIndex":1641},{"text":"exports","id":"exports-1","depth":4,"charIndex":1755},{"text":"imports","id":"imports-1","depth":4,"charIndex":2198},{"text":"externals","id":"externals-1","depth":4,"charIndex":2369}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçeve Modül Yapılandırma API Referansı","description":"Gez çerçevesinin ModuleConfig yapılandırma arayüzünü detaylı olarak açıklar, modül içe/dışa aktarma kurallarını, takma ad yapılandırmasını ve harici bağımlılık yönetimini içerir, geliştiricilerin çerçevenin modüler sistemini derinlemesine anlamasına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, ModuleConfig, modül yapılandırma, modül içe/dışa aktarma, harici bağımlılık, takma ad yapılandırma, bağımlılık yönetimi, Web uygulama çerçevesi"}]]},"version":""},{"id":256,"title":"PackConfig","content":"#\n\nPackConfig, hizmetlerin yapı ürünlerini standart npm .tgz formatında yazılım\npaketleri olarak paketlemek için kullanılan bir yazılım paketi paketleme\nyapılandırma arayüzüdür.\n\n * Standartlaştırma: npm standart .tgz paketleme formatını kullanır\n * Bütünlük: Modülün kaynak kodunu, tür bildirimlerini ve yapılandırma\n   dosyalarını içeren tüm gerekli dosyaları içerir\n * Uyumluluk: npm ekosistemi ile tam uyumlu, standart paket yönetimi iş\n   akışlarını destekler\n\n\nTür Tanımı#\n\n\n\n\nPackConfig#\n\nenable#\n\nPaketleme özelliğinin etkinleştirilip etkinleştirilmeyeceği.\nEtkinleştirildiğinde yapı ürünleri standart npm .tgz formatında yazılım\npaketleri olarak paketlenir.\n\n * Tür: boolean\n * Varsayılan değer: false\n\noutputs#\n\nÇıktı yazılım paketi dosya yolunu belirtir. Aşağıdaki yapılandırma yöntemlerini\ndestekler:\n\n * string: Tek bir çıktı yolu, örneğin 'dist/versions/my-app.tgz'\n * string[]: Birden fazla çıktı yolu, aynı anda birden fazla sürüm oluşturmak\n   için kullanılır\n * boolean: true olduğunda varsayılan yol 'dist/client/versions/latest.tgz'\n   kullanılır\n\npackageJson#\n\npackage.json içeriğini özelleştirmek için geri çağırma fonksiyonu. Paketlemeden\nönce çağrılır, package.json içeriğini özelleştirmek için kullanılır.\n\n * Parametreler:\n   * gez: Gez - Gez örneği\n   * pkg: any - Orijinal package.json içeriği\n * Dönüş değeri: Promise - Değiştirilmiş package.json içeriği\n\nYaygın kullanımlar:\n\n * Paket adını ve sürüm numarasını değiştirme\n * Bağımlılıkları ekleme veya güncelleme\n * Özel alanlar ekleme\n * Yayınlama bilgilerini yapılandırma\n\nÖrnek:\n\n\n\nonBefore#\n\nPaketleme öncesi hazırlık işlemleri için geri çağırma fonksiyonu.\n\n * Parametreler:\n   * gez: Gez - Gez örneği\n   * pkg: Record - package.json içeriği\n * Dönüş değeri: Promise\n\nYaygın kullanımlar:\n\n * Ek dosyalar ekleme (README, LICENSE vb.)\n * Test veya yapı doğrulama çalıştırma\n * Dokümantasyon veya meta veri oluşturma\n * Geçici dosyaları temizleme\n\nÖrnek:\n\n\n\nonAfter#\n\nPaketleme tamamlandıktan sonraki işlemler için geri çağırma fonksiyonu. .tgz\ndosyası oluşturulduktan sonra çağrılır, paketleme ürünlerini işlemek için\nkullanılır.\n\n * Parametreler:\n   * gez: Gez - Gez örneği\n   * pkg: Record - package.json içeriği\n   * file: Buffer - Paketlenmiş dosya içeriği\n * Dönüş değeri: Promise\n\nYaygın kullanımlar:\n\n * npm deposuna yayınlama (genel veya özel)\n * Statik kaynak sunucusuna yükleme\n * Sürüm yönetimi yapma\n * CI/CD sürecini tetikleme\n\nÖrnek:\n\n\n\n\nKullanım Örneği#\n\n","routePath":"/tr/api/core/pack-config","lang":"tr","toc":[{"text":"Tür Tanımı","id":"tür-tanımı","depth":2,"charIndex":466},{"text":"PackConfig","id":"packconfig-1","depth":3,"charIndex":-1},{"text":"enable","id":"enable","depth":4,"charIndex":495},{"text":"outputs","id":"outputs","depth":4,"charIndex":711},{"text":"packageJson","id":"packagejson","depth":4,"charIndex":1067},{"text":"onBefore","id":"onbefore","depth":4,"charIndex":1564},{"text":"onAfter","id":"onafter","depth":4,"charIndex":1939},{"text":"Kullanım Örneği","id":"kullanım-örneği","depth":2,"charIndex":2434}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Paketleme Yapılandırma API Referansı","description":"Gez çerçevesinin PackConfig yapılandırma arayüzünü detaylı olarak açıklar, yazılım paketi paketleme kurallarını, çıktı yapılandırmasını ve yaşam döngüsü kancalarını içerir, geliştiricilerin standartlaştırılmış yapı süreçlerini uygulamasına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, PackConfig, yazılım paketi paketleme, yapı yapılandırması, yaşam döngüsü kancaları, paketleme yapılandırması, Web uygulama çerçevesi"}]]},"version":""},{"id":257,"title":"RenderContext","content":"Merhaba Dünya\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()} ${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/tr/api/core/render-context","lang":"tr","toc":[{"text":"Tür Tanımları","id":"tür-tanımları","depth":2,"charIndex":-1},{"text":"ServerRenderHandle","id":"serverrenderhandle","depth":3,"charIndex":-1},{"text":"RenderFiles","id":"renderfiles","depth":3,"charIndex":-1},{"text":"ImportmapMode","id":"importmapmode","depth":3,"charIndex":-1},{"text":"Örnek Seçenekleri","id":"örnek-seçenekleri","depth":2,"charIndex":-1},{"text":"base","id":"base","depth":4,"charIndex":-1},{"text":"entryName","id":"entryname","depth":4,"charIndex":-1},{"text":"params","id":"params","depth":4,"charIndex":-1},{"text":"importmapMode","id":"importmapmode-1","depth":4,"charIndex":-1},{"text":"Örnek Özellikleri","id":"örnek-özellikleri","depth":2,"charIndex":-1},{"text":"gez","id":"gez","depth":3,"charIndex":-1},{"text":"redirect","id":"redirect","depth":3,"charIndex":-1},{"text":"status","id":"status","depth":3,"charIndex":-1},{"text":"html","id":"html","depth":3,"charIndex":-1},{"text":"base","id":"base-1","depth":3,"charIndex":-1},{"text":"entryName","id":"entryname-1","depth":3,"charIndex":-1},{"text":"params","id":"params-1","depth":3,"charIndex":-1},{"text":"importMetaSet","id":"importmetaset","depth":3,"charIndex":-1},{"text":"files","id":"files","depth":3,"charIndex":-1},{"text":"importmapMode","id":"importmapmode-2","depth":3,"charIndex":-1},{"text":"Örnek Metodları","id":"örnek-metodları","depth":2,"charIndex":-1},{"text":"serialize()","id":"serialize","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi RenderContext API Referansı","description":"Gez çerçevesinin RenderContext temel sınıfını detaylı olarak açıklar, sunucu tarafı render (SSR) için render kontrolü, kaynak yönetimi, durum senkronizasyonu ve rota kontrolü gibi işlevleri kapsar, geliştiricilere verimli sunucu tarafı render uygulamaları oluşturmalarında yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, RenderContext, SSR, sunucu tarafı render, render context, durum senkronizasyonu, kaynak yönetimi, Web uygulama çerçevesi"}]]},"version":""},{"id":258,"title":"Bileşen Paylaşımından Yerel Modülerliğe: Gez Mikro Frontend Çerçevesinin Evrim Yolculuğu","content":"Bileşen Paylaşımından Yerel Modülerliğe: Gez Mikro Frontend Çerçevesinin Evrim\nYolculuğu#\n\n\nProje Arka Planı#\n\nSon birkaç yıldır, mikro frontend mimarisi doğru bir yol bulmaya çalışıyor.\nAncak, gördüğümüz şey, ideal bir mikro frontend dünyasını taklit etmek için\nkatman katman paketlenmiş ve yapay olarak izole edilmiş çeşitli karmaşık teknik\nçözümler. Bu çözümler, değerli performansı tüketen, basit geliştirmeyi karmaşık\nhale getiren ve standart süreçleri anlaşılmaz kılan bir yük getiriyor.\n\n\nGeleneksel Çözümlerin Sınırlamaları#\n\nMikro frontend mimarisini uygulama sürecinde, geleneksel çözümlerin birçok\nsınırlamasını derinden hissettik:\n\n * Performans Kaybı: Çalışma zamanında bağımlılık enjeksiyonu, JS sanal kutu\n   proxy'si, her işlem değerli performansı tüketiyor\n * Kırılgan İzolasyon: Elle oluşturulan sanal kutu ortamı, tarayıcının yerel\n   izolasyon yeteneklerine asla ulaşamıyor\n * Yapı Karmaşıklığı: Bağımlılık ilişkilerini ele almak için yapı araçlarını\n   değiştirmek zorunda kalmak, basit projeleri bakımı zor hale getiriyor\n * Özelleştirilmiş Kurallar: Özel dağıtım stratejileri, çalışma zamanı\n   işlemleri, her adımı modern geliştirme standartlarından uzaklaştırıyor\n * Ekosistem Sınırlamaları: Çerçeve bağımlılığı, özel API'ler, teknoloji\n   seçimini belirli bir ekosisteme bağlıyor\n\nBu sorunlar, 2019 yılındaki bir kurumsal projemizde özellikle belirgindi. O\nzamanlar, büyük bir ürün ondan fazla bağımsız iş alt sistemine ayrılmıştı ve bu\nalt sistemler bir dizi temel bileşen ve iş bileşenini paylaşmak zorundaydı.\nBaşlangıçta kullanılan npm paketlerine dayalı bileşen paylaşımı çözümü,\nuygulamada ciddi bakım verimliliği sorunları ortaya çıkardı: Paylaşılan\nbileşenler güncellendiğinde, bu bileşene bağımlı olan tüm alt sistemler tam bir\nyapı ve dağıtım sürecinden geçmek zorundaydı.\n\n\nTeknik Evrim#\n\n\nv1.0: Uzak Bileşenleri Keşfetmek#\n\nBileşen paylaşımının verimlilik sorununu çözmek için Gez v1.0, HTTP protokolüne\ndayalı RemoteView bileşen mekanizmasını tanıttı. Bu çözüm, çalışma zamanında\ndinamik istek yoluyla hizmetler arasında kodun talep üzerine birleştirilmesini\nsağlayarak, yapı bağımlılık zincirinin çok uzun olma sorununu başarıyla çözdü.\nAncak, standartlaştırılmış bir çalışma zamanı iletişim mekanizmasının eksikliği\nnedeniyle, hizmetler arası durum senkronizasyonu ve olay iletimi hala verimlilik\nsorunları yaşıyordu.\n\n\nv2.0: Modül Federasyonu Denemesi#\n\nv2.0 sürümünde, Webpack 5.0'ın Modül Federasyonu (Module Federation)\nteknolojisini kullandık. Bu teknoloji, birleşik bir modül yükleme mekanizması ve\nçalışma zamanı konteyneri ile hizmetler arası işbirliği verimliliğini önemli\nölçüde artırdı. Ancak büyük ölçekli uygulamalarda, modül federasyonunun kapalı\nuygulama mekanizması yeni zorluklar getirdi: Özellikle birden fazla hizmetin\npaylaşılan bağımlılıklarını birleştirirken, sürüm çakışmaları ve çalışma zamanı\nistisnalarıyla sık sık karşılaşıldı.\n\n\nESM Yeni Çağına Adım Atmak#\n\nv3.0 sürümünü planlarken, ön uç ekosistemindeki gelişmeleri derinlemesine\ninceledik ve tarayıcıların yerel yeteneklerindeki ilerlemelerin mikro frontend\nmimarisi için yeni olanaklar sunduğunu gördük:\n\n\nStandartlaştırılmış Modül Sistemi#\n\nAna akım tarayıcıların ES Modülleri (ES Modules) için tam destek sağlaması ve\nImport Maps spesifikasyonunun olgunlaşmasıyla, ön uç geliştirme gerçek bir\nmodülerlik çağına girdi. Can I Use istatistiklerine göre, ana akım tarayıcıların\n(Chrome >= 89, Edge >= 89, Firefox >= 108, Safari >= 16.4) ESM için yerel destek\noranı %93.5'e ulaştı ve bu bize aşağıdaki avantajları sağladı:\n\n * Bağımlılık Yönetimi Standartlaşması: Import Maps, tarayıcı düzeyinde modül\n   bağımlılıklarını çözme yeteneği sağlar, karmaşık çalışma zamanı enjeksiyonuna\n   gerek yoktur\n * Kaynak Yükleme Optimizasyonu: Tarayıcının yerel modül önbellekleme\n   mekanizması, kaynak yükleme verimliliğini önemli ölçüde artırır\n * Yapı Süreci Basitleştirme: ESM tabanlı geliştirme modu, geliştirme ortamı ve\n   üretim ortamı yapı süreçlerini daha tutarlı hale getirir\n\nAynı zamanda, uyumluluk modu desteği (Chrome >= 87, Edge >= 88, Firefox >= 78,\nSafari >= 14) ile tarayıcı kapsama oranını %96.81'e çıkarabiliriz, bu da yüksek\nperformansı korurken eski tarayıcı desteğinden ödün vermememizi sağlar.\n\n\nPerformans ve İzolasyonda Atılım#\n\nYerel modül sistemi, yalnızca standartlaşma değil, aynı zamanda performans ve\nizolasyonda niteliksel bir artış sağlar:\n\n * Sıfır Çalışma Zamanı Maliyeti: Geleneksel mikro frontend çözümlerindeki\n   JavaScript sanal kutu proxy'si ve çalışma zamanı enjeksiyonuna veda edin\n * Güvenilir İzolasyon Mekanizması: ESM'in katı modül kapsamı, en güvenilir\n   izolasyon yeteneğini doğal olarak sağlar\n * Kesin Bağımlılık Yönetimi: Statik içe aktarma analizi, bağımlılık\n   ilişkilerini daha net hale getirir ve sürüm kontrolünü daha kesin yapar\n\n\nYapı Araçları Seçimi#\n\nTeknik çözümlerin uygulanmasında, yapı araçlarının seçimi kritik bir karar\nnoktasıdır. Yaklaşık bir yıllık teknik araştırma ve uygulama sonucunda,\nseçimimiz aşağıdaki evrimi yaşadı:\n\n 1. Vite Keşfi\n    \n    * Avantaj: ESM tabanlı geliştirme sunucusu, en üst düzey geliştirme deneyimi\n      sunar\n    * Zorluk: Geliştirme ortamı ve üretim ortamı yapı farklılıkları, belirli bir\n      belirsizlik getirir\n\n 2. Rspack Belirleme\n    \n    * Performans Avantajı: Rust tabanlı yüksek performanslı derleme, yapı hızını\n      önemli ölçüde artırır\n    * Ekosistem Desteği: Webpack ekosistemiyle yüksek uyumluluk, geçiş\n      maliyetini düşürür\n    * ESM Desteği: Rslib projesi uygulamalarıyla, ESM yapısındaki güvenilirliği\n      doğruladı\n\nBu karar, geliştirme deneyimini korurken daha istikrarlı bir üretim ortamı\ndesteği sağladı. ESM ve Rspack kombinasyonuyla, yüksek performanslı ve düşük\nmüdahale gerektiren bir mikro frontend çözümü oluşturduk.\n\n\nGelecek Vizyonu#\n\nGelecekteki gelişim planlarında, Gez çerçevesi aşağıdaki üç yöne odaklanacaktır:\n\n\nImport Maps Derinlemesine Optimizasyon#\n\n * Dinamik Bağımlılık Yönetimi: Çalışma zamanı bağımlılık sürümlerinin akıllı\n   planlamasını uygulayarak, çoklu uygulamalar arası bağımlılık çakışmalarını\n   çözün\n * Ön Yükleme Stratejisi: Rota analizine dayalı akıllı ön yükleme, kaynak\n   yükleme verimliliğini artırır\n * Yapı Optimizasyonu: En uygun Import Maps yapılandırmasını otomatik olarak\n   oluşturarak, geliştiricilerin manuel yapılandırma maliyetini azaltır\n\n\nÇerçeveden Bağımsız Rota Çözümü#\n\n * Birleşik Rota Soyutlaması: Vue, React gibi ana akım çerçeveleri destekleyen\n   çerçeveden bağımsız rota arayüzü tasarlayın\n * Mikro Uygulama Rotası: Uygulamalar arası rota bağlantısını uygulayarak, URL\n   ile uygulama durumunun tutarlılığını koruyun\n * Rota Middleware: İzin kontrolü, sayfa geçişleri gibi işlevleri destekleyen\n   genişletilebilir middleware mekanizması sağlayın\n\n\nÇerçeveler Arası İletişim En İyi Uygulamaları#\n\n * Örnek Uygulama: Vue, React, Preact gibi ana akım çerçeveleri kapsayan tam bir\n   çerçeveler arası iletişim örneği sağlayın\n * Durum Senkronizasyonu: ESM tabanlı hafif durum paylaşımı çözümü\n * Olay Veri Yolu: Uygulamalar arası bağlantısız iletişimi destekleyen\n   standartlaştırılmış olay iletişim mekanizması\n\nBu optimizasyonlar ve genişletmelerle, Gez'i daha kapsamlı ve kullanımı kolay\nbir mikro frontend çözümü haline getirmeyi ve geliştiricilere daha iyi bir\ngeliştirme deneyimi ve daha yüksek geliştirme verimliliği sunmayı hedefliyoruz.","routePath":"/tr/blog/birth-of-gez","lang":"tr","toc":[{"text":"Proje Arka Planı","id":"proje-arka-planı","depth":2,"charIndex":91},{"text":"Geleneksel Çözümlerin Sınırlamaları","id":"geleneksel-çözümlerin-sınırlamaları","depth":3,"charIndex":495},{"text":"Teknik Evrim","id":"teknik-evrim","depth":2,"charIndex":1810},{"text":"v1.0: Uzak Bileşenleri Keşfetmek","id":"v10-uzak-bileşenleri-keşfetmek","depth":3,"charIndex":1826},{"text":"v2.0: Modül Federasyonu Denemesi","id":"v20-modül-federasyonu-denemesi","depth":3,"charIndex":2360},{"text":"ESM Yeni Çağına Adım Atmak","id":"esm-yeni-çağına-adım-atmak","depth":2,"charIndex":2897},{"text":"Standartlaştırılmış Modül Sistemi","id":"standartlaştırılmış-modül-sistemi","depth":3,"charIndex":3128},{"text":"Performans ve İzolasyonda Atılım","id":"performans-ve-i̇zolasyonda-atılım","depth":3,"charIndex":4229},{"text":"Yapı Araçları Seçimi","id":"yapı-araçları-seçimi","depth":3,"charIndex":4801},{"text":"Gelecek Vizyonu","id":"gelecek-vizyonu","depth":2,"charIndex":5768},{"text":"Import Maps Derinlemesine Optimizasyon","id":"import-maps-derinlemesine-optimizasyon","depth":3,"charIndex":5869},{"text":"Çerçeveden Bağımsız Rota Çözümü","id":"çerçeveden-bağımsız-rota-çözümü","depth":3,"charIndex":6333},{"text":"Çerçeveler Arası İletişim En İyi Uygulamaları","id":"çerçeveler-arası-i̇letişim-en-i̇yi-uygulamaları","depth":3,"charIndex":6752}],"domain":"","frontmatter":{"titleSuffix":"Mikro Frontend Zorluklarından ESM Yeniliğine: Gez Çerçevesinin Evrim Yolculuğu","description":"Gez çerçevesinin geleneksel mikro frontend mimarisinin zorluklarından ESM tabanlı yenilikçi atılımlara kadar olan yolculuğunu derinlemesine inceleyin. Performans optimizasyonu, bağımlılık yönetimi ve yapı araçları seçimi gibi konulardaki teknik deneyimleri paylaşın.","head":[["meta",{"property":"keywords","content":"Gez, Mikro Frontend Çerçevesi, ESM, Import Maps, Rspack, Modül Federasyonu, Bağımlılık Yönetimi, Performans Optimizasyonu, Teknik Evrim, Sunucu Taraflı Render"}]],"sidebar":false},"version":""},{"id":259,"title":"Ekip Blogu","content":"#\n\nGez ekibinin teknik bloguna hoş geldiniz! Burada, çerçeve geliştirme sürecindeki\ndeneyimlerimizi, teknolojik yeniliklerimizi ve en iyi uygulamalarımızı\npaylaşıyoruz.\n\n\nSon Yazılar#\n\n * 2025-02-25 Bileşen Paylaşımından Yerel Modülerliğe: Gez Mikro Frontend\n   Çerçevesinin Evrim Yolculuğu\n   \n   > Geleneksel bileşen paylaşımından ESM tabanlı yerel modülerliğe Gez\n   > çerçevesinin evrim sürecini keşfedin, performans optimizasyonu, bağımlılık\n   > yönetimi ve yapılandırma araçları seçimi gibi konulardaki teknik\n   > deneyimlerimizi paylaşıyoruz.","routePath":"/tr/blog/","lang":"tr","toc":[{"text":"Son Yazılar","id":"son-yazılar","depth":2,"charIndex":170}],"domain":"","frontmatter":{"titleSuffix":"Gez Ekip Blogu","description":"Gez ekibinin teknik blogu, çerçeve geliştirme deneyimlerini, en iyi uygulamaları ve teknolojik yenilikleri paylaşır.","head":[["meta",{"property":"keywords","content":"Gez, ekip blogu, teknik paylaşım, en iyi uygulamalar, geliştirme deneyimi"}]],"sidebar":false},"version":""},{"id":260,"title":"Yol Takma Adı","content":"#\n\nYol takma adı (Path Alias), geliştiricilerin tam modül yolu yerine kısa ve\nanlamsal tanımlayıcılar kullanmasına olanak tanıyan bir modül içe aktarma yolu\neşleme mekanizmasıdır. Gez'de, yol takma adı mekanizması aşağıdaki avantajlara\nsahiptir:\n\n * İçe Aktarma Yollarını Basitleştirme: Uzun göreli yollar yerine anlamsal takma\n   adlar kullanarak kod okunabilirliğini artırır\n * Derin İç İçe Geçmiş Yapıları Önleme: Çok seviyeli dizin referanslarını\n   (örneğin ../../../../) ortadan kaldırarak bakım zorluğunu azaltır\n * Tür Güvenliği: TypeScript'in tür sistemiyle tam entegrasyon sağlar, kod\n   tamamlama ve tür denetimi sunar\n * Modül Çözümleme Optimizasyonu: Önceden tanımlanmış yol eşlemeleri sayesinde\n   modül çözümleme performansını artırır\n\n\nVarsayılan Takma Ad Mekanizması#\n\nGez, hizmet adına (Service Name) dayalı otomatik takma ad mekanizmasını\nkullanır. Bu yapılandırma üzerine tercih edilen tasarım aşağıdaki özelliklere\nsahiptir:\n\n * Otomatik Yapılandırma: package.json dosyasındaki name alanına dayalı olarak\n   otomatik olarak takma ad oluşturur, manuel yapılandırma gerektirmez\n * Tutarlı Standartlar: Tüm hizmet modüllerinin tutarlı bir adlandırma ve\n   referans standardını takip etmesini sağlar\n * Tür Desteği: npm run build:dts komutuyla birlikte otomatik olarak tür\n   bildirim dosyaları oluşturur, hizmetler arası tür çıkarımı sağlar\n * Öngörülebilirlik: Hizmet adı üzerinden modül referans yolunu çıkarabilme\n   imkanı sunar, bakım maliyetini düşürür\n\n\nYapılandırma Açıklaması#\n\n\npackage.json Yapılandırması#\n\npackage.json dosyasında, name alanı kullanılarak hizmetin adı tanımlanır. Bu ad,\nhizmetin varsayılan takma ad öneki olarak kullanılır:\n\n\n\n\ntsconfig.json Yapılandırması#\n\nTypeScript'in takma ad yollarını doğru bir şekilde çözümleyebilmesi için\ntsconfig.json dosyasında paths eşlemesinin yapılandırılması gerekir:\n\n\n\n\nKullanım Örnekleri#\n\n\nHizmet İçi Modülleri İçe Aktarma#\n\n\n\n\nDiğer Hizmet Modüllerini İçe Aktarma#\n\n\n\n::: ipucu En İyi Uygulamalar\n\n * Göreli yollar yerine takma ad yollarını kullanmayı tercih edin\n * Takma ad yollarının anlamsal ve tutarlı olmasını sağlayın\n * Takma ad yollarında çok fazla dizin seviyesi kullanmaktan kaçının\n\n:::\n\n\n\n\nHizmetler Arası İçe Aktarma#\n\nModül bağlantısı (Module Link) yapılandırıldıktan sonra, diğer hizmetlerin\nmodüllerini aynı şekilde içe aktarabilirsiniz:\n\n\n\n\nÖzel Takma Adlar#\n\nÜçüncü taraf paketler veya özel senaryolar için Gez yapılandırma dosyası\nüzerinden özel takma adlar tanımlanabilir:\n\n\n\n::: uyarı Dikkat Edilmesi Gerekenler\n\n 1. İş modülleri için, proje tutarlılığını korumak adına varsayılan takma ad\n    mekanizmasını kullanmanız önerilir\n 2. Özel takma adlar, üçüncü taraf paketlerin özel ihtiyaçlarını karşılamak veya\n    geliştirme deneyimini optimize etmek için kullanılır\n 3. Özel takma adların aşırı kullanımı, kod bakımını ve yapı optimizasyonunu\n    olumsuz etkileyebilir\n\n:::","routePath":"/tr/guide/essentials/alias","lang":"tr","toc":[{"text":"Varsayılan Takma Ad Mekanizması","id":"varsayılan-takma-ad-mekanizması","depth":2,"charIndex":751},{"text":"Yapılandırma Açıklaması","id":"yapılandırma-açıklaması","depth":2,"charIndex":1478},{"text":"package.json Yapılandırması","id":"packagejson-yapılandırması","depth":3,"charIndex":1505},{"text":"tsconfig.json Yapılandırması","id":"tsconfigjson-yapılandırması","depth":3,"charIndex":1674},{"text":"Kullanım Örnekleri","id":"kullanım-örnekleri","depth":2,"charIndex":1851},{"text":"Hizmet İçi Modülleri İçe Aktarma","id":"hizmet-i̇çi-modülleri-i̇çe-aktarma","depth":3,"charIndex":1873},{"text":"Diğer Hizmet Modüllerini İçe Aktarma","id":"diğer-hizmet-modüllerini-i̇çe-aktarma","depth":3,"charIndex":1911},{"text":"Hizmetler Arası İçe Aktarma","id":"hizmetler-arası-i̇çe-aktarma","depth":3,"charIndex":2187},{"text":"Özel Takma Adlar","id":"özel-takma-adlar","depth":3,"charIndex":2343}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Modül İçe Aktarma Yolu Eşleme Kılavuzu","description":"Gez çerçevesinin yol takma adı mekanizmasını detaylı olarak açıklar, içe aktarma yollarını basitleştirme, derin iç içe geçmiş yapıları önleme, tür güvenliği ve modül çözümleme optimizasyonu gibi özellikleri içerir, geliştiricilerin kod bakımını kolaylaştırmasına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, Yol Takma Adı, Path Alias, TypeScript, Modül İçe Aktarma, Yol Eşleme, Kod Bakımı"}]]},"version":""},{"id":261,"title":"Temel Yol","content":"#\n\nTemel yol (Base Path), uygulamanızdaki statik kaynakların (JavaScript, CSS,\nresimler vb.) erişim yolu önekidir. Gez'de, temel yolun doğru yapılandırılması\naşağıdaki senaryolar için kritik öneme sahiptir:\n\n * Çoklu Ortam Dağıtımı: Geliştirme, test ve üretim gibi farklı ortamlarda\n   kaynak erişimini destekler\n * Çoklu Bölge Dağıtımı: Farklı bölge veya ülkelerdeki küme dağıtım\n   ihtiyaçlarını karşılar\n * CDN Dağıtımı: Statik kaynakların küresel dağıtımını ve hızlandırılmasını\n   sağlar\n\n\nVarsayılan Yol Mekanizması#\n\nGez, hizmet adına dayalı otomatik yol oluşturma mekanizmasını kullanır.\nVarsayılan olarak, çerçeve projenin package.json dosyasındaki name alanını\nokuyarak statik kaynakların temel yolunu oluşturur: /uygulama-adiniz/.\n\n\n\nBu yapılandırma üzerine tasarım aşağıdaki avantajlara sahiptir:\n\n * Tutarlılık: Tüm statik kaynakların tek tip erişim yolu kullanmasını sağlar\n * Öngörülebilirlik: package.json dosyasındaki name alanı ile kaynak erişim\n   yolunu tahmin edebilirsiniz\n * Bakım Kolaylığı: Ek yapılandırma gerektirmez, bakım maliyetini düşürür\n\n\nDinamik Yol Yapılandırması#\n\nGerçek projelerde, aynı kodu farklı ortamlara veya bölgelere dağıtmamız\ngerekebilir. Gez, dinamik temel yol desteği sunarak uygulamanın farklı dağıtım\nsenaryolarına uyum sağlamasını mümkün kılar.\n\n\nKullanım Senaryoları#\n\nİkinci Seviye Dizin Dağıtımı#\n\n\n\nBağımsız Alan Adı Dağıtımı#\n\n\n\n\nYapılandırma Yöntemi#\n\ngez.render() yönteminin base parametresi ile istek bağlamına göre dinamik olarak\ntemel yol ayarlayabilirsiniz:\n\n","routePath":"/tr/guide/essentials/base-path","lang":"tr","toc":[{"text":"Varsayılan Yol Mekanizması","id":"varsayılan-yol-mekanizması","depth":2,"charIndex":494},{"text":"Dinamik Yol Yapılandırması","id":"dinamik-yol-yapılandırması","depth":2,"charIndex":1070},{"text":"Kullanım Senaryoları","id":"kullanım-senaryoları","depth":3,"charIndex":1297},{"text":"İkinci Seviye Dizin Dağıtımı","id":"i̇kinci-seviye-dizin-dağıtımı","depth":4,"charIndex":1320},{"text":"Bağımsız Alan Adı Dağıtımı","id":"bağımsız-alan-adı-dağıtımı","depth":4,"charIndex":1353},{"text":"Yapılandırma Yöntemi","id":"yapılandırma-yöntemi","depth":3,"charIndex":1385}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Statik Kaynak Yolu Yapılandırma Kılavuzu","description":"Gez çerçevesinin temel yol yapılandırmasını detaylı olarak açıklar, çoklu ortam dağıtımı, CDN dağıtımı ve kaynak erişim yolu ayarlarını içerir, geliştiricilere esnek statik kaynak yönetimi sağlar.","head":[["meta",{"property":"keywords","content":"Gez, Temel Yol, Base Path, CDN, Statik Kaynaklar, Çoklu Ortam Dağıtımı, Kaynak Yönetimi"}]]},"version":""},{"id":262,"title":"İstemci Tarafı Renderlama","content":"\n${rc.importmap()} // İçe aktarma haritası ${rc.moduleEntry()} // Giriş modülü\n${rc.modulePreload()} // Modül ön yükleme","routePath":"/tr/guide/essentials/csr","lang":"tr","toc":[{"text":"Kullanım Senaryoları","id":"kullanım-senaryoları","depth":2,"charIndex":-1},{"text":"Yapılandırma Açıklamaları","id":"yapılandırma-açıklamaları","depth":2,"charIndex":-1},{"text":"HTML Şablonu Yapılandırması","id":"html-şablonu-yapılandırması","depth":3,"charIndex":-1},{"text":"Statik HTML Oluşturma","id":"statik-html-oluşturma","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi İstemci Tarafı Renderlama Kılavuzu","description":"Gez çerçevesinin istemci tarafı renderlama mekanizmasını detaylı olarak açıklar, statik yapılandırma, dağıtım stratejileri ve en iyi uygulamaları içerir. Bu kılavuz, geliştiricilerin sunucu olmayan ortamlarda etkili ön yüz renderlaması gerçekleştirmesine yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, İstemci Tarafı Renderlama, CSR, Statik Yapılandırma, Ön Yüz Renderlama, Sunucusuz Dağıtım, Performans Optimizasyonu"}]]},"version":""},{"id":263,"title":"Modül Bağlantısı","content":"#\n\nGez çerçevesi, hizmetler arası kod paylaşımını ve bağımlılık ilişkilerini\nyönetmek için kapsamlı bir modül bağlantı mekanizması sunar. Bu mekanizma ESM\n(ECMAScript Module) spesifikasyonu temelinde uygulanmıştır ve kaynak kodu\nseviyesinde modül dışa aktarma ve içe aktarma ile tam bağımlılık yönetimi\nişlevlerini destekler.\n\n\nTemel Kavramlar#\n\nModül Dışa Aktarma#\n\nModül dışa aktarma, bir hizmetteki belirli kod birimlerini (bileşenler, yardımcı\nfonksiyonlar vb.) ESM formatında dışarıya açma sürecidir. İki tür dışa aktarma\ndesteklenir:\n\n * Kaynak Kodu Dışa Aktarma: Projedeki kaynak kod dosyalarını doğrudan dışa\n   aktarır\n * Bağımlılık Dışa Aktarma: Projede kullanılan üçüncü taraf bağımlılık\n   paketlerini dışa aktarır\n\nModül İçe Aktarma#\n\nModül içe aktarma, bir hizmette diğer hizmetler tarafından dışa aktarılan kod\nbirimlerini referans alma sürecidir. Birden fazla kurulum yöntemi desteklenir:\n\n * Kaynak Kodu Kurulumu: Geliştirme ortamı için uygundur, gerçek zamanlı\n   değişiklik ve sıcak güncelleme desteği sağlar\n * Paket Kurulumu: Üretim ortamı için uygundur, doğrudan derleme çıktılarını\n   kullanır\n\n\nÖn Yükleme Mekanizması#\n\nHizmet performansını optimize etmek için Gez akıllı bir modül ön yükleme\nmekanizması uygular:\n\n 1. Bağımlılık Analizi\n    \n    * Derleme sırasında bileşenler arasındaki bağımlılık ilişkilerini analiz\n      eder\n    * Kritik yoldaki temel modülleri tanımlar\n    * Modüllerin yükleme önceliğini belirler\n\n 2. Yükleme Stratejisi\n    \n    * Anında Yükleme: Kritik yoldaki temel modüller\n    * Gecikmeli Yükleme: Kritik olmayan işlev modülleri\n    * İhtiyaç Halinde Yükleme: Koşullu olarak render edilen modüller\n\n 3. Kaynak Optimizasyonu\n    \n    * Akıllı kod bölme stratejisi\n    * Modül seviyesinde önbellek yönetimi\n    * İhtiyaç halinde derleme ve paketleme\n\n\nModül Dışa Aktarma#\n\n\nYapılandırma Açıklaması#\n\nentry.node.ts dosyasında dışa aktarılacak modülleri yapılandırın:\n\n\n\nDışa aktarma yapılandırması iki türü destekler:\n\n * root:*: Kaynak kod dosyalarını dışa aktarır, yol proje kök dizinine göredir\n * npm:*: Üçüncü taraf bağımlılıkları dışa aktarır, doğrudan paket adı\n   belirtilir\n\n\nModül İçe Aktarma#\n\n\nYapılandırma Açıklaması#\n\nentry.node.ts dosyasında içe aktarılacak modülleri yapılandırın:\n\n\n\nYapılandırma seçenekleri:\n\n 1. imports: Uzak modüllerin yerel yolunu yapılandırır\n    \n    * Kaynak kod kurulumu: Derleme çıktısı dizinine (dist) işaret eder\n    * Paket kurulumu: Doğrudan paket dizinine işaret eder\n\n 2. externals: Harici bağımlılıkları yapılandırır\n    \n    * Uzak modüllerdeki bağımlılıkları paylaşmak için kullanılır\n    * Aynı bağımlılıkların tekrar paketlenmesini önler\n    * Birden fazla modülün bağımlılıkları paylaşmasını destekler\n\n\nKurulum Yöntemleri#\n\nKaynak Kod Kurulumu#\n\nGeliştirme ortamı için uygundur, gerçek zamanlı değişiklik ve sıcak güncelleme\ndesteği sağlar.\n\n 1. Workspace Yöntemi Monorepo projelerinde kullanım için önerilir:\n\n\n\n 2. Link Yöntemi Yerel geliştirme ve hata ayıklama için kullanılır:\n\n\n\nPaket Kurulumu#\n\nÜretim ortamı için uygundur, doğrudan derleme çıktılarını kullanır.\n\n 1. NPM Registry npm registry üzerinden kurulum:\n\n\n\n 2. Statik Sunucu HTTP/HTTPS protokolü üzerinden kurulum:\n\n\n\n\nPaket Derleme#\n\n\nYapılandırma Açıklaması#\n\nentry.node.ts dosyasında derleme seçeneklerini yapılandırın:\n\n\n\n\nDerleme Çıktıları#\n\n\n\n\nYayınlama Süreci#\n\n\n\n\nEn İyi Uygulamalar#\n\n\nGeliştirme Ortamı Yapılandırması#\n\n * Bağımlılık Yönetimi\n   \n   * Workspace veya Link yöntemiyle bağımlılıkları kur\n   * Bağımlılık sürümlerini tek merkezden yönet\n   * Aynı bağımlılıkların tekrar kurulmasını önle\n\n * Geliştirme Deneyimi\n   \n   * Sıcak güncelleme özelliğini etkinleştir\n   * Uygun ön yükleme stratejisini yapılandır\n   * Derleme hızını optimize et\n\n\nÜretim Ortamı Yapılandırması#\n\n * Dağıtım Stratejisi\n   \n   * NPM Registry veya statik sunucu kullan\n   * Derleme çıktılarının bütünlüğünü sağla\n   * Gri yayın mekanizması uygula\n\n * Performans Optimizasyonu\n   \n   * Kaynak ön yüklemeyi uygun şekilde yapılandır\n   * Modül yükleme sırasını optimize et\n   * Etkili önbellek stratejileri uygula\n\n\nSürüm Yönetimi#\n\n * Sürüm Kuralları\n   \n   * Anlamsal sürümleme kurallarına uy\n   * Detaylı güncelleme günlükleri tut\n   * Sürüm uyumluluk testlerini yap\n\n * Bağımlılık Güncellemeleri\n   \n   * Bağımlılık paketlerini zamanında güncelle\n   * Düzenli olarak güvenlik denetimi yap\n   * Bağımlılık sürüm tutarlılığını koru\n\n","routePath":"/tr/guide/essentials/module-link","lang":"tr","toc":[{"text":"Temel Kavramlar","id":"temel-kavramlar","depth":3,"charIndex":327},{"text":"Modül Dışa Aktarma","id":"modül-dışa-aktarma","depth":4,"charIndex":345},{"text":"Modül İçe Aktarma","id":"modül-i̇çe-aktarma","depth":4,"charIndex":727},{"text":"Ön Yükleme Mekanizması","id":"ön-yükleme-mekanizması","depth":3,"charIndex":1118},{"text":"Modül Dışa Aktarma","id":"modül-dışa-aktarma-1","depth":2,"charIndex":1803},{"text":"Yapılandırma Açıklaması","id":"yapılandırma-açıklaması","depth":3,"charIndex":1825},{"text":"Modül İçe Aktarma","id":"modül-i̇çe-aktarma-1","depth":2,"charIndex":2135},{"text":"Yapılandırma Açıklaması","id":"yapılandırma-açıklaması-1","depth":3,"charIndex":2156},{"text":"Kurulum Yöntemleri","id":"kurulum-yöntemleri","depth":3,"charIndex":2709},{"text":"Kaynak Kod Kurulumu","id":"kaynak-kod-kurulumu","depth":4,"charIndex":2730},{"text":"Paket Kurulumu","id":"paket-kurulumu","depth":4,"charIndex":2990},{"text":"Paket Derleme","id":"paket-derleme","depth":2,"charIndex":3190},{"text":"Yapılandırma Açıklaması","id":"yapılandırma-açıklaması-2","depth":3,"charIndex":3207},{"text":"Derleme Çıktıları","id":"derleme-çıktıları","depth":3,"charIndex":3298},{"text":"Yayınlama Süreci","id":"yayınlama-süreci","depth":3,"charIndex":3321},{"text":"En İyi Uygulamalar","id":"en-i̇yi-uygulamalar","depth":2,"charIndex":3343},{"text":"Geliştirme Ortamı Yapılandırması","id":"geliştirme-ortamı-yapılandırması","depth":3,"charIndex":3365},{"text":"Üretim Ortamı Yapılandırması","id":"üretim-ortamı-yapılandırması","depth":3,"charIndex":3733},{"text":"Sürüm Yönetimi","id":"sürüm-yönetimi","depth":3,"charIndex":4078}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Hizmetler Arası Kod Paylaşım Mekanizması","description":"Gez çerçevesinin modül bağlantı mekanizmasını detaylı olarak açıklar, hizmetler arası kod paylaşımı, bağımlılık yönetimi ve ESM spesifikasyonu uygulamasını içerir, geliştiricilere verimli mikro ön uç uygulamaları oluşturmalarına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, Modül Bağlantısı, Module Link, ESM, Kod Paylaşımı, Bağımlılık Yönetimi, Mikro Ön Uç"}]]},"version":""},{"id":264,"title":"Render Bağlamı","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/tr/guide/essentials/render-context","lang":"tr","toc":[{"text":"Kullanım Şekli","id":"kullanım-şekli","depth":2,"charIndex":-1},{"text":"Temel İşlevler","id":"temel-i̇şlevler","depth":2,"charIndex":-1},{"text":"Bağımlılık Toplama","id":"bağımlılık-toplama","depth":3,"charIndex":-1},{"text":"İsteğe Bağlı Toplama","id":"i̇steğe-bağlı-toplama","depth":4,"charIndex":-1},{"text":"Otomatik İşleme","id":"otomatik-i̇şleme","depth":4,"charIndex":-1},{"text":"Performans Optimizasyonu","id":"performans-optimizasyonu","depth":4,"charIndex":-1},{"text":"Kaynak Enjeksiyonu","id":"kaynak-enjeksiyonu","depth":3,"charIndex":-1},{"text":"Kaynak Enjeksiyon Sırası","id":"kaynak-enjeksiyon-sırası","depth":3,"charIndex":-1},{"text":"Tam Render Süreci","id":"tam-render-süreci","depth":2,"charIndex":-1},{"text":"Gelişmiş Özellikler","id":"gelişmiş-özellikler","depth":2,"charIndex":-1},{"text":"Temel Yol Yapılandırması","id":"temel-yol-yapılandırması","depth":3,"charIndex":-1},{"text":"İçe Aktarma Haritası Modları","id":"i̇çe-aktarma-haritası-modları","depth":3,"charIndex":-1},{"text":"Giriş Fonksiyonu Yapılandırması","id":"giriş-fonksiyonu-yapılandırması","depth":3,"charIndex":-1},{"text":"En İyi Uygulamalar","id":"en-i̇yi-uygulamalar","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Sunucu Taraflı Render Mekanizması","description":"Gez çerçevesinin RenderContext (Render Bağlamı) mekanizmasını detaylı olarak açıklar, kaynak yönetimi, HTML oluşturma ve ESM modül sistemi dahil olmak üzere geliştiricilerin sunucu tarafı render (SSR) özelliğini anlamasına ve kullanmasına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, Render Bağlamı, RenderContext, SSR, Sunucu Taraflı Render, ESM, Kaynak Yönetimi"}]]},"version":""},{"id":265,"title":"Rspack","content":"#\n\nGez, Rspack derleme sistemi üzerine inşa edilmiştir ve Rspack'in yüksek\nperformanslı derleme yeteneklerinden tam olarak yararlanır. Bu belge, Rspack'in\nGez çerçevesindeki konumunu ve temel işlevlerini açıklamaktadır.\n\n\nÖzellikler#\n\nRspack, Gez çerçevesinin temel derleme sistemidir ve aşağıdaki temel özellikleri\nsunar:\n\n * Yüksek Performanslı Derleme: Rust ile uygulanan derleme motoru, büyük\n   projelerde derleme hızını önemli ölçüde artıran son derece hızlı derleme\n   performansı sağlar.\n * Geliştirme Deneyimi Optimizasyonu: Sıcak güncelleme (HMR), artımlı derleme\n   gibi modern geliştirme özelliklerini destekler ve akıcı bir geliştirme\n   deneyimi sunar.\n * Çoklu Ortam Derleme: İstemci (client), sunucu (server) ve Node.js (node)\n   ortamlarını destekleyen birleşik derleme yapılandırması, çoklu platform\n   geliştirme sürecini basitleştirir.\n * Kaynak Optimizasyonu: Kod bölme, Tree Shaking, kaynak sıkıştırma gibi\n   özellikleri destekleyen yerleşik kaynak işleme ve optimizasyon yetenekleri.\n\n\nUygulama Derleme#\n\nGez'in Rspack derleme sistemi modüler bir tasarıma sahiptir ve aşağıdaki temel\nmodülleri içerir:\n\n\n@gez/rspack#\n\nTemel derleme modülü, aşağıdaki temel yetenekleri sağlar:\n\n * Birleşik Derleme Yapılandırması: Standartlaştırılmış derleme yapılandırma\n   yönetimi sunar ve çoklu ortam yapılandırmasını destekler.\n * Kaynak İşleme: TypeScript, CSS, resimler gibi kaynaklar için yerleşik işleme\n   yetenekleri.\n * Derleme Optimizasyonu: Kod bölme, Tree Shaking gibi performans optimizasyon\n   özellikleri.\n * Geliştirme Sunucusu: Yüksek performanslı bir geliştirme sunucusu entegre eder\n   ve HMR'yi destekler.\n\n\n@gez/rspack-vue#\n\nVue çerçevesi için özel derleme modülü, aşağıdakileri sağlar:\n\n * Vue Bileşen Derleme: Vue 2/3 bileşenlerinin verimli derlenmesini destekler.\n * SSR Optimizasyonu: Sunucu tarafı render etme senaryoları için özel\n   optimizasyonlar.\n * Geliştirme Geliştirmeleri: Vue geliştirme ortamı için özel işlevsel\n   geliştirmeler.\n\n\nDerleme Süreci#\n\nGez'in derleme süreci temel olarak aşağıdaki aşamalara ayrılır:\n\n 1. Yapılandırma Başlatma\n    \n    * Proje yapılandırmasını yükleme\n    * Varsayılan yapılandırma ve kullanıcı yapılandırmasını birleştirme\n    * Ortam değişkenlerine göre yapılandırmayı ayarlama\n\n 2. Kaynak Derleme\n    \n    * Kaynak kod bağımlılıklarını çözme\n    * Çeşitli kaynakları (TypeScript, CSS vb.) dönüştürme\n    * Modül içe/dışa aktarma işlemlerini gerçekleştirme\n\n 3. Optimizasyon İşlemi\n    \n    * Kod bölme uygulama\n    * Tree Shaking uygulama\n    * Kod ve kaynakları sıkıştırma\n\n 4. Çıktı Oluşturma\n    \n    * Hedef dosyaları oluşturma\n    * Kaynak haritalarını çıktı olarak verme\n    * Derleme raporu oluşturma\n\n\nEn İyi Uygulamalar#\n\n\nGeliştirme Ortamı Optimizasyonu#\n\n * Artımlı Derleme Yapılandırması: cache seçeneğini uygun şekilde yapılandırarak\n   önbelleği kullanın ve derleme hızını artırın.\n * HMR Optimizasyonu: Sıcak güncelleme kapsamını hedefleyerek yapılandırın ve\n   gereksiz modül güncellemelerinden kaçının.\n * Kaynak İşleme Optimizasyonu: Uygun loader yapılandırması kullanarak\n   tekrarlayan işlemlerden kaçının.\n\n\nÜretim Ortamı Optimizasyonu#\n\n * Kod Bölme Stratejisi: splitChunks'u uygun şekilde yapılandırarak kaynak\n   yüklemesini optimize edin.\n * Kaynak Sıkıştırma: Uygun sıkıştırma yapılandırmasını etkinleştirerek derleme\n   süresi ve çıktı boyutu arasında denge kurun.\n * Önbellek Optimizasyonu: İçerik hash'i ve uzun süreli önbellek stratejilerini\n   kullanarak yükleme performansını artırın.\n\n\nYapılandırma Örneği#\n\n\n\n::: ipucu Daha ayrıntılı API açıklamaları ve yapılandırma seçenekleri için\nRspack API Belgesi sayfasına bakın. :::","routePath":"/tr/guide/essentials/rspack","lang":"tr","toc":[{"text":"Özellikler","id":"özellikler","depth":2,"charIndex":221},{"text":"Uygulama Derleme","id":"uygulama-derleme","depth":2,"charIndex":1009},{"text":"@gez/rspack","id":"gezrspack","depth":3,"charIndex":1127},{"text":"@gez/rspack-vue","id":"gezrspack-vue","depth":3,"charIndex":1636},{"text":"Derleme Süreci","id":"derleme-süreci","depth":2,"charIndex":1977},{"text":"En İyi Uygulamalar","id":"en-i̇yi-uygulamalar","depth":2,"charIndex":2688},{"text":"Geliştirme Ortamı Optimizasyonu","id":"geliştirme-ortamı-optimizasyonu","depth":3,"charIndex":2710},{"text":"Üretim Ortamı Optimizasyonu","id":"üretim-ortamı-optimizasyonu","depth":3,"charIndex":3107},{"text":"Yapılandırma Örneği","id":"yapılandırma-örneği","depth":2,"charIndex":3497}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Yüksek Performanslı Derleme Motoru","description":"Gez çerçevesinin Rspack derleme sistemini derinlemesine inceleyin, yüksek performanslı derleme, çoklu ortam derleme, kaynak optimizasyonu gibi temel özelliklerle modern Web uygulamaları oluşturmanıza yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, Rspack, derleme sistemi, yüksek performanslı derleme, sıcak güncelleme, çoklu ortam derleme, Tree Shaking, kod bölme, SSR, kaynak optimizasyonu, geliştirme verimliliği, derleme araçları"}]]},"version":""},{"id":266,"title":"Standartlar","content":"#\n\nGez, modern bir SSR çerçevesidir ve projelerin geliştirme ve üretim ortamlarında\ntutarlılığını ve bakımını sağlamak için standartlaştırılmış proje yapısı ve yol\nçözümleme mekanizması kullanır.\n\n\nProje Yapısı Standartları#\n\n\nStandart Dizin Yapısı#\n\n\n\nEk Bilgi\n * gez.name, package.json dosyasındaki name alanından alınır\n * dist/package.json, kök dizindeki package.json dosyasından alınır\n * packs.enable değeri true olarak ayarlandığında, dist dizini arşivlenir\n\n\nGiriş Dosyası Standartları#\n\n\nentry.client.ts#\n\nİstemci tarafı giriş dosyası şunlardan sorumludur:\n\n * Uygulama Başlatma: İstemci tarafı uygulamanın temel ayarlarını yapılandırır\n * Rota Yönetimi: İstemci tarafı rotaları ve gezinmeyi işler\n * Durum Yönetimi: İstemci tarafı durumlarının saklanmasını ve güncellenmesini\n   sağlar\n * Etkileşim Yönetimi: Kullanıcı olaylarını ve arayüz etkileşimlerini yönetir\n\n\nentry.server.ts#\n\nSunucu tarafı giriş dosyası şunlardan sorumludur:\n\n * Sunucu Tarafı Render: SSR render sürecini yürütür\n * HTML Oluşturma: Başlangıç sayfa yapısını oluşturur\n * Veri Ön Alma: Sunucu tarafı veri alımını işler\n * Durum Enjeksiyonu: Sunucu tarafı durumunu istemci tarafına aktarır\n * SEO Optimizasyonu: Sayfanın arama motoru optimizasyonunu sağlar\n\n\nentry.node.ts#\n\nNode.js sunucu giriş dosyası şunlardan sorumludur:\n\n * Sunucu Yapılandırması: HTTP sunucu parametrelerini ayarlar\n * Rota İşleme: Sunucu tarafı rota kurallarını yönetir\n * Middleware Entegrasyonu: Sunucu middleware'lerini yapılandırır\n * Ortam Yönetimi: Ortam değişkenlerini ve yapılandırmaları işler\n * İstek Yanıt: HTTP isteklerini ve yanıtlarını işler\n\n\nYapılandırma Dosyası Standartları#\n\n\npackage.json#\n\n\n\n\ntsconfig.json#\n\n","routePath":"/tr/guide/essentials/std","lang":"tr","toc":[{"text":"Proje Yapısı Standartları","id":"proje-yapısı-standartları","depth":2,"charIndex":197},{"text":"Standart Dizin Yapısı","id":"standart-dizin-yapısı","depth":3,"charIndex":226},{"text":"Giriş Dosyası Standartları","id":"giriş-dosyası-standartları","depth":2,"charIndex":466},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":496},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":875},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":1240},{"text":"Yapılandırma Dosyası Standartları","id":"yapılandırma-dosyası-standartları","depth":2,"charIndex":1613},{"text":"package.json","id":"packagejson","depth":3,"charIndex":1650},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":1668}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Proje Yapısı ve Standartları Kılavuzu","description":"Gez çerçevesinin standart proje yapısını, giriş dosyası standartlarını ve yapılandırma dosyası standartlarını detaylı bir şekilde açıklar, geliştiricilerin standartlaştırılmış ve bakımı kolay SSR uygulamaları oluşturmasına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, Proje Yapısı, Giriş Dosyası, Yapılandırma Standartları, SSR Çerçevesi, TypeScript, Proje Standartları, Geliştirme Standartları"}]]},"version":""},{"id":267,"title":"HTML","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/tr/guide/frameworks/html","lang":"tr","toc":[{"text":"Proje Yapısı","id":"proje-yapısı","depth":2,"charIndex":-1},{"text":"Proje Yapılandırması","id":"proje-yapılandırması","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"Kaynak Kod Yapısı","id":"kaynak-kod-yapısı","depth":2,"charIndex":-1},{"text":"app.ts","id":"appts","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"Projeyi Çalıştırma","id":"projeyi-çalıştırma","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework HTML SSR Uygulama Örneği","description":"Gez tabanlı bir HTML SSR uygulamasını sıfırdan oluşturun, proje başlatma, HTML yapılandırması ve giriş dosyası ayarları dahil olmak üzere framework'ün temel kullanımını bir örnekle gösterin.","head":[["meta",{"property":"keywords","content":"Gez, HTML, SSR uygulaması, TypeScript yapılandırması, proje başlatma, sunucu tarafı render, istemci etkileşimi"}]]},"version":""},{"id":268,"title":"Preact+HTM","content":"${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/tr/guide/frameworks/preact-htm","lang":"tr","toc":[{"text":"Proje Yapısı","id":"proje-yapısı","depth":2,"charIndex":-1},{"text":"Proje Yapılandırması","id":"proje-yapılandırması","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"Kaynak Kod Yapısı","id":"kaynak-kod-yapısı","depth":2,"charIndex":-1},{"text":"app.ts","id":"appts","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"Projeyi Çalıştırma","id":"projeyi-çalıştırma","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Preact+HTM SSR Uygulama Örneği","description":"Gez tabanlı Preact+HTM SSR uygulamasını sıfırdan oluşturun, proje başlatma, Preact yapılandırması ve giriş dosyası ayarları dahil olmak üzere temel çerçeve kullanımını örneklerle gösterin.","head":[["meta",{"property":"keywords","content":"Gez, Preact, HTM, SSR uygulaması, TypeScript yapılandırması, proje başlatma, sunucu tarafı render, istemci etkileşimi"}]]},"version":""},{"id":269,"title":"Vue2","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/tr/guide/frameworks/vue2","lang":"tr","toc":[{"text":"Proje Yapısı","id":"proje-yapısı","depth":2,"charIndex":-1},{"text":"Proje Yapılandırması","id":"proje-yapılandırması","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"Kaynak Kodu Yapısı","id":"kaynak-kodu-yapısı","depth":2,"charIndex":-1},{"text":"app.vue","id":"appvue","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"Projeyi Çalıştırma","id":"projeyi-çalıştırma","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Vue2 SSR Uygulama Örneği","description":"Gez tabanlı Vue2 SSR uygulamasını sıfırdan oluşturun, proje başlatma, Vue2 yapılandırması ve giriş dosyası ayarları dahil olmak üzere temel çerçeve kullanımını örneklerle gösterin.","head":[["meta",{"property":"keywords","content":"Gez, Vue2, SSR uygulaması, TypeScript yapılandırması, proje başlatma, sunucu tarafı render, istemci etkileşimi"}]]},"version":""},{"id":270,"title":"Vue3","content":"${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/tr/guide/frameworks/vue3","lang":"tr","toc":[{"text":"Proje Yapısı","id":"proje-yapısı","depth":2,"charIndex":-1},{"text":"Proje Yapılandırması","id":"proje-yapılandırması","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"Kaynak Kod Yapısı","id":"kaynak-kod-yapısı","depth":2,"charIndex":-1},{"text":"app.vue","id":"appvue","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"Projeyi Çalıştırma","id":"projeyi-çalıştırma","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Vue3 SSR Uygulama Örneği","description":"Gez tabanlı Vue3 SSR uygulamasını sıfırdan oluşturun, proje başlatma, Vue3 yapılandırması ve giriş dosyası ayarları dahil olmak üzere temel kullanımı örneklerle gösterin.","head":[["meta",{"property":"keywords","content":"Gez, Vue3, SSR uygulaması, TypeScript yapılandırması, proje başlatma, sunucu tarafı render, istemci etkileşimi, Composition API"}]]},"version":""},{"id":271,"title":"Ortam Gereksinimleri","content":"#\n\nBu belge, bu çerçeveyi kullanmak için gereken ortam gereksinimlerini, Node.js\nortamı ve tarayıcı uyumluluğunu açıklar.\n\n\nNode.js Ortamı#\n\nÇerçeve, Node.js sürümü >= 22.6 gerektirir, bu özellikle TypeScript tür içe\naktarımlarını desteklemek için kullanılır (--experimental-strip-types bayrağı\naracılığıyla), ek derleme adımlarına gerek yoktur.\n\n\nTarayıcı Uyumluluğu#\n\nÇerçeve, daha geniş bir tarayıcı desteği sağlamak için varsayılan olarak\nuyumluluk modunda oluşturulur. Ancak, tam tarayıcı uyumluluk desteği sağlamak\niçin es-module-shims bağımlılığını manuel olarak eklemeniz gerektiğini\nunutmayın.\n\n\nUyumluluk Modu (Varsayılan)#\n\n * 🌐 Chrome: >= 87\n * 🔷 Edge: >= 88\n * 🦊 Firefox: >= 78\n * 🧭 Safari: >= 14\n\nCan I Use istatistiklerine göre, uyumluluk modunda tarayıcı kapsama oranı\n%96.81'dir.\n\n\nYerel Destek Modu#\n\n * 🌐 Chrome: >= 89\n * 🔷 Edge: >= 89\n * 🦊 Firefox: >= 108\n * 🧭 Safari: >= 16.4\n\nYerel destek modu aşağıdaki avantajlara sahiptir:\n\n * Sıfır çalışma zamanı maliyeti, ek modül yükleyiciye gerek yok\n * Tarayıcı tarafından yerel olarak çözümlenir, daha hızlı yürütme hızı\n * Daha iyi kod bölme ve isteğe bağlı yükleme yetenekleri\n\nCan I Use istatistiklerine göre, uyumluluk modunda tarayıcı kapsama oranı\n%93.5'tir.\n\n\nUyumluluk Desteğini Etkinleştirme#\n\nÖnemli Uyarı\n\nÇerçeve varsayılan olarak uyumluluk modunda oluşturulsa da, eski tarayıcılar\niçin tam destek sağlamak için projenize es-module-shims bağımlılığını eklemeniz\ngerekmektedir.\n\nHTML dosyasına aşağıdaki betiği ekleyin:\n\n\n\nEn İyi Uygulamalar\n 1. Üretim ortamı önerileri:\n    * es-module-shims'i kendi sunucunuza dağıtın\n    * Kaynak yüklemenin kararlılığını ve erişim hızını sağlayın\n    * Potansiyel güvenlik risklerinden kaçının\n 2. Performans düşünceleri:\n    * Uyumluluk modu küçük bir performans maliyeti getirir\n    * Hedef kullanıcı kitlesinin tarayıcı dağılımına göre etkinleştirilip\n      etkinleştirilmeyeceğine karar verebilirsiniz","routePath":"/tr/guide/start/environment","lang":"tr","toc":[{"text":"Node.js Ortamı","id":"nodejs-ortamı","depth":2,"charIndex":123},{"text":"Tarayıcı Uyumluluğu","id":"tarayıcı-uyumluluğu","depth":2,"charIndex":347},{"text":"Uyumluluk Modu (Varsayılan)","id":"uyumluluk-modu-varsayılan","depth":3,"charIndex":604},{"text":"Yerel Destek Modu","id":"yerel-destek-modu","depth":3,"charIndex":802},{"text":"Uyumluluk Desteğini Etkinleştirme","id":"uyumluluk-desteğini-etkinleştirme","depth":3,"charIndex":1239}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesi Uyumluluk Rehberi","description":"Gez çerçevesinin ortam gereksinimlerini detaylı olarak açıklar, Node.js sürüm gereksinimlerini ve tarayıcı uyumluluk açıklamalarını içerir, geliştiricilerin geliştirme ortamını doğru şekilde yapılandırmasına yardımcı olur.","head":[["meta",{"property":"keywords","content":"Gez, Node.js, tarayıcı uyumluluğu, TypeScript, es-module-shims, ortam yapılandırması"}]]},"version":""},{"id":272,"title":"Hızlı Başlangıç","content":"#\n\n\nProje Başlatma#\n\nYeni bir Gez projesi oluşturmak ve başlatmak için aşağıdaki adımları izleyin:\n\n\n\n\nFramework Sürüm Seçimi#\n\nGez Framework, farklı uygulama senaryoları için optimize edilmiş birden fazla\nteknoloji yığını sürümü sunar. Proje gereksinimlerinize göre uygun sürümü seçin:\n\n\nHTML#\n\nMinimalist mimariyi tercih eden projeler için uygundur:\n\n * Harici bağımlılık yok, kullanıma hazır\n * Saf JavaScript geliştirme deneyimi\n * Statik web siteleri ve hafif uygulamalar için uygun\n * Kademeli işlev genişletme desteği\n\nHTML sürümü detaylı belgelerini görüntüle\n\n\nVue2#\n\nKurumsal uygulama geliştirme için uygundur:\n\n * Tam TypeScript desteği\n * Zengin üçüncü parti bileşen ekosistemi\n * Olgun geliştirme araç zinciri\n * Üretim ortamında kanıtlanmış kararlılık\n\nVue2 sürümü detaylı belgelerini görüntüle\n\n\nVue3#\n\nModern web uygulamaları geliştirme için uygundur:\n\n * Proxy tabanlı reaktif sistem\n * Kompozisyon API desteği\n * Daha iyi çalışma zamanı performansı\n * Daha küçük paket boyutu\n\nVue3 sürümü detaylı belgelerini görüntüle\n\n\nPreact+HTM#\n\nHafif ve yüksek performanslı projeler için uygundur:\n\n * Çok küçük çalışma zamanı boyutu (3KB)\n * Saf JavaScript şablon sözdizimi\n * React ile uyumlu API\n * Mükemmel performans\n\nPreact+HTM sürümü detaylı belgelerini görüntüle\n\n\nAI Destekli Geliştirme#\n\nGez Framework, geliştirme verimliliğini önemli ölçüde artırabilen AI destekli\ngeliştirme yetenekleri sunar:\n\n 1. Uygun framework sürüm belgelerini seçin\n 2. Belge içeriğini AI asistanına sağlayın\n 3. AI otomatik olarak proje iskeleti ve yapılandırma dosyalarını oluşturacaktır\n\nİpucu\n\nAI destekli geliştirme yalnızca proje başlatma hızını artırmakla kalmaz, aynı\nzamanda proje yapısının en iyi uygulamalara uygun olmasını sağlar.","routePath":"/tr/guide/start/getting-started","lang":"tr","toc":[{"text":"Proje Başlatma","id":"proje-başlatma","depth":2,"charIndex":3},{"text":"Framework Sürüm Seçimi","id":"framework-sürüm-seçimi","depth":2,"charIndex":102},{"text":"HTML","id":"html","depth":3,"charIndex":288},{"text":"Vue2","id":"vue2","depth":3,"charIndex":569},{"text":"Vue3","id":"vue3","depth":3,"charIndex":810},{"text":"Preact+HTM","id":"preacthtm","depth":3,"charIndex":1038},{"text":"AI Destekli Geliştirme","id":"ai-destekli-geliştirme","depth":2,"charIndex":1279}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Hızlı Başlangıç Kılavuzu","description":"Gez Framework Hızlı Başlangıç Kılavuzu, sıfırdan bir proje oluşturmanıza yardımcı olur. Proje başlatma, framework sürüm seçimi ve AI destekli geliştirme gibi konuları içerir.","head":[["meta",{"name":"keywords","content":"Gez Framework, Hızlı Başlangıç, Proje Başlatma, Vue Geliştirme, HTML Geliştirme, AI Destekli"}]]},"version":""},{"id":273,"title":"Giriş","content":"#\n\n\nProje Arka Planı#\n\nGez, yüksek performanslı ve ölçeklenebilir sunucu tarafı render (SSR)\nuygulamaları oluşturmaya odaklanan, ECMAScript Modules (ESM) tabanlı modern bir\nmikro ön uç çerçevesidir. Genesis projesinin üçüncü nesil ürünü olarak Gez,\nteknolojik evrim sürecinde sürekli yenilikler getirmektedir:\n\n * v1.0: HTTP istekleri üzerinden uzak bileşenlerin isteğe bağlı yüklenmesini\n   sağladı\n * v2.0: Webpack Module Federation kullanarak uygulama entegrasyonunu\n   gerçekleştirdi\n * v3.0: Tarayıcı yerel ESM'yi temel alarak modül bağlantı sistemini yeniden\n   tasarladı\n\n\nTeknolojik Arka Plan#\n\nMikro ön uç mimarisinin gelişim sürecinde, geleneksel çözümler temel olarak\naşağıdaki sınırlamalarla karşı karşıya kalmıştır:\n\n\nMevcut Çözümlerin Zorlukları#\n\n * Performans darboğazları: Çalışma zamanı bağımlılık enjeksiyonu ve JavaScript\n   sandbox proxy'leri önemli performans maliyetleri getiriyor\n * İzolasyon mekanizmaları: Özel sandbox ortamları, tarayıcı yerel modül\n   izolasyon yeteneklerine ulaşmakta zorlanıyor\n * Yapılandırma karmaşıklığı: Bağımlılık paylaşımı için yapılan yapılandırma\n   aracı değişiklikleri, proje bakım maliyetlerini artırıyor\n * Standart sapmalar: Özel dağıtım stratejileri ve çalışma zamanı işleme\n   mekanizmaları, modern web geliştirme standartlarından uzaklaşıyor\n * Ekosistem sınırlamaları: Çerçeve bağımlılıkları ve özel API'ler, teknoloji\n   yığını seçimini kısıtlıyor\n\n\nTeknolojik Yenilikler#\n\nGez, modern web standartlarını temel alarak yeni bir çözüm sunar:\n\n * Yerel modül sistemi: Tarayıcı yerel ESM ve Import Maps kullanarak bağımlılık\n   yönetimi sağlar, daha hızlı çözümleme ve yürütme hızı sunar\n * Standart izolasyon mekanizması: ECMAScript modül kapsamına dayalı güvenilir\n   uygulama izolasyonu sağlar\n * Açık teknoloji yığını: Herhangi bir modern ön uç çerçevesinin sorunsuz\n   entegrasyonunu destekler\n * Geliştirme deneyimi optimizasyonu: Sezgisel geliştirme modelleri ve tam hata\n   ayıklama yetenekleri sunar\n * Aşırı performans optimizasyonu: Yerel yeteneklerle sıfır çalışma zamanı\n   maliyeti sağlar, akıllı önbellek stratejileriyle desteklenir\n\nTIP\n\nGez, özellikle büyük ölçekli sunucu tarafı render uygulamaları için yüksek\nperformanslı ve kolayca genişletilebilir mikro ön uç altyapısı oluşturmaya\nodaklanır.\n\n\nTeknik Özellikler#\n\n\nOrtam Bağımlılıkları#\n\nDetaylı tarayıcı ve Node.js ortam gereksinimleri için ortam gereksinimleri\nbelgesine bakın.\n\n\nTemel Teknoloji Yığını#\n\n * Bağımlılık yönetimi: Modül eşleme için Import Maps kullanır, uyumluluk\n   desteği için es-module-shims sağlar\n * Yapılandırma sistemi: Rspack tabanlı module-import ile harici bağımlılıkları\n   işler\n * Geliştirme araç zinciri: ESM sıcak güncelleme ve TypeScript yerel yürütme\n   desteği sunar\n\n\nÇerçeve Konumu#\n\nGez, Next.js veya Nuxt.js gibi çerçevelerden farklı olarak, mikro ön uç\naltyapısı sağlamaya odaklanır:\n\n * Modül bağlantı sistemi: Verimli ve güvenilir modül içe/dışa aktarma sağlar\n * Sunucu tarafı render: Esnek SSR uygulama mekanizması sunar\n * Tür sistemi desteği: Tam TypeScript tür tanımlarını entegre eder\n * Çerçeve tarafsızlığı: Ana akım ön uç çerçevelerinin entegrasyonunu destekler\n\n\nMimari Tasarım#\n\n\nMerkezi Bağımlılık Yönetimi#\n\n * Birleşik bağımlılık kaynağı: Merkezi üçüncü parti bağımlılık yönetimi\n * Otomatik dağıtım: Bağımlılık güncellemelerinin global otomatik\n   senkronizasyonu\n * Sürüm tutarlılığı: Kesin bağımlılık sürüm kontrolü\n\n\nModüler Tasarım#\n\n * Sorumluluk ayrımı: İş mantığı ve altyapının ayrıştırılması\n * Eklenti mekanizması: Modüllerin esnek kombinasyonu ve değiştirilmesi desteği\n * Standart arayüzler: Standartlaştırılmış modüller arası iletişim protokolü\n\n\nPerformans Optimizasyonu#\n\n * Sıfır maliyet prensibi: Tarayıcı yerel yeteneklerinin maksimum kullanımı\n * Akıllı önbellek: İçerik hash'ine dayalı kesin önbellek stratejisi\n * İsteğe bağlı yükleme: İnce ayarlı kod bölme ve bağımlılık yönetimi\n\n\nProje Olgunluğu#\n\nGez, yaklaşık 5 yıllık yinelemeli evrim (v1.0'dan v3.0'a) sürecinde, kurumsal\ndüzeyde ortamlarda kapsamlı bir şekilde doğrulanmıştır. Şu anda onlarca iş\nprojesini istikrarlı bir şekilde desteklemekte ve teknoloji yığını\nmodernizasyonunu sürekli olarak ilerletmektedir. Çerçevenin istikrarı,\ngüvenilirliği ve performans avantajları pratikte tam olarak test edilmiş olup,\nbüyük ölçekli uygulama geliştirme için güvenilir bir teknik temel sağlamaktadır.","routePath":"/tr/guide/start/introduction","lang":"tr","toc":[{"text":"Proje Arka Planı","id":"proje-arka-planı","depth":2,"charIndex":3},{"text":"Teknolojik Arka Plan","id":"teknolojik-arka-plan","depth":2,"charIndex":579},{"text":"Mevcut Çözümlerin Zorlukları","id":"mevcut-çözümlerin-zorlukları","depth":3,"charIndex":730},{"text":"Teknolojik Yenilikler","id":"teknolojik-yenilikler","depth":3,"charIndex":1414},{"text":"Teknik Özellikler","id":"teknik-özellikler","depth":2,"charIndex":2277},{"text":"Ortam Bağımlılıkları","id":"ortam-bağımlılıkları","depth":3,"charIndex":2298},{"text":"Temel Teknoloji Yığını","id":"temel-teknoloji-yığını","depth":3,"charIndex":2415},{"text":"Çerçeve Konumu","id":"çerçeve-konumu","depth":2,"charIndex":2738},{"text":"Mimari Tasarım","id":"mimari-tasarım","depth":2,"charIndex":3149},{"text":"Merkezi Bağımlılık Yönetimi","id":"merkezi-bağımlılık-yönetimi","depth":3,"charIndex":3167},{"text":"Modüler Tasarım","id":"modüler-tasarım","depth":3,"charIndex":3411},{"text":"Performans Optimizasyonu","id":"performans-optimizasyonu","depth":3,"charIndex":3650},{"text":"Proje Olgunluğu","id":"proje-olgunluğu","depth":2,"charIndex":3894}],"domain":"","frontmatter":{"titleSuffix":"Gez Çerçevesine Genel Bakış ve Teknolojik Yenilikler","description":"Gez mikro ön uç çerçevesinin proje arka planını, teknolojik evrimini ve temel avantajlarını derinlemesine inceleyin, ESM tabanlı modern sunucu tarafı render (SSR) çözümlerini keşfedin.","head":[["meta",{"property":"keywords","content":"Gez, mikro ön uç, ESM, sunucu tarafı render, SSR, teknolojik yenilik, modül federasyonu"}]]},"version":""}]